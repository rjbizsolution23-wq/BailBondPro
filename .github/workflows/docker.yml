name: üê≥ Docker Build & Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Build and Test Docker Image
  # ============================================================================
  
  build-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: runner
          push: false
          tags: bailbondpro:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Docker Image
        run: |
          # Start the container
          docker run -d --name bailbondpro-test \
            -p 3000:3000 \
            -e NODE_ENV=test \
            -e DATABASE_URL=sqlite://test.db \
            bailbondpro:test

          # Wait for container to be ready
          sleep 30

          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1

          # Stop and remove container
          docker stop bailbondpro-test
          docker rm bailbondpro-test

      - name: üîç Scan Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bailbondpro:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üìä Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Build and Push Multi-Platform Images
  # ============================================================================
  
  build-push:
    name: üöÄ Build & Push
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üìä Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            bailbondpro/bailbondpro
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # ============================================================================
  # Deploy to Staging (Docker)
  # ============================================================================
  
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging-docker
      url: https://staging-docker.bailbondpro.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/bailbondpro
            
            # Pull latest images
            docker-compose pull
            
            # Update containers
            docker-compose up -d --remove-orphans
            
            # Clean up old images
            docker image prune -f
            
            # Wait for health check
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            
            echo "‚úÖ Staging deployment successful!"

  # ============================================================================
  # Deploy to Production (Docker)
  # ============================================================================
  
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-push
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production-docker
      url: https://docker.bailbondpro.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/bailbondpro
            
            # Create backup
            docker-compose exec -T postgres pg_dump -U bailbondpro bailbondpro > backup-$(date +%Y%m%d-%H%M%S).sql
            
            # Pull latest images
            docker-compose pull
            
            # Update containers with zero-downtime deployment
            docker-compose up -d --remove-orphans --scale app=2
            sleep 30
            docker-compose up -d --remove-orphans --scale app=1
            
            # Clean up old images
            docker image prune -f
            
            # Verify deployment
            curl -f http://localhost:3000/health || exit 1
            
            echo "‚úÖ Production deployment successful!"

  # ============================================================================
  # Security Scanning
  # ============================================================================
  
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: üîç Run Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          args: --severity-threshold=high

      - name: üìä Upload Snyk Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

# ============================================================================
# Workflow Configuration
# ============================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true