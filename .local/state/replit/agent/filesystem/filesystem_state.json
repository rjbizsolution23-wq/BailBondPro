{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nBailBond Pro is a comprehensive bail bonds management system designed to streamline operations for bail bond agencies. The application provides a complete workflow for managing clients, cases, bonds, payments, and documents while offering financial tracking and reporting capabilities. Built as a full-stack web application, it features a modern React frontend with a Node.js/Express backend, using PostgreSQL for data persistence and integrating with external APIs for enhanced functionality.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Schema Validation**: Zod schemas shared between frontend and backend\n- **API Design**: RESTful endpoints organized by resource (clients, cases, bonds, payments)\n- **Error Handling**: Centralized error middleware with structured error responses\n\n## Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Secondary Integration**: Gibson AI API for external data operations\n- **Schema Structure**: \n  - Users table for authentication and role management\n  - Clients table for defendant information\n  - Cases table linked to clients for legal case tracking\n  - Bonds table connecting cases with financial instruments\n  - Payments table for tracking financial transactions\n  - Documents and Activities tables for comprehensive record keeping\n- **Data Relationships**: Foreign key constraints maintain referential integrity across entities\n\n## Authentication & Authorization\n- **User Roles**: Admin, Agent, and Staff with different permission levels\n- **Session Management**: Prepared for cookie-based sessions with PostgreSQL storage\n- **Security**: Password hashing and role-based access control patterns implemented\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL connection driver\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect\n- **@tanstack/react-query**: Server state management and caching\n- **@radix-ui/***: Unstyled accessible UI primitives\n- **react-hook-form**: Form state management and validation\n- **@hookform/resolvers**: Integration with Zod validation schemas\n\n### Development & Build Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Static type checking across the stack\n- **Tailwind CSS**: Utility-first CSS framework\n- **PostCSS**: CSS processing with Autoprefixer\n\n### External API Integration\n- **Gibson AI API**: External data service integration at `https://api.gibsonai.com`\n- **Custom API Key**: Configured via environment variables for secure access\n- **Fallback Patterns**: Local database operations with external API enhancement\n\n### Chart & Visualization\n- **Recharts**: React charting library for financial and analytical visualizations\n- **Date-fns**: Date manipulation and formatting utilities\n\n### UI Enhancement Libraries\n- **class-variance-authority**: Utility for creating component variants\n- **clsx & tailwind-merge**: Conditional CSS class composition\n- **cmdk**: Command palette component for search functionality\n- **embla-carousel-react**: Carousel component for UI interactions\n\nThe architecture emphasizes type safety, developer experience, and maintainability while providing a scalable foundation for bail bond management operations.","size_bytes":3998},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Using PostgreSQL database storage\n  log(\"Using PostgreSQL database for data persistence\");\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2163},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertClientSchema, insertCaseSchema, insertBondSchema, insertPaymentSchema, insertDocumentSchema, insertContractTemplateSchema, insertGeneratedContractSchema, insertTrainingModuleSchema, insertTrainingProgressSchema, insertSOPSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { aiService } from \"./ai-services\";\nimport jwt from \"jsonwebtoken\";\nimport rateLimit from \"express-rate-limit\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Validate JWT secret at startup - fail fast for production security\n  const JWT_SECRET = process.env.SESSION_SECRET;\n  if (!JWT_SECRET || JWT_SECRET === 'fallback-secret-for-dev') {\n    throw new Error('SESSION_SECRET environment variable must be set for production security');\n  }\n  \n  // Rate limiting for login endpoint\n  const loginLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // Limit to 5 attempts per IP per window\n    message: { error: 'Too many login attempts. Please try again later.' },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n  \n  // Configure multer for file uploads\n  const uploadsDir = path.join(process.cwd(), 'uploads');\n  \n  // Ensure uploads directory exists\n  await fs.mkdir(uploadsDir, { recursive: true });\n  \n  const multerStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      // Create unique filename with timestamp and random string\n      const timestamp = Date.now();\n      const randomString = Math.random().toString(36).substring(2, 15);\n      const ext = path.extname(file.originalname);\n      const filename = `${timestamp}_${randomString}${ext}`;\n      cb(null, filename);\n    }\n  });\n  \n  const upload = multer({\n    storage: multerStorage,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit per file\n      files: 10 // Maximum 10 files per upload\n    },\n    fileFilter: (req, file, cb) => {\n      // Allow common document types\n      const allowedTypes = [\n        'application/pdf',\n        'image/jpeg',\n        'image/jpg', \n        'image/png',\n        'image/gif',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain'\n      ];\n      \n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error(`Invalid file type: ${file.mimetype}. Only PDF, images, Word documents, and text files are allowed.`));\n      }\n    }\n  });\n  \n  // Image-only multer for photo check-ins (security hardening)\n  const photoUpload = multer({\n    storage: multerStorage,\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit for photos\n      files: 1 // Only one photo per check-in\n    },\n    fileFilter: (req, file, cb) => {\n      // Only allow image types for photo check-ins\n      const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n      \n      if (imageTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files (JPEG, PNG, GIF, WebP) are allowed for photo check-ins.'));\n      }\n    }\n  });\n  \n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activity\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const activities = await storage.getRecentActivity(limit);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch recent activity\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/upcoming-court-dates\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const courtDates = await storage.getUpcomingCourtDates(limit);\n      res.json(courtDates);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch upcoming court dates\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const { role, isActive } = req.query;\n      const users = await storage.getUsers({\n        role: role as string,\n        isActive: isActive === 'true' ? true : isActive === 'false' ? false : undefined,\n      });\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create user\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const { status, search } = req.query;\n      const clients = await storage.getClients({\n        status: status as string,\n        search: search as string,\n      });\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/with-bonds\", async (req, res) => {\n    try {\n      const clients = await storage.getClientsWithBonds();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch clients with bonds\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      \n      // Handle PostgreSQL constraint violations\n      if (error instanceof Error) {\n        if (error.message.includes(\"duplicate key value violates unique constraint\")) {\n          if (error.message.includes(\"clients_email_unique\")) {\n            return res.status(400).json({ error: \"Email address already exists. Please use a different email.\" });\n          }\n          return res.status(400).json({ error: \"Duplicate value detected. Please check your input.\" });\n        }\n      }\n      \n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create client\" });\n    }\n  });\n\n  app.patch(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertClientSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const client = await storage.updateClient(req.params.id, validatedData);\n      res.json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      await storage.deleteClient(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete client\" });\n    }\n  });\n\n  // Case routes\n  app.get(\"/api/cases\", async (req, res) => {\n    try {\n      const { clientId, status } = req.query;\n      const cases = await storage.getCases({\n        clientId: clientId as string,\n        status: status as string,\n      });\n      res.json(cases);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch cases\" });\n    }\n  });\n\n  app.get(\"/api/cases/:id\", async (req, res) => {\n    try {\n      const case_ = await storage.getCase(req.params.id);\n      if (!case_) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      res.json(case_);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch case\" });\n    }\n  });\n\n  app.post(\"/api/cases\", async (req, res) => {\n    try {\n      const validatedData = insertCaseSchema.parse(req.body);\n      const case_ = await storage.createCase(validatedData);\n      res.status(201).json(case_);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      \n      // Handle PostgreSQL constraint violations\n      if (error instanceof Error) {\n        if (error.message.includes(\"duplicate key value violates unique constraint\")) {\n          if (error.message.includes(\"cases_case_number_unique\")) {\n            return res.status(400).json({ error: \"Case number already exists. Please use a different case number.\" });\n          }\n          return res.status(400).json({ error: \"Duplicate value detected. Please check your input.\" });\n        }\n      }\n      \n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create case\" });\n    }\n  });\n\n  app.patch(\"/api/cases/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertCaseSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const case_ = await storage.updateCase(req.params.id, validatedData);\n      res.json(case_);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update case\" });\n    }\n  });\n\n  app.delete(\"/api/cases/:id\", async (req, res) => {\n    try {\n      await storage.deleteCase(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete case\" });\n    }\n  });\n\n  // Bond routes\n  app.get(\"/api/bonds\", async (req, res) => {\n    try {\n      const { clientId, status } = req.query;\n      const bonds = await storage.getBonds({\n        clientId: clientId as string,\n        status: status as string,\n      });\n      res.json(bonds);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch bonds\" });\n    }\n  });\n\n  app.get(\"/api/bonds/with-details\", async (req, res) => {\n    try {\n      const bonds = await storage.getBondsWithDetails();\n      res.json(bonds);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch bonds with details\" });\n    }\n  });\n\n  app.get(\"/api/bonds/:id\", async (req, res) => {\n    try {\n      const bond = await storage.getBond(req.params.id);\n      if (!bond) {\n        return res.status(404).json({ error: \"Bond not found\" });\n      }\n      res.json(bond);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch bond\" });\n    }\n  });\n\n  app.post(\"/api/bonds\", async (req, res) => {\n    try {\n      const validatedData = insertBondSchema.parse(req.body);\n      const bond = await storage.createBond(validatedData);\n      res.status(201).json(bond);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      \n      // Handle PostgreSQL constraint violations\n      if (error instanceof Error) {\n        if (error.message.includes(\"duplicate key value violates unique constraint\")) {\n          if (error.message.includes(\"bonds_bond_number_unique\")) {\n            return res.status(400).json({ error: \"Bond number already exists. Please use a different bond number.\" });\n          }\n          return res.status(400).json({ error: \"Duplicate value detected. Please check your input.\" });\n        }\n      }\n      \n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create bond\" });\n    }\n  });\n\n  app.patch(\"/api/bonds/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertBondSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const bond = await storage.updateBond(req.params.id, validatedData);\n      res.json(bond);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update bond\" });\n    }\n  });\n\n  app.delete(\"/api/bonds/:id\", async (req, res) => {\n    try {\n      await storage.deleteBond(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete bond\" });\n    }\n  });\n\n  // Payment routes\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const { bondId, clientId } = req.query;\n      const payments = await storage.getPayments({\n        bondId: bondId as string,\n        clientId: clientId as string,\n      });\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create payment\" });\n    }\n  });\n\n  // Financial routes\n  app.get(\"/api/financial/summary\", async (req, res) => {\n    try {\n      const summary = await storage.getFinancialSummary();\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch financial summary\" });\n    }\n  });\n\n  // Activity routes\n  app.get(\"/api/activities\", async (req, res) => {\n    try {\n      const { resourceId, resourceType, limit } = req.query;\n      const activities = await storage.getActivities({\n        resourceId: resourceId as string,\n        resourceType: resourceType as string,\n        limit: limit ? parseInt(limit as string) : 50,\n      });\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch activities\" });\n    }\n  });\n\n  // Document routes\n  app.get(\"/api/documents\", async (req, res) => {\n    try {\n      const { category, relatedId, relatedType } = req.query;\n      const documents = await storage.getDocuments({\n        category: category as string,\n        relatedId: relatedId as string,\n        relatedType: relatedType as string,\n      });\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/documents/upload\", upload.array('files'), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      \n      if (!files || files.length === 0) {\n        return res.status(400).json({ error: \"No files uploaded\" });\n      }\n\n      const { category, relatedType, relatedId, notes } = req.body;\n      \n      if (!category) {\n        return res.status(400).json({ error: \"Category is required\" });\n      }\n\n      // For now, use a default user ID since auth isn't implemented yet\n      const defaultUserId = \"system-user\";\n      \n      // Create document records for each uploaded file\n      const createdDocuments = [];\n      \n      for (const file of files) {\n        const documentData = {\n          filename: file.filename,\n          originalName: file.originalname,\n          fileSize: file.size,\n          mimeType: file.mimetype,\n          category,\n          relatedId: relatedId || undefined,\n          relatedType: relatedType || undefined,\n          uploadedBy: defaultUserId,\n          notes: notes || undefined,\n        };\n\n        // Validate the document data against the insert schema\n        const validatedData = insertDocumentSchema.parse(documentData);\n        \n        const document = await storage.createDocument(validatedData);\n        createdDocuments.push(document);\n      }\n\n      res.status(201).json({ \n        message: `Successfully uploaded ${createdDocuments.length} document(s)`,\n        documents: createdDocuments \n      });\n      \n    } catch (error) {\n      // Clean up uploaded files if document creation fails\n      const files = req.files as Express.Multer.File[];\n      if (files) {\n        for (const file of files) {\n          try {\n            await fs.unlink(file.path);\n          } catch (unlinkError) {\n            console.error(`Failed to clean up file ${file.filename}:`, unlinkError);\n          }\n        }\n      }\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      \n      if (error instanceof multer.MulterError) {\n        let message = \"File upload error\";\n        if (error.code === 'LIMIT_FILE_SIZE') {\n          message = \"File too large. Maximum size is 10MB per file.\";\n        } else if (error.code === 'LIMIT_FILE_COUNT') {\n          message = \"Too many files. Maximum is 10 files per upload.\";\n        }\n        return res.status(400).json({ error: message });\n      }\n      \n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to upload documents\" \n      });\n    }\n  });\n\n  // CONTRACT MANAGEMENT ROUTES\n  \n  // Contract Template routes\n  app.get(\"/api/contract-templates\", async (req, res) => {\n    try {\n      const { type, isActive } = req.query;\n      const templates = await storage.getContractTemplates({\n        type: type as string,\n        isActive: isActive ? isActive === 'true' : undefined,\n      });\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch contract templates\" });\n    }\n  });\n\n  app.get(\"/api/contract-templates/:id\", async (req, res) => {\n    try {\n      const template = await storage.getContractTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ error: \"Contract template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch contract template\" });\n    }\n  });\n\n  app.post(\"/api/contract-templates\", async (req, res) => {\n    try {\n      const validatedData = insertContractTemplateSchema.parse(req.body);\n      const template = await storage.createContractTemplate(validatedData);\n      res.status(201).json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create contract template\" });\n    }\n  });\n\n  app.patch(\"/api/contract-templates/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertContractTemplateSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const template = await storage.updateContractTemplate(req.params.id, validatedData);\n      res.json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update contract template\" });\n    }\n  });\n\n  app.delete(\"/api/contract-templates/:id\", async (req, res) => {\n    try {\n      await storage.deleteContractTemplate(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete contract template\" });\n    }\n  });\n\n  // Generated Contract routes\n  app.get(\"/api/generated-contracts\", async (req, res) => {\n    try {\n      const { clientId, templateId, status } = req.query;\n      const contracts = await storage.getGeneratedContracts({\n        clientId: clientId as string,\n        templateId: templateId as string,\n        status: status as string,\n      });\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch generated contracts\" });\n    }\n  });\n\n  app.get(\"/api/generated-contracts/:id\", async (req, res) => {\n    try {\n      const contract = await storage.getGeneratedContract(req.params.id);\n      if (!contract) {\n        return res.status(404).json({ error: \"Generated contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch generated contract\" });\n    }\n  });\n\n  app.post(\"/api/generated-contracts\", async (req, res) => {\n    try {\n      const validatedData = insertGeneratedContractSchema.parse(req.body);\n      const contract = await storage.createGeneratedContract(validatedData);\n      res.status(201).json(contract);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create generated contract\" });\n    }\n  });\n\n  app.patch(\"/api/generated-contracts/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertGeneratedContractSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const contract = await storage.updateGeneratedContract(req.params.id, validatedData);\n      res.json(contract);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update generated contract\" });\n    }\n  });\n\n  app.delete(\"/api/generated-contracts/:id\", async (req, res) => {\n    try {\n      await storage.deleteGeneratedContract(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete generated contract\" });\n    }\n  });\n\n  // Contract generation endpoint\n  app.post(\"/api/contracts/generate\", async (req, res) => {\n    try {\n      const { templateId, clientId, caseId, bondId, variables } = req.body;\n      \n      if (!templateId || !clientId) {\n        return res.status(400).json({ error: \"Template ID and Client ID are required\" });\n      }\n\n      // Get template and client data\n      const template = await storage.getContractTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ error: \"Contract template not found\" });\n      }\n\n      const client = await storage.getClient(clientId);\n      if (!client) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n\n      // Whitelist allowed template variables for security\n      const allowedVariables = [\n        'CLIENT_NAME', 'CLIENT_EMAIL', 'CLIENT_PHONE', 'CLIENT_ADDRESS',\n        'BOND_AMOUNT', 'COURT_DATE', 'CASE_NUMBER', 'PREMIUM_RATE',\n        'COLLATERAL_DESCRIPTION', 'AGENT_NAME', 'COMPANY_NAME', 'DATE_GENERATED'\n      ];\n\n      // Replace variables in template content (no escaping here to avoid double-encoding)\n      let content = template.content;\n      const replacementVariables = variables || {};\n\n      // Add client data to variables (unescaped - escaping happens at download)\n      replacementVariables.CLIENT_NAME = client.firstName + ' ' + client.lastName;\n      replacementVariables.CLIENT_EMAIL = client.email || '';\n      replacementVariables.CLIENT_PHONE = client.phone || '';\n      replacementVariables.CLIENT_ADDRESS = client.address || '';\n      replacementVariables.DATE_GENERATED = new Date().toLocaleDateString();\n\n      // Only process whitelisted variables (unescaped to preserve formatting)\n      for (const [key, value] of Object.entries(replacementVariables)) {\n        if (allowedVariables.includes(key)) {\n          const regex = new RegExp(`{{${key}}}`, 'g');\n          content = content.replace(regex, String(value));\n        }\n      }\n\n      // Create generated contract\n      const contractData = {\n        templateId,\n        clientId,\n        caseId: caseId || null,\n        bondId: bondId || null,\n        content,\n        variables: replacementVariables,\n        status: 'draft' as const,\n        generatedBy: 'system-user', // Replace with actual user ID when auth is implemented\n      };\n\n      const validatedData = insertGeneratedContractSchema.parse(contractData);\n      const contract = await storage.createGeneratedContract(validatedData);\n\n      res.status(201).json(contract);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to generate contract\" });\n    }\n  });\n\n  // Contract download endpoint\n  app.get(\"/api/contracts/:id/download\", async (req, res) => {\n    try {\n      const contract = await storage.getGeneratedContract(req.params.id);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Basic HTML sanitization - allow safe formatting tags while preventing XSS\n      const sanitizeHtml = (html: string) => {\n        // Remove script tags and event handlers completely\n        let sanitized = html\n          .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n          .replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n          .replace(/javascript:/gi, '')\n          .replace(/<iframe[^>]*>[\\s\\S]*?<\\/iframe>/gi, '')\n          .replace(/<object[^>]*>[\\s\\S]*?<\\/object>/gi, '')\n          .replace(/<embed[^>]*>/gi, '');\n        \n        // Allow safe formatting tags while escaping dangerous content\n        const safeTags = ['p', 'br', 'strong', 'b', 'em', 'i', 'u', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'div', 'span'];\n        \n        // Preserve line breaks and basic structure\n        return sanitized;\n      };\n\n      const sanitizedContent = sanitizeHtml(contract.content);\n      const escapedId = contract.id.replace(/[<>\"'&]/g, '');\n      const escapedStatus = contract.status.replace(/[<>\"'&]/g, '');\n\n      // Set proper headers with CSP for security\n      res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"contract_${contract.id}.html\"`);\n      res.setHeader('Content-Security-Policy', \"default-src 'none'; style-src 'unsafe-inline'; img-src data:; font-src 'self'\");\n      \n      res.send(`<!DOCTYPE html>\n<html>\n<head>\n  <title>Contract ${escapedId}</title>\n  <meta charset=\"utf-8\">\n  <style>\n    body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }\n    .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }\n    .content { background: #f9f9f9; padding: 20px; border-radius: 4px; line-height: 1.8; }\n    .content p { margin: 10px 0; }\n    .content h1, .content h2, .content h3 { color: #333; margin: 20px 0 10px 0; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>Contract Document</h1>\n    <p>Generated on: ${new Date(contract.createdAt).toLocaleDateString()}</p>\n    <p>Status: ${escapedStatus}</p>\n  </div>\n  <div class=\"content\">${sanitizedContent}</div>\n</body>\n</html>`);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to download contract\" });\n    }\n  });\n\n  // TRAINING SYSTEM ROUTES\n  \n  // Training Module routes\n  app.get(\"/api/training-modules\", async (req, res) => {\n    try {\n      const { category, isRequired } = req.query;\n      const modules = await storage.getTrainingModules({\n        category: category as string,\n        isRequired: isRequired ? isRequired === 'true' : undefined,\n      });\n      res.json(modules);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch training modules\" });\n    }\n  });\n\n  app.get(\"/api/training-modules/:id\", async (req, res) => {\n    try {\n      const module = await storage.getTrainingModule(req.params.id);\n      if (!module) {\n        return res.status(404).json({ error: \"Training module not found\" });\n      }\n      res.json(module);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch training module\" });\n    }\n  });\n\n  app.post(\"/api/training-modules\", async (req, res) => {\n    try {\n      const validatedData = insertTrainingModuleSchema.parse(req.body);\n      const module = await storage.createTrainingModule(validatedData);\n      res.status(201).json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create training module\" });\n    }\n  });\n\n  app.patch(\"/api/training-modules/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertTrainingModuleSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const module = await storage.updateTrainingModule(req.params.id, validatedData);\n      res.json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update training module\" });\n    }\n  });\n\n  app.delete(\"/api/training-modules/:id\", async (req, res) => {\n    try {\n      await storage.deleteTrainingModule(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete training module\" });\n    }\n  });\n\n  // Training Progress routes\n  app.get(\"/api/training-progress\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID is required\" });\n      }\n      const progress = await storage.getUserTrainingProgress(userId as string);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch training progress\" });\n    }\n  });\n\n  app.get(\"/api/training-progress/:userId/:moduleId\", async (req, res) => {\n    try {\n      const { userId, moduleId } = req.params;\n      const progress = await storage.getTrainingProgress(userId, moduleId);\n      if (!progress) {\n        return res.status(404).json({ error: \"Training progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch training progress\" });\n    }\n  });\n\n  app.post(\"/api/training-progress\", async (req, res) => {\n    try {\n      const validatedData = insertTrainingProgressSchema.parse(req.body);\n      const progress = await storage.createTrainingProgress(validatedData);\n      res.status(201).json(progress);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create training progress\" });\n    }\n  });\n\n  app.patch(\"/api/training-progress/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertTrainingProgressSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const progress = await storage.updateTrainingProgress(req.params.id, validatedData);\n      res.json(progress);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update training progress\" });\n    }\n  });\n\n  // Training start endpoint\n  app.post(\"/api/training/start\", async (req, res) => {\n    try {\n      const { userId, moduleId } = req.body;\n      \n      if (!userId || !moduleId) {\n        return res.status(400).json({ error: \"User ID and Module ID are required\" });\n      }\n\n      // Check if module exists\n      const module = await storage.getTrainingModule(moduleId);\n      if (!module) {\n        return res.status(404).json({ error: \"Training module not found\" });\n      }\n\n      // Create or update progress\n      const progressData = {\n        userId,\n        moduleId,\n        progress: 0,\n        isCompleted: false,\n        currentSection: 0,\n        timeSpent: 0,\n      };\n\n      const validatedData = insertTrainingProgressSchema.parse(progressData);\n      const progress = await storage.createTrainingProgress(validatedData);\n\n      res.status(201).json(progress);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to start training\" });\n    }\n  });\n\n  // Standard Operating Procedures routes\n  app.get(\"/api/sops\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const sops = await storage.getSOPs({\n        category: category as string,\n      });\n      res.json(sops);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch SOPs\" });\n    }\n  });\n\n  app.get(\"/api/sops/:id\", async (req, res) => {\n    try {\n      const sop = await storage.getSOP(req.params.id);\n      if (!sop) {\n        return res.status(404).json({ error: \"SOP not found\" });\n      }\n      res.json(sop);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch SOP\" });\n    }\n  });\n\n  app.post(\"/api/sops\", async (req, res) => {\n    try {\n      const validatedData = insertSOPSchema.parse(req.body);\n      const sop = await storage.createSOP(validatedData);\n      res.status(201).json(sop);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create SOP\" });\n    }\n  });\n\n  app.patch(\"/api/sops/:id\", async (req, res) => {\n    try {\n      const partialSchema = insertSOPSchema.partial();\n      const validatedData = partialSchema.parse(req.body);\n      const sop = await storage.updateSOP(req.params.id, validatedData);\n      res.json(sop);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation error\", details: error.errors });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update SOP\" });\n    }\n  });\n\n  app.delete(\"/api/sops/:id\", async (req, res) => {\n    try {\n      await storage.deleteSOP(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete SOP\" });\n    }\n  });\n\n  // AI-powered routes\n  \n  // Intelligent search across all data\n  app.post(\"/api/ai/search\", async (req, res) => {\n    try {\n      const { query, language = 'en' } = req.body;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n\n      // Gather all data for search\n      const [clients, cases, bonds, payments, documents] = await Promise.all([\n        storage.getClients(),\n        storage.getCases(),\n        storage.getBonds(),\n        storage.getPayments(),\n        storage.getDocuments()\n      ]);\n\n      const results = await aiService.intelligentSearch(query, {\n        clients,\n        cases,\n        bonds,\n        payments,\n        documents\n      }, language);\n\n      res.json({ results });\n    } catch (error) {\n      console.error('AI search error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Search failed\" \n      });\n    }\n  });\n\n  // Text translation\n  app.post(\"/api/ai/translate\", async (req, res) => {\n    try {\n      const { text, fromLanguage, toLanguage } = req.body;\n      \n      if (!text || !fromLanguage || !toLanguage) {\n        return res.status(400).json({ \n          error: \"Text, fromLanguage, and toLanguage are required\" \n        });\n      }\n\n      const translation = await aiService.translateText({\n        text,\n        fromLanguage,\n        toLanguage\n      });\n\n      res.json({ translation });\n    } catch (error) {\n      console.error('Translation error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Translation failed\" \n      });\n    }\n  });\n\n  // Photo verification for check-ins\n  app.post(\"/api/ai/verify-photo\", async (req, res) => {\n    try {\n      const { imageData } = req.body;\n      \n      if (!imageData) {\n        return res.status(400).json({ error: \"Image data is required\" });\n      }\n\n      // Remove data:image/jpeg;base64, prefix if present\n      const base64Image = imageData.replace(/^data:image\\/[a-z]+;base64,/, '');\n      \n      const verification = await aiService.verifyCheckinPhoto(base64Image);\n      res.json(verification);\n    } catch (error) {\n      console.error('Photo verification error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Photo verification failed\" \n      });\n    }\n  });\n\n  // AI help and guidance\n  app.post(\"/api/ai/help\", async (req, res) => {\n    try {\n      const { question, language = 'en' } = req.body;\n      \n      if (!question || typeof question !== 'string') {\n        return res.status(400).json({ error: \"Question is required\" });\n      }\n\n      const response = await aiService.generateHelp(question, language);\n      res.json({ response });\n    } catch (error) {\n      console.error('AI help error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Help generation failed\" \n      });\n    }\n  });\n\n  // Case compliance analysis\n  app.post(\"/api/ai/analyze-compliance\", async (req, res) => {\n    try {\n      const { caseId } = req.body;\n      \n      if (!caseId) {\n        return res.status(400).json({ error: \"Case ID is required\" });\n      }\n\n      const caseData = await storage.getCase(caseId);\n      if (!caseData) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n\n      // Get check-in history (placeholder - would need to implement check-ins)\n      const checkins: any[] = [];\n      \n      const analysis = await aiService.analyzeCaseCompliance(caseData, checkins);\n      res.json(analysis);\n    } catch (error) {\n      console.error('Compliance analysis error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Compliance analysis failed\" \n      });\n    }\n  });\n\n  // CLIENT PORTAL API ROUTES\n  \n  // Client Portal Authentication\n  app.post(\"/api/client/login\", loginLimiter, async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password are required\" });\n      }\n\n      const client = await storage.authenticateClient(username, password);\n      \n      if (!client) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Update last check-in time\n      await storage.updateClientLastCheckin(client.id);\n\n      // Generate secure JWT token with proper secret validation\n      const JWT_SECRET = process.env.SESSION_SECRET;\n      if (!JWT_SECRET || JWT_SECRET === 'fallback-secret-for-dev') {\n        throw new Error('SESSION_SECRET environment variable must be set for production security');\n      }\n      \n      const token = jwt.sign(\n        { \n          clientId: client.id,\n          portalEnabled: client.portalEnabled,\n          iss: 'bailbond-pro',\n          aud: 'client-portal'\n        },\n        JWT_SECRET,\n        { \n          algorithm: 'HS256',\n          expiresIn: '24h'\n        }\n      );\n\n      // Return client data without password and include secure JWT token\n      const { portalPassword, ...clientData } = client;\n      res.json({ \n        success: true, \n        client: clientData,\n        token: token,\n        message: \"Login successful\" \n      });\n    } catch (error) {\n      console.error('Client login error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Login failed\" \n      });\n    }\n  });\n\n  // Enable portal access for a client (admin use)\n  app.post(\"/api/client/:clientId/enable-portal\", async (req, res) => {\n    try {\n      const { clientId } = req.params;\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password are required\" });\n      }\n\n      const updatedClient = await storage.enableClientPortal(clientId, username, password);\n      const { portalPassword, ...clientData } = updatedClient;\n      \n      res.json({ \n        success: true, \n        client: clientData,\n        message: \"Portal access enabled successfully\" \n      });\n    } catch (error) {\n      console.error('Portal enable error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to enable portal access\" \n      });\n    }\n  });\n\n  // Client authentication middleware with JWT verification\n  const authenticateClient = async (req: any, res: any, next: any) => {\n    try {\n      const { clientId } = req.params;\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n      \n      const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n      \n      // Verify JWT token with algorithm specification\n      const JWT_SECRET = process.env.SESSION_SECRET;\n      if (!JWT_SECRET) {\n        return res.status(500).json({ error: \"Server configuration error\" });\n      }\n      \n      let decoded: any;\n      try {\n        decoded = jwt.verify(token, JWT_SECRET, {\n          algorithms: ['HS256'],\n          issuer: 'bailbond-pro',\n          audience: 'client-portal'\n        });\n      } catch (jwtError) {\n        return res.status(401).json({ error: \"Invalid or expired token\" });\n      }\n      \n      // Verify client ID matches token and client is authorized\n      if (decoded.clientId !== clientId || !decoded.portalEnabled) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      // Get client data for additional verification\n      const client = await storage.getClient(decoded.clientId);\n      if (!client || !client.portalEnabled) {\n        return res.status(403).json({ error: \"Client not found or portal disabled\" });\n      }\n      \n      req.authenticatedClient = client;\n      next();\n    } catch (error) {\n      console.error('Authentication error:', error);\n      return res.status(401).json({ error: \"Authentication failed\" });\n    }\n  };\n\n  // Client Dashboard Data\n  app.get(\"/api/client/:clientId/dashboard\", authenticateClient, async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      \n      const [client, bonds, cases, upcomingCourtDates, recentCheckins] = await Promise.all([\n        storage.getClient(clientId),\n        storage.getClientBonds(clientId),\n        storage.getClientCases(clientId),\n        storage.getClientUpcomingCourtDates(clientId),\n        storage.getClientCheckins({ clientId })\n      ]);\n\n      if (!client) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n\n      res.json({\n        client: {\n          id: client.id,\n          firstName: client.firstName,\n          lastName: client.lastName,\n          phone: client.phone,\n          email: client.email,\n          status: client.status,\n          lastCheckin: client.lastCheckin\n        },\n        bonds,\n        cases,\n        upcomingCourtDates,\n        recentCheckins: recentCheckins.slice(0, 5) // Last 5 check-ins\n      });\n    } catch (error) {\n      console.error('Client dashboard error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch dashboard data\" \n      });\n    }\n  });\n\n  // Client Photo Check-in\n  app.post(\"/api/client/:clientId/checkin\", authenticateClient, photoUpload.single('photo'), async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      const { bondId, latitude, longitude, locationName, notes } = req.body;\n      \n      if (!bondId) {\n        return res.status(400).json({ error: \"Bond ID is required\" });\n      }\n\n      // Verify bond belongs to authenticated client\n      const bond = await storage.getBond(bondId);\n      if (!bond) {\n        return res.status(404).json({ error: \"Bond not found\" });\n      }\n\n      // Get case associated with bond and verify ownership\n      const bondCase = await storage.getCase(bond.caseId);\n      if (!bondCase || bondCase.clientId !== clientId) {\n        return res.status(403).json({ error: \"Access denied - bond does not belong to client\" });\n      }\n\n      let photoUrl = null;\n      if (req.file) {\n        photoUrl = `/uploads/${req.file.filename}`;\n      }\n\n      const checkinData = {\n        clientId,\n        bondId,\n        photoUrl,\n        latitude: latitude ? String(latitude) : null,\n        longitude: longitude ? String(longitude) : null,\n        locationName: locationName || null,\n        notes: notes || null,\n        status: 'completed' as const\n      };\n\n      const newCheckin = await storage.createClientCheckin(checkinData);\n      \n      // Update client's last check-in time\n      await storage.updateClientLastCheckin(clientId);\n\n      res.json({ \n        success: true, \n        checkin: newCheckin,\n        message: \"Check-in completed successfully\" \n      });\n    } catch (error) {\n      console.error('Client check-in error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Check-in failed\" \n      });\n    }\n  });\n\n  // Get client check-in history\n  app.get(\"/api/client/:clientId/checkins\", authenticateClient, async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      const { bondId } = req.query;\n      \n      const filter: any = { clientId };\n      if (bondId) {\n        filter.bondId = bondId as string;\n      }\n\n      const checkins = await storage.getClientCheckins(filter);\n      res.json(checkins);\n    } catch (error) {\n      console.error('Client checkins fetch error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch check-ins\" \n      });\n    }\n  });\n\n  // Get client bonds\n  app.get(\"/api/client/:clientId/bonds\", authenticateClient, async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      const bonds = await storage.getClientBonds(clientId);\n      res.json(bonds);\n    } catch (error) {\n      console.error('Client bonds fetch error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch bonds\" \n      });\n    }\n  });\n\n  // Get client cases\n  app.get(\"/api/client/:clientId/cases\", authenticateClient, async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      const cases = await storage.getClientCases(clientId);\n      res.json(cases);\n    } catch (error) {\n      console.error('Client cases fetch error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch cases\" \n      });\n    }\n  });\n\n  // Get client court dates\n  app.get(\"/api/client/:clientId/court-dates\", authenticateClient, async (req: any, res) => {\n    try {\n      const { clientId } = req.params;\n      const courtDates = await storage.getClientUpcomingCourtDates(clientId);\n      res.json(courtDates);\n    } catch (error) {\n      console.error('Client court dates fetch error:', error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch court dates\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":50066},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Client, type InsertClient,\n  type Case, type InsertCase,\n  type Bond, type InsertBond,\n  type Payment, type InsertPayment,\n  type Document, type InsertDocument,\n  type Activity, type InsertActivity,\n  type ClientCheckin, type InsertClientCheckin,\n  type ContractTemplate, type InsertContractTemplate,\n  type GeneratedContract, type InsertGeneratedContract,\n  type TrainingModule, type InsertTrainingModule,\n  type TrainingProgress, type InsertTrainingProgress,\n  type StandardOperatingProcedure, type InsertSOP,\n  users, clients, cases, bonds, payments, documents, activities, clientCheckins,\n  contractTemplates, generatedContracts, trainingModules, trainingProgress, standardOperatingProcedures\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, and, or, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUsers(filter?: { role?: string; isActive?: boolean }): Promise<User[]>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Clients\n  getClient(id: string): Promise<Client | undefined>;\n  getClients(filter?: { status?: string; search?: string }): Promise<Client[]>;\n  getClientsWithBonds(): Promise<any[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<Client>): Promise<Client>;\n  deleteClient(id: string): Promise<boolean>;\n\n  // Cases\n  getCase(id: string): Promise<Case | undefined>;\n  getCases(filter?: { clientId?: string; status?: string }): Promise<Case[]>;\n  createCase(case_: InsertCase): Promise<Case>;\n  updateCase(id: string, case_: Partial<Case>): Promise<Case>;\n  deleteCase(id: string): Promise<boolean>;\n\n  // Bonds\n  getBond(id: string): Promise<Bond | undefined>;\n  getBonds(filter?: { clientId?: string; status?: string }): Promise<Bond[]>;\n  getBondsWithDetails(): Promise<any[]>;\n  createBond(bond: InsertBond): Promise<Bond>;\n  updateBond(id: string, bond: Partial<Bond>): Promise<Bond>;\n  deleteBond(id: string): Promise<boolean>;\n\n  // Payments\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPayments(filter?: { bondId?: string; clientId?: string }): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<Payment>): Promise<Payment>;\n  deletePayment(id: string): Promise<boolean>;\n\n  // Documents\n  getDocument(id: string): Promise<Document | undefined>;\n  getDocuments(filter?: { category?: string; relatedId?: string; relatedType?: string }): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<Document>): Promise<Document>;\n  deleteDocument(id: string): Promise<boolean>;\n\n  // Activities\n  getActivities(filter?: { resourceId?: string; resourceType?: string; limit?: number }): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Dashboard & Analytics\n  getDashboardStats(): Promise<any>;\n  getRecentActivity(limit?: number): Promise<any[]>;\n  getUpcomingCourtDates(limit?: number): Promise<any[]>;\n  getFinancialSummary(): Promise<any>;\n\n  // Client Portal Authentication\n  getClientByPortalUsername(username: string): Promise<Client | undefined>;\n  enableClientPortal(clientId: string, username: string, password: string): Promise<Client>;\n  authenticateClient(username: string, password: string): Promise<Client | null>;\n  updateClientLastCheckin(clientId: string): Promise<Client>;\n\n  // Client Check-ins\n  getClientCheckin(id: string): Promise<ClientCheckin | undefined>;\n  getClientCheckins(filter?: { clientId?: string; bondId?: string }): Promise<ClientCheckin[]>;\n  createClientCheckin(checkin: InsertClientCheckin): Promise<ClientCheckin>;\n  updateClientCheckin(id: string, checkin: Partial<ClientCheckin>): Promise<ClientCheckin>;\n\n  // Client Portal Data\n  getClientBonds(clientId: string): Promise<Bond[]>;\n  getClientCases(clientId: string): Promise<Case[]>;\n  getClientUpcomingCourtDates(clientId: string): Promise<any[]>;\n\n  // Contract Templates\n  getContractTemplate(id: string): Promise<ContractTemplate | undefined>;\n  getContractTemplates(filter?: { type?: string; isActive?: boolean }): Promise<ContractTemplate[]>;\n  createContractTemplate(template: InsertContractTemplate): Promise<ContractTemplate>;\n  updateContractTemplate(id: string, template: Partial<ContractTemplate>): Promise<ContractTemplate>;\n  deleteContractTemplate(id: string): Promise<boolean>;\n\n  // Generated Contracts\n  getGeneratedContract(id: string): Promise<GeneratedContract | undefined>;\n  getGeneratedContracts(filter?: { clientId?: string; templateId?: string; status?: string }): Promise<GeneratedContract[]>;\n  createGeneratedContract(contract: InsertGeneratedContract): Promise<GeneratedContract>;\n  updateGeneratedContract(id: string, contract: Partial<GeneratedContract>): Promise<GeneratedContract>;\n  deleteGeneratedContract(id: string): Promise<boolean>;\n\n  // Training Modules\n  getTrainingModule(id: string): Promise<TrainingModule | undefined>;\n  getTrainingModules(filter?: { category?: string; isActive?: boolean; isRequired?: boolean }): Promise<TrainingModule[]>;\n  createTrainingModule(module: InsertTrainingModule): Promise<TrainingModule>;\n  updateTrainingModule(id: string, module: Partial<TrainingModule>): Promise<TrainingModule>;\n  deleteTrainingModule(id: string): Promise<boolean>;\n\n  // Training Progress\n  getTrainingProgress(userId: string, moduleId: string): Promise<TrainingProgress | undefined>;\n  getUserTrainingProgress(userId: string): Promise<TrainingProgress[]>;\n  createTrainingProgress(progress: InsertTrainingProgress): Promise<TrainingProgress>;\n  updateTrainingProgress(id: string, progress: Partial<TrainingProgress>): Promise<TrainingProgress>;\n\n  // Standard Operating Procedures\n  getSOP(id: string): Promise<StandardOperatingProcedure | undefined>;\n  getSOPs(filter?: { category?: string; isActive?: boolean }): Promise<StandardOperatingProcedure[]>;\n  createSOP(sop: InsertSOP): Promise<StandardOperatingProcedure>;\n  updateSOP(id: string, sop: Partial<StandardOperatingProcedure>): Promise<StandardOperatingProcedure>;\n  deleteSOP(id: string): Promise<boolean>;\n}\n\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUsers(filter?: { role?: string; isActive?: boolean }): Promise<User[]> {\n    const conditions = [];\n    if (filter?.role) {\n      conditions.push(eq(users.role, filter.role));\n    }\n    if (filter?.isActive !== undefined) {\n      conditions.push(eq(users.isActive, filter.isActive));\n    }\n    \n    if (conditions.length > 0) {\n      return await db.select().from(users).where(and(...conditions)).orderBy(users.createdAt);\n    }\n    return await db.select().from(users).orderBy(users.createdAt);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<User>): Promise<User> {\n    const [updated] = await db.update(users).set(user).where(eq(users.id, id)).returning();\n    if (!updated) throw new Error(\"User not found\");\n    return updated;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Clients\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async getClients(filter?: { status?: string; search?: string }): Promise<Client[]> {\n    const conditions = [];\n    if (filter?.status) {\n      conditions.push(eq(clients.status, filter.status));\n    }\n    \n    if (filter?.search) {\n      const searchTerm = `%${filter.search}%`;\n      conditions.push(\n        or(\n          like(clients.firstName, searchTerm),\n          like(clients.lastName, searchTerm),\n          like(clients.phone, searchTerm),\n          like(clients.email, searchTerm)\n        )\n      );\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(clients).where(and(...conditions)).orderBy(desc(clients.createdAt));\n    }\n    \n    return db.select().from(clients).orderBy(desc(clients.createdAt));\n  }\n\n  async getClientsWithBonds(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: clients.id,\n        firstName: clients.firstName,\n        lastName: clients.lastName,\n        dateOfBirth: clients.dateOfBirth,\n        phone: clients.phone,\n        email: clients.email,\n        address: clients.address,\n        city: clients.city,\n        state: clients.state,\n        zipCode: clients.zipCode,\n        emergencyContact: clients.emergencyContact,\n        emergencyPhone: clients.emergencyPhone,\n        status: clients.status,\n        notes: clients.notes,\n        createdAt: clients.createdAt,\n        updatedAt: clients.updatedAt,\n        totalBonds: sql<number>`count(${bonds.id})`\n      })\n      .from(clients)\n      .leftJoin(bonds, eq(clients.id, bonds.clientId))\n      .groupBy(clients.id)\n      .orderBy(desc(clients.createdAt));\n    \n    return result.map(row => ({\n      ...row,\n      total_bonds: row.totalBonds,\n      last_bond_date: null // Will enhance later\n    }));\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const [newClient] = await db.insert(clients).values(client).returning();\n    return newClient;\n  }\n\n  async updateClient(id: string, client: Partial<Client>): Promise<Client> {\n    const [updated] = await db.update(clients).set(client).where(eq(clients.id, id)).returning();\n    if (!updated) throw new Error(\"Client not found\");\n    return updated;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    const result = await db.delete(clients).where(eq(clients.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Cases\n  async getCase(id: string): Promise<Case | undefined> {\n    const [case_] = await db.select().from(cases).where(eq(cases.id, id));\n    return case_ || undefined;\n  }\n\n  async getCases(filter?: { clientId?: string; status?: string }): Promise<Case[]> {\n    const conditions = [];\n    if (filter?.clientId) {\n      conditions.push(eq(cases.clientId, filter.clientId));\n    }\n    if (filter?.status) {\n      conditions.push(eq(cases.status, filter.status));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(cases).where(and(...conditions)).orderBy(desc(cases.createdAt));\n    }\n    \n    return db.select().from(cases).orderBy(desc(cases.createdAt));\n  }\n\n  async createCase(case_: InsertCase): Promise<Case> {\n    const [newCase] = await db.insert(cases).values(case_).returning();\n    return newCase;\n  }\n\n  async updateCase(id: string, case_: Partial<Case>): Promise<Case> {\n    const [updated] = await db.update(cases).set(case_).where(eq(cases.id, id)).returning();\n    if (!updated) throw new Error(\"Case not found\");\n    return updated;\n  }\n\n  async deleteCase(id: string): Promise<boolean> {\n    const result = await db.delete(cases).where(eq(cases.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Bonds\n  async getBond(id: string): Promise<Bond | undefined> {\n    const [bond] = await db.select().from(bonds).where(eq(bonds.id, id));\n    return bond || undefined;\n  }\n\n  async getBonds(filter?: { clientId?: string; status?: string }): Promise<Bond[]> {\n    const conditions = [];\n    if (filter?.clientId) {\n      conditions.push(eq(bonds.clientId, filter.clientId));\n    }\n    if (filter?.status) {\n      conditions.push(eq(bonds.status, filter.status));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(bonds).where(and(...conditions)).orderBy(desc(bonds.createdAt));\n    }\n    \n    return db.select().from(bonds).orderBy(desc(bonds.createdAt));\n  }\n\n  async getBondsWithDetails(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: bonds.id,\n        bondNumber: bonds.bondNumber,\n        clientId: bonds.clientId,\n        caseId: bonds.caseId,\n        bondAmount: bonds.bondAmount,\n        premiumAmount: bonds.premiumAmount,\n        premiumRate: bonds.premiumRate,\n        collateralAmount: bonds.collateralAmount,\n        collateralDescription: bonds.collateralDescription,\n        status: bonds.status,\n        issueDate: bonds.issueDate,\n        exonerationDate: bonds.exonerationDate,\n        paymentStatus: bonds.paymentStatus,\n        agentId: bonds.agentId,\n        notes: bonds.notes,\n        createdAt: bonds.createdAt,\n        updatedAt: bonds.updatedAt,\n        clientName: sql<string>`CONCAT(${clients.firstName}, ' ', ${clients.lastName})`,\n        clientPhone: clients.phone,\n        courtDate: cases.courtDate,\n        agentName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`\n      })\n      .from(bonds)\n      .leftJoin(clients, eq(bonds.clientId, clients.id))\n      .leftJoin(cases, eq(bonds.caseId, cases.id))\n      .leftJoin(users, eq(bonds.agentId, users.id))\n      .orderBy(desc(bonds.createdAt));\n    \n    return result.map(row => ({\n      ...row,\n      client_name: row.clientName || \"Unknown\",\n      client_phone: row.clientPhone || \"\",\n      court_date: row.courtDate,\n      agent_name: row.agentName || \"Unknown\"\n    }));\n  }\n\n  async createBond(bond: InsertBond): Promise<Bond> {\n    const [newBond] = await db.insert(bonds).values(bond).returning();\n    \n    // Create activity record if agent is specified\n    if (bond.agentId) {\n      await this.createActivity({\n        userId: bond.agentId,\n        action: \"created\",\n        resourceType: \"bond\",\n        resourceId: newBond.id,\n        details: { bondNumber: newBond.bondNumber, clientId: newBond.clientId }\n      });\n    }\n    \n    return newBond;\n  }\n\n  async updateBond(id: string, bond: Partial<Bond>): Promise<Bond> {\n    const [updated] = await db.update(bonds).set(bond).where(eq(bonds.id, id)).returning();\n    if (!updated) throw new Error(\"Bond not found\");\n    return updated;\n  }\n\n  async deleteBond(id: string): Promise<boolean> {\n    const result = await db.delete(bonds).where(eq(bonds.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Payments\n  async getPayment(id: string): Promise<Payment | undefined> {\n    const [payment] = await db.select().from(payments).where(eq(payments.id, id));\n    return payment || undefined;\n  }\n\n  async getPayments(filter?: { bondId?: string; clientId?: string }): Promise<Payment[]> {\n    const conditions = [];\n    if (filter?.bondId) {\n      conditions.push(eq(payments.bondId, filter.bondId));\n    }\n    if (filter?.clientId) {\n      conditions.push(eq(payments.clientId, filter.clientId));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(payments).where(and(...conditions)).orderBy(desc(payments.createdAt));\n    }\n    \n    return db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, payment: Partial<Payment>): Promise<Payment> {\n    const [updated] = await db.update(payments).set(payment).where(eq(payments.id, id)).returning();\n    if (!updated) throw new Error(\"Payment not found\");\n    return updated;\n  }\n\n  async deletePayment(id: string): Promise<boolean> {\n    const result = await db.delete(payments).where(eq(payments.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Documents\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async getDocuments(filter?: { category?: string; relatedId?: string; relatedType?: string }): Promise<Document[]> {\n    const conditions = [];\n    if (filter?.category) {\n      conditions.push(eq(documents.category, filter.category));\n    }\n    if (filter?.relatedId) {\n      conditions.push(eq(documents.relatedId, filter.relatedId));\n    }\n    if (filter?.relatedType) {\n      conditions.push(eq(documents.relatedType, filter.relatedType));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(documents).where(and(...conditions)).orderBy(desc(documents.createdAt));\n    }\n    \n    return db.select().from(documents).orderBy(desc(documents.createdAt));\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [newDocument] = await db.insert(documents).values(document).returning();\n    return newDocument;\n  }\n\n  async updateDocument(id: string, document: Partial<Document>): Promise<Document> {\n    const [updated] = await db.update(documents).set(document).where(eq(documents.id, id)).returning();\n    if (!updated) throw new Error(\"Document not found\");\n    return updated;\n  }\n\n  async deleteDocument(id: string): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Activities\n  async getActivities(filter?: { resourceId?: string; resourceType?: string; limit?: number }): Promise<Activity[]> {\n    const conditions = [];\n    const limit = filter?.limit || 50;\n    \n    if (filter?.resourceId) {\n      conditions.push(eq(activities.resourceId, filter.resourceId));\n    }\n    if (filter?.resourceType) {\n      conditions.push(eq(activities.resourceType, filter.resourceType));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(activities).where(and(...conditions)).orderBy(desc(activities.createdAt)).limit(limit);\n    }\n    \n    return db.select().from(activities).orderBy(desc(activities.createdAt)).limit(limit);\n  }\n\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const [newActivity] = await db.insert(activities).values(activity).returning();\n    return newActivity;\n  }\n\n  // Dashboard & Analytics\n  async getDashboardStats(): Promise<any> {\n    const [activeBondsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bonds)\n      .where(eq(bonds.status, 'active'));\n    \n    // Total Revenue: Sum of premium amounts from all active bonds (money earned from writing bonds)\n    const [totalRevenueResult] = await db\n      .select({ total: sql<number>`coalesce(sum(${bonds.premiumAmount}), 0)` })\n      .from(bonds)\n      .where(eq(bonds.status, 'active'));\n    \n    // Pending Payments: Sum of premium amounts where payment status is pending/partial\n    const [pendingPaymentsResult] = await db\n      .select({ total: sql<number>`coalesce(sum(${bonds.premiumAmount}), 0)` })\n      .from(bonds)\n      .where(and(\n        eq(bonds.status, 'active'),\n        or(eq(bonds.paymentStatus, 'pending'), eq(bonds.paymentStatus, 'partial'))\n      ));\n    \n    const [upcomingCourtDatesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(cases)\n      .where(and(\n        eq(cases.status, 'open'),\n        sql`${cases.courtDate} IS NOT NULL AND ${cases.courtDate}::date >= current_date`\n      ));\n    \n    return {\n      activeBonds: activeBondsResult?.count || 0,\n      totalRevenue: Number(totalRevenueResult?.total || 0),\n      pendingPayments: Number(pendingPaymentsResult?.total || 0),\n      upcomingCourtDates: upcomingCourtDatesResult?.count || 0\n    };\n  }\n\n  async getRecentActivity(limit: number = 10): Promise<any[]> {\n    const result = await db\n      .select({\n        id: activities.id,\n        userId: activities.userId,\n        action: activities.action,\n        resourceType: activities.resourceType,\n        resourceId: activities.resourceId,\n        details: activities.details,\n        createdAt: activities.createdAt,\n        userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`\n      })\n      .from(activities)\n      .leftJoin(users, eq(activities.userId, users.id))\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n    \n    return result.map(row => ({\n      ...row,\n      user_name: row.userName || \"Unknown\"\n    }));\n  }\n\n  async getUpcomingCourtDates(limit: number = 10): Promise<any[]> {\n    const result = await db\n      .select({\n        id: cases.id,\n        caseNumber: cases.caseNumber,\n        clientId: cases.clientId,\n        charges: cases.charges,\n        arrestDate: cases.arrestDate,\n        courtDate: cases.courtDate,\n        courtLocation: cases.courtLocation,\n        judgeName: cases.judgeName,\n        prosecutorName: cases.prosecutorName,\n        defenseAttorney: cases.defenseAttorney,\n        status: cases.status,\n        notes: cases.notes,\n        createdAt: cases.createdAt,\n        updatedAt: cases.updatedAt,\n        clientName: sql<string>`CONCAT(${clients.firstName}, ' ', ${clients.lastName})`,\n        bondNumber: bonds.bondNumber\n      })\n      .from(cases)\n      .leftJoin(clients, eq(cases.clientId, clients.id))\n      .leftJoin(bonds, eq(cases.id, bonds.caseId))\n      .where(and(\n        eq(cases.status, 'open'),\n        sql`${cases.courtDate}::date >= current_date`\n      ))\n      .orderBy(sql`${cases.courtDate}::date`)\n      .limit(limit);\n    \n    return result.map(row => ({\n      ...row,\n      client_name: row.clientName || \"Unknown\",\n      bond_number: row.bondNumber\n    }));\n  }\n\n  async getFinancialSummary(): Promise<any> {\n    const [monthlyRevenueResult] = await db\n      .select({ total: sql<number>`coalesce(sum(${payments.amount}), 0)` })\n      .from(payments)\n      .where(and(\n        eq(payments.status, 'completed'),\n        sql`date_trunc('month', ${payments.createdAt}) = date_trunc('month', current_date)`\n      ));\n    \n    const [outstandingResult] = await db\n      .select({ total: sql<number>`coalesce(sum(${bonds.premiumAmount}), 0)` })\n      .from(bonds)\n      .where(eq(bonds.paymentStatus, 'pending'));\n    \n    const [totalPaymentsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(payments);\n    \n    const [completedPaymentsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(payments)\n      .where(eq(payments.status, 'completed'));\n    \n    const collectionRate = totalPaymentsResult?.count > 0 \n      ? (Number(completedPaymentsResult?.count || 0) / Number(totalPaymentsResult?.count || 1) * 100)\n      : 0;\n    \n    return {\n      monthlyRevenue: Number(monthlyRevenueResult?.total || 0),\n      outstanding: Number(outstandingResult?.total || 0),\n      collectionRate: Math.round(collectionRate * 10) / 10\n    };\n  }\n\n  // Client Portal Authentication\n  async getClientByPortalUsername(username: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.portalUsername, username));\n    return client || undefined;\n  }\n\n  async enableClientPortal(clientId: string, username: string, password: string): Promise<Client> {\n    // Hash password with bcrypt before storing\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n    \n    const [updatedClient] = await db\n      .update(clients)\n      .set({ \n        portalUsername: username, \n        portalPassword: hashedPassword, \n        portalEnabled: true \n      })\n      .where(eq(clients.id, clientId))\n      .returning();\n    if (!updatedClient) throw new Error(\"Client not found\");\n    return updatedClient;\n  }\n\n  async authenticateClient(username: string, password: string): Promise<Client | null> {\n    // Get client by username first\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(and(\n        eq(clients.portalUsername, username),\n        eq(clients.portalEnabled, true)\n      ));\n    \n    if (!client || !client.portalPassword) {\n      return null;\n    }\n    \n    // Use bcrypt to securely compare password\n    const isPasswordValid = await bcrypt.compare(password, client.portalPassword);\n    return isPasswordValid ? client : null;\n  }\n\n  async updateClientLastCheckin(clientId: string): Promise<Client> {\n    const [updatedClient] = await db\n      .update(clients)\n      .set({ lastCheckin: sql`now()` })\n      .where(eq(clients.id, clientId))\n      .returning();\n    if (!updatedClient) throw new Error(\"Client not found\");\n    return updatedClient;\n  }\n\n  // Client Check-ins\n  async getClientCheckin(id: string): Promise<ClientCheckin | undefined> {\n    const [checkin] = await db.select().from(clientCheckins).where(eq(clientCheckins.id, id));\n    return checkin || undefined;\n  }\n\n  async getClientCheckins(filter?: { clientId?: string; bondId?: string }): Promise<ClientCheckin[]> {\n    const conditions = [];\n    if (filter?.clientId) {\n      conditions.push(eq(clientCheckins.clientId, filter.clientId));\n    }\n    if (filter?.bondId) {\n      conditions.push(eq(clientCheckins.bondId, filter.bondId));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(clientCheckins).where(and(...conditions)).orderBy(desc(clientCheckins.createdAt));\n    }\n    \n    return db.select().from(clientCheckins).orderBy(desc(clientCheckins.createdAt));\n  }\n\n  async createClientCheckin(checkin: InsertClientCheckin): Promise<ClientCheckin> {\n    const [newCheckin] = await db.insert(clientCheckins).values(checkin).returning();\n    return newCheckin;\n  }\n\n  async updateClientCheckin(id: string, checkin: Partial<ClientCheckin>): Promise<ClientCheckin> {\n    const [updated] = await db.update(clientCheckins).set(checkin).where(eq(clientCheckins.id, id)).returning();\n    if (!updated) throw new Error(\"Check-in not found\");\n    return updated;\n  }\n\n  // Client Portal Data\n  async getClientBonds(clientId: string): Promise<Bond[]> {\n    return db.select().from(bonds).where(eq(bonds.clientId, clientId)).orderBy(desc(bonds.createdAt));\n  }\n\n  async getClientCases(clientId: string): Promise<Case[]> {\n    return db.select().from(cases).where(eq(cases.clientId, clientId)).orderBy(desc(cases.createdAt));\n  }\n\n  async getClientUpcomingCourtDates(clientId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: cases.id,\n        caseNumber: cases.caseNumber,\n        charges: cases.charges,\n        arrestDate: cases.arrestDate,\n        courtDate: cases.courtDate,\n        courtLocation: cases.courtLocation,\n        judgeName: cases.judgeName,\n        prosecutorName: cases.prosecutorName,\n        defenseAttorney: cases.defenseAttorney,\n        status: cases.status,\n        bondNumber: bonds.bondNumber,\n        bondAmount: bonds.bondAmount\n      })\n      .from(cases)\n      .leftJoin(bonds, eq(cases.id, bonds.caseId))\n      .where(and(\n        eq(cases.clientId, clientId),\n        eq(cases.status, 'open'),\n        sql`${cases.courtDate}::date >= current_date`\n      ))\n      .orderBy(sql`${cases.courtDate}::date`);\n    \n    return result.map(row => ({\n      ...row,\n      bond_number: row.bondNumber,\n      bond_amount: row.bondAmount\n    }));\n  }\n\n  // Contract Templates\n  async getContractTemplate(id: string): Promise<ContractTemplate | undefined> {\n    const [template] = await db.select().from(contractTemplates).where(eq(contractTemplates.id, id));\n    return template || undefined;\n  }\n\n  async getContractTemplates(filter?: { type?: string; isActive?: boolean }): Promise<ContractTemplate[]> {\n    const conditions = [];\n    if (filter?.type) {\n      conditions.push(eq(contractTemplates.type, filter.type));\n    }\n    if (filter?.isActive !== undefined) {\n      conditions.push(eq(contractTemplates.isActive, filter.isActive));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(contractTemplates).where(and(...conditions)).orderBy(desc(contractTemplates.createdAt));\n    }\n    \n    return db.select().from(contractTemplates).orderBy(desc(contractTemplates.createdAt));\n  }\n\n  async createContractTemplate(template: InsertContractTemplate): Promise<ContractTemplate> {\n    const [newTemplate] = await db.insert(contractTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async updateContractTemplate(id: string, template: Partial<ContractTemplate>): Promise<ContractTemplate> {\n    const [updated] = await db.update(contractTemplates).set(template).where(eq(contractTemplates.id, id)).returning();\n    if (!updated) throw new Error(\"Contract template not found\");\n    return updated;\n  }\n\n  async deleteContractTemplate(id: string): Promise<boolean> {\n    const result = await db.delete(contractTemplates).where(eq(contractTemplates.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Generated Contracts\n  async getGeneratedContract(id: string): Promise<GeneratedContract | undefined> {\n    const [contract] = await db.select().from(generatedContracts).where(eq(generatedContracts.id, id));\n    return contract || undefined;\n  }\n\n  async getGeneratedContracts(filter?: { clientId?: string; templateId?: string; status?: string }): Promise<GeneratedContract[]> {\n    const conditions = [];\n    if (filter?.clientId) {\n      conditions.push(eq(generatedContracts.clientId, filter.clientId));\n    }\n    if (filter?.templateId) {\n      conditions.push(eq(generatedContracts.templateId, filter.templateId));\n    }\n    if (filter?.status) {\n      conditions.push(eq(generatedContracts.status, filter.status));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(generatedContracts).where(and(...conditions)).orderBy(desc(generatedContracts.createdAt));\n    }\n    \n    return db.select().from(generatedContracts).orderBy(desc(generatedContracts.createdAt));\n  }\n\n  async createGeneratedContract(contract: InsertGeneratedContract): Promise<GeneratedContract> {\n    const [newContract] = await db.insert(generatedContracts).values(contract).returning();\n    return newContract;\n  }\n\n  async updateGeneratedContract(id: string, contract: Partial<GeneratedContract>): Promise<GeneratedContract> {\n    const [updated] = await db.update(generatedContracts).set(contract).where(eq(generatedContracts.id, id)).returning();\n    if (!updated) throw new Error(\"Generated contract not found\");\n    return updated;\n  }\n\n  async deleteGeneratedContract(id: string): Promise<boolean> {\n    const result = await db.delete(generatedContracts).where(eq(generatedContracts.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Training Modules\n  async getTrainingModule(id: string): Promise<TrainingModule | undefined> {\n    const [module] = await db.select().from(trainingModules).where(eq(trainingModules.id, id));\n    return module || undefined;\n  }\n\n  async getTrainingModules(filter?: { category?: string; isActive?: boolean; isRequired?: boolean }): Promise<TrainingModule[]> {\n    const conditions = [];\n    if (filter?.category) {\n      conditions.push(eq(trainingModules.category, filter.category));\n    }\n    if (filter?.isActive !== undefined) {\n      conditions.push(eq(trainingModules.isActive, filter.isActive));\n    }\n    if (filter?.isRequired !== undefined) {\n      conditions.push(eq(trainingModules.isRequired, filter.isRequired));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(trainingModules).where(and(...conditions)).orderBy(desc(trainingModules.createdAt));\n    }\n    \n    return db.select().from(trainingModules).orderBy(desc(trainingModules.createdAt));\n  }\n\n  async createTrainingModule(module: InsertTrainingModule): Promise<TrainingModule> {\n    const [newModule] = await db.insert(trainingModules).values(module).returning();\n    return newModule;\n  }\n\n  async updateTrainingModule(id: string, module: Partial<TrainingModule>): Promise<TrainingModule> {\n    const [updated] = await db.update(trainingModules).set(module).where(eq(trainingModules.id, id)).returning();\n    if (!updated) throw new Error(\"Training module not found\");\n    return updated;\n  }\n\n  async deleteTrainingModule(id: string): Promise<boolean> {\n    const result = await db.delete(trainingModules).where(eq(trainingModules.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Training Progress\n  async getTrainingProgress(userId: string, moduleId: string): Promise<TrainingProgress | undefined> {\n    const [progress] = await db.select().from(trainingProgress).where(and(\n      eq(trainingProgress.userId, userId),\n      eq(trainingProgress.moduleId, moduleId)\n    ));\n    return progress || undefined;\n  }\n\n  async getUserTrainingProgress(userId: string): Promise<TrainingProgress[]> {\n    return db.select().from(trainingProgress).where(eq(trainingProgress.userId, userId)).orderBy(desc(trainingProgress.lastAccessed));\n  }\n\n  async createTrainingProgress(progress: InsertTrainingProgress): Promise<TrainingProgress> {\n    // Use upsert to handle unique constraint on (userId, moduleId)\n    // Prevent regressions by using GREATEST for progress tracking\n    const [newProgress] = await db.insert(trainingProgress)\n      .values(progress)\n      .onConflictDoUpdate({\n        target: [trainingProgress.userId, trainingProgress.moduleId],\n        set: {\n          progress: sql`GREATEST(${trainingProgress.progress}, ${progress.progress})`,\n          currentSection: sql`GREATEST(${trainingProgress.currentSection}, ${progress.currentSection})`,\n          timeSpent: sql`${trainingProgress.timeSpent} + ${progress.timeSpent}`,\n          isCompleted: sql`CASE WHEN GREATEST(${trainingProgress.progress}, ${progress.progress}) >= 100 THEN true ELSE ${progress.isCompleted} END`,\n          completedAt: sql`CASE WHEN GREATEST(${trainingProgress.progress}, ${progress.progress}) >= 100 AND ${trainingProgress.completedAt} IS NULL THEN NOW() ELSE ${trainingProgress.completedAt} END`,\n          lastAccessed: sql`NOW()`,\n          updatedAt: sql`NOW()`,\n        }\n      })\n      .returning();\n    return newProgress;\n  }\n\n  async updateTrainingProgress(id: string, progress: Partial<TrainingProgress>): Promise<TrainingProgress> {\n    const [updated] = await db.update(trainingProgress).set(progress).where(eq(trainingProgress.id, id)).returning();\n    if (!updated) throw new Error(\"Training progress not found\");\n    return updated;\n  }\n\n  // Standard Operating Procedures\n  async getSOP(id: string): Promise<StandardOperatingProcedure | undefined> {\n    const [sop] = await db.select().from(standardOperatingProcedures).where(eq(standardOperatingProcedures.id, id));\n    return sop || undefined;\n  }\n\n  async getSOPs(filter?: { category?: string; isActive?: boolean }): Promise<StandardOperatingProcedure[]> {\n    const conditions = [];\n    if (filter?.category) {\n      conditions.push(eq(standardOperatingProcedures.category, filter.category));\n    }\n    if (filter?.isActive !== undefined) {\n      conditions.push(eq(standardOperatingProcedures.isActive, filter.isActive));\n    }\n    \n    if (conditions.length > 0) {\n      return db.select().from(standardOperatingProcedures).where(and(...conditions)).orderBy(desc(standardOperatingProcedures.lastUpdated));\n    }\n    \n    return db.select().from(standardOperatingProcedures).orderBy(desc(standardOperatingProcedures.lastUpdated));\n  }\n\n  async createSOP(sop: InsertSOP): Promise<StandardOperatingProcedure> {\n    const [newSOP] = await db.insert(standardOperatingProcedures).values(sop).returning();\n    return newSOP;\n  }\n\n  async updateSOP(id: string, sop: Partial<StandardOperatingProcedure>): Promise<StandardOperatingProcedure> {\n    const [updated] = await db.update(standardOperatingProcedures).set(sop).where(eq(standardOperatingProcedures.id, id)).returning();\n    if (!updated) throw new Error(\"SOP not found\");\n    return updated;\n  }\n\n  async deleteSOP(id: string): Promise<boolean> {\n    const result = await db.delete(standardOperatingProcedures).where(eq(standardOperatingProcedures.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":36262},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, integer, boolean, jsonb, index, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"agent\"), // admin, agent, staff\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  dateOfBirth: text(\"date_of_birth\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  zipCode: text(\"zip_code\").notNull(),\n  emergencyContact: text(\"emergency_contact\"),\n  emergencyPhone: text(\"emergency_phone\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, high_risk\n  notes: text(\"notes\"),\n  // Client portal authentication fields\n  portalUsername: text(\"portal_username\").unique(),\n  portalPassword: text(\"portal_password\"),\n  portalEnabled: boolean(\"portal_enabled\").notNull().default(false),\n  lastCheckin: timestamp(\"last_checkin\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const cases = pgTable(\"cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseNumber: text(\"case_number\").notNull().unique(),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  charges: text(\"charges\").notNull(),\n  arrestDate: text(\"arrest_date\").notNull(),\n  courtDate: text(\"court_date\"),\n  courtLocation: text(\"court_location\"),\n  judgeName: text(\"judge_name\"),\n  prosecutorName: text(\"prosecutor_name\"),\n  defenseAttorney: text(\"defense_attorney\"),\n  status: text(\"status\").notNull().default(\"open\"), // open, closed, dismissed\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const bonds = pgTable(\"bonds\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bondNumber: text(\"bond_number\").notNull().unique(),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  caseId: varchar(\"case_id\").notNull().references(() => cases.id),\n  bondAmount: decimal(\"bond_amount\", { precision: 10, scale: 2 }).notNull(),\n  premiumAmount: decimal(\"premium_amount\", { precision: 10, scale: 2 }).notNull(),\n  premiumRate: decimal(\"premium_rate\", { precision: 5, scale: 4 }).notNull(),\n  collateralAmount: decimal(\"collateral_amount\", { precision: 10, scale: 2 }),\n  collateralDescription: text(\"collateral_description\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, forfeited, at_risk\n  issueDate: text(\"issue_date\").notNull(),\n  exonerationDate: text(\"exoneration_date\"),\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, partial, paid_full, overdue\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: text(\"transaction_id\").notNull().unique(),\n  bondId: varchar(\"bond_id\").notNull().references(() => bonds.id),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentType: text(\"payment_type\").notNull(), // premium, collateral_return, fee\n  paymentMethod: text(\"payment_method\").notNull(), // cash, check, credit_card, bank_transfer\n  status: text(\"status\").notNull().default(\"completed\"), // pending, completed, failed, refunded\n  paymentDate: text(\"payment_date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  category: text(\"category\").notNull(), // contract, court_papers, identification, financial\n  relatedId: varchar(\"related_id\"), // client, bond, or case ID\n  relatedType: text(\"related_type\"), // client, bond, case\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(),\n  resourceType: text(\"resource_type\").notNull(),\n  resourceId: varchar(\"resource_id\").notNull(),\n  details: jsonb(\"details\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const clientCheckins = pgTable(\"client_checkins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  bondId: varchar(\"bond_id\").notNull().references(() => bonds.id),\n  photoUrl: text(\"photo_url\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  locationName: text(\"location_name\"),\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default(\"completed\"), // completed, failed, pending_review\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const contractTemplates = pgTable(\"contract_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  nameEs: text(\"name_es\").notNull(),\n  type: text(\"type\").notNull(), // bail-agreement, indemnity, collateral, payment-plan, power-of-attorney\n  description: text(\"description\").notNull(),\n  descriptionEs: text(\"description_es\").notNull(),\n  content: text(\"content\").notNull(),\n  contentEs: text(\"content_es\").notNull(),\n  variables: jsonb(\"variables\").notNull().default(sql`'[]'::jsonb`), // Array of variable names like {{CLIENT_NAME}}\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: 'restrict' }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  typeIndex: index().on(table.type),\n  isActiveIndex: index().on(table.isActive),\n  createdByIndex: index().on(table.createdBy),\n}));\n\nexport const generatedContracts = pgTable(\"generated_contracts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: varchar(\"template_id\").notNull().references(() => contractTemplates.id, { onDelete: 'cascade' }),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: 'cascade' }),\n  caseId: varchar(\"case_id\").references(() => cases.id, { onDelete: 'set null' }),\n  bondId: varchar(\"bond_id\").references(() => bonds.id, { onDelete: 'set null' }),\n  content: text(\"content\").notNull(),\n  variables: jsonb(\"variables\").notNull().default(sql`'{}'::jsonb`), // Key-value pairs of replaced variables\n  status: text(\"status\").notNull().default(\"draft\"), // draft, sent, signed, executed\n  generatedBy: varchar(\"generated_by\").notNull().references(() => users.id, { onDelete: 'restrict' }),\n  signedAt: timestamp(\"signed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  templateIdIndex: index().on(table.templateId),\n  clientIdIndex: index().on(table.clientId),\n  statusIndex: index().on(table.status),\n  generatedByIndex: index().on(table.generatedBy),\n}));\n\nexport const trainingModules = pgTable(\"training_modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  titleEs: text(\"title_es\").notNull(),\n  description: text(\"description\").notNull(),\n  descriptionEs: text(\"description_es\").notNull(),\n  category: text(\"category\").notNull(), // legal-compliance, system-usage, client-service, risk-management, operations\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced\n  duration: integer(\"duration\").notNull(), // in minutes\n  isRequired: boolean(\"is_required\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  content: jsonb(\"content\").notNull().default(sql`'[]'::jsonb`), // Array of training sections\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: 'restrict' }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  categoryIndex: index().on(table.category),\n  isActiveIndex: index().on(table.isActive),\n  isRequiredIndex: index().on(table.isRequired),\n  createdByIndex: index().on(table.createdBy),\n}));\n\nexport const trainingProgress = pgTable(\"training_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  moduleId: varchar(\"module_id\").notNull().references(() => trainingModules.id, { onDelete: 'cascade' }),\n  progress: integer(\"progress\").notNull().default(0), // 0-100\n  isCompleted: boolean(\"is_completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  currentSection: integer(\"current_section\").notNull().default(0),\n  timeSpent: integer(\"time_spent\").notNull().default(0), // in minutes\n  lastAccessed: timestamp(\"last_accessed\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n}, (table) => ({\n  userModuleUnique: unique().on(table.userId, table.moduleId), // Critical: prevent duplicate progress records\n  userIdIndex: index().on(table.userId),\n  moduleIdIndex: index().on(table.moduleId),\n  isCompletedIndex: index().on(table.isCompleted),\n}));\n\nexport const standardOperatingProcedures = pgTable(\"standard_operating_procedures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  titleEs: text(\"title_es\").notNull(),\n  category: text(\"category\").notNull(), // client-onboarding, bond-processing, payment-handling, legal-compliance, emergency-procedures\n  description: text(\"description\").notNull(),\n  descriptionEs: text(\"description_es\").notNull(),\n  content: text(\"content\").notNull(),\n  contentEs: text(\"content_es\").notNull(),\n  steps: jsonb(\"steps\").notNull().default(sql`'[]'::jsonb`), // Array of SOP steps with details\n  version: text(\"version\").notNull().default(\"1.0\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: 'restrict' }),\n  lastUpdated: timestamp(\"last_updated\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  categoryIndex: index().on(table.category),\n  isActiveIndex: index().on(table.isActive),\n  createdByIndex: index().on(table.createdBy),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCaseSchema = createInsertSchema(cases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBondSchema = createInsertSchema(bonds).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  bondAmount: z.union([z.string(), z.number()]).transform(val => String(val)),\n  premiumAmount: z.union([z.string(), z.number()]).transform(val => String(val)),\n  premiumRate: z.union([z.string(), z.number()]).transform(val => String(val)),\n  collateralAmount: z.union([z.string(), z.number(), z.null()]).transform(val => val === null ? null : String(val)).optional(),\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform(val => String(val)),\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClientCheckinSchema = createInsertSchema(clientCheckins).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  latitude: z.union([z.string(), z.number(), z.null()]).transform(val => val === null ? null : String(val)).optional(),\n  longitude: z.union([z.string(), z.number(), z.null()]).transform(val => val === null ? null : String(val)).optional(),\n});\n\nexport const insertContractTemplateSchema = createInsertSchema(contractTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  type: z.enum(['bail-agreement', 'indemnity', 'collateral', 'payment-plan', 'power-of-attorney']),\n});\n\nexport const insertGeneratedContractSchema = createInsertSchema(generatedContracts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  status: z.enum(['draft', 'sent', 'signed', 'executed']),\n});\n\nexport const insertTrainingModuleSchema = createInsertSchema(trainingModules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  category: z.enum(['legal-compliance', 'system-usage', 'client-service', 'risk-management', 'operations']),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  duration: z.number().min(1),\n});\n\nexport const insertTrainingProgressSchema = createInsertSchema(trainingProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  progress: z.number().min(0).max(100),\n  currentSection: z.number().min(0),\n  timeSpent: z.number().min(0),\n});\n\nexport const insertSOPSchema = createInsertSchema(standardOperatingProcedures).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  category: z.enum(['client-onboarding', 'bond-processing', 'payment-handling', 'legal-compliance', 'emergency-procedures']),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type Case = typeof cases.$inferSelect;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\n\nexport type Bond = typeof bonds.$inferSelect;\nexport type InsertBond = z.infer<typeof insertBondSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\n\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n\nexport type ClientCheckin = typeof clientCheckins.$inferSelect;\nexport type InsertClientCheckin = z.infer<typeof insertClientCheckinSchema>;\n\nexport type ContractTemplate = typeof contractTemplates.$inferSelect;\nexport type InsertContractTemplate = z.infer<typeof insertContractTemplateSchema>;\n\nexport type GeneratedContract = typeof generatedContracts.$inferSelect;\nexport type InsertGeneratedContract = z.infer<typeof insertGeneratedContractSchema>;\n\nexport type TrainingModule = typeof trainingModules.$inferSelect;\nexport type InsertTrainingModule = z.infer<typeof insertTrainingModuleSchema>;\n\nexport type TrainingProgress = typeof trainingProgress.$inferSelect;\nexport type InsertTrainingProgress = z.infer<typeof insertTrainingProgressSchema>;\n\nexport type StandardOperatingProcedure = typeof standardOperatingProcedures.$inferSelect;\nexport type InsertSOP = z.infer<typeof insertSOPSchema>;\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bonds: many(bonds),\n  documents: many(documents),\n  activities: many(activities),\n}));\n\nexport const clientsRelations = relations(clients, ({ many }) => ({\n  cases: many(cases),\n  bonds: many(bonds),\n  payments: many(payments),\n}));\n\nexport const casesRelations = relations(cases, ({ one, many }) => ({\n  client: one(clients, { fields: [cases.clientId], references: [clients.id] }),\n  bonds: many(bonds),\n}));\n\nexport const bondsRelations = relations(bonds, ({ one, many }) => ({\n  client: one(clients, { fields: [bonds.clientId], references: [clients.id] }),\n  case: one(cases, { fields: [bonds.caseId], references: [cases.id] }),\n  agent: one(users, { fields: [bonds.agentId], references: [users.id] }),\n  payments: many(payments),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  bond: one(bonds, { fields: [payments.bondId], references: [bonds.id] }),\n  client: one(clients, { fields: [payments.clientId], references: [clients.id] }),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  uploadedByUser: one(users, { fields: [documents.uploadedBy], references: [users.id] }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  user: one(users, { fields: [activities.userId], references: [users.id] }),\n}));\n\nexport const clientCheckinsRelations = relations(clientCheckins, ({ one }) => ({\n  client: one(clients, { fields: [clientCheckins.clientId], references: [clients.id] }),\n  bond: one(bonds, { fields: [clientCheckins.bondId], references: [bonds.id] }),\n}));\n","size_bytes":18459},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/language-context\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport ClientDetail from \"@/pages/client\";\nimport Cases from \"@/pages/cases\";\nimport Bonds from \"@/pages/bonds\";\nimport Financial from \"@/pages/financial\";\nimport Documents from \"@/pages/documents\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport Agents from \"@/pages/agents\";\nimport { OnboardingPage } from \"@/pages/onboarding\";\nimport ClientLoginPage from \"@/pages/client-login\";\nimport ClientPortalPage from \"@/pages/client-portal\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Client Portal Routes (no sidebar) */}\n      <Route path=\"/client-login\" component={ClientLoginPage} />\n      <Route path=\"/client-portal/:clientId\" component={ClientPortalPage} />\n      \n      {/* Main Application Routes (with sidebar) */}\n      <Route path=\"/\" nest>\n        <div className=\"flex h-screen bg-background\">\n          <Sidebar />\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/clients\" component={Clients} />\n            <Route path=\"/clients/:id\" component={ClientDetail} />\n            <Route path=\"/cases\" component={Cases} />\n            <Route path=\"/bonds\" component={Bonds} />\n            <Route path=\"/financial\" component={Financial} />\n            <Route path=\"/documents\" component={Documents} />\n            <Route path=\"/reports\" component={Reports} />\n            <Route path=\"/agents\" component={Agents} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/onboarding\" component={OnboardingPage} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2440},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 85%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5050},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gibsonApi.ts":{"content":"const GIBSON_API_BASE = \"https://api.gibsonai.com\";\nconst API_KEY = process.env.GIBSON_API_KEY || process.env.X_GIBSON_API_KEY;\n\ninterface GibsonApiResponse<T = any> {\n  data?: T;\n  error?: string;\n}\n\nclass GibsonApiService {\n  private async makeRequest<T>(\n    endpoint: string,\n    method: \"GET\" | \"POST\" | \"PATCH\" | \"DELETE\" = \"GET\",\n    body?: any\n  ): Promise<GibsonApiResponse<T>> {\n    if (!API_KEY) {\n      return { error: \"Gibson API key not configured. Set GIBSON_API_KEY environment variable.\" };\n    }\n\n    try {\n      const response = await fetch(`${GIBSON_API_BASE}${endpoint}`, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Gibson-API-Key\": API_KEY,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return { error: `Gibson API Error (${response.status}): ${errorText}` };\n      }\n\n      const data = await response.json();\n      return { data };\n    } catch (error) {\n      return { error: `Network error: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n  }\n\n  // Query endpoint for custom SQL queries\n  async query(sql: string): Promise<GibsonApiResponse<any[]>> {\n    return this.makeRequest(\"/v1/-/query\", \"POST\", { query: sql });\n  }\n\n  // Generic CRUD operations for any table\n  async create(table: string, data: Record<string, any>): Promise<GibsonApiResponse<any>> {\n    const columns = Object.keys(data).join(\", \");\n    const values = Object.values(data).map(v => typeof v === 'string' ? `'${v.replace(/'/g, \"''\")}'` : v).join(\", \");\n    \n    // Insert without RETURNING clause (not supported by Gibson API)\n    const insertSql = `INSERT INTO ${table} (${columns}) VALUES (${values})`;\n    const insertResult = await this.query(insertSql);\n    if (insertResult.error) return insertResult;\n    \n    // Try to retrieve the inserted record by ID if available\n    if (data.id) {\n      const selectSql = `SELECT * FROM ${table} WHERE id = '${data.id}' LIMIT 1`;\n      const selectResult = await this.query(selectSql);\n      if (selectResult.error) {\n        // If we can't retrieve, return the data that was sent\n        return { data: data };\n      }\n      return { data: selectResult.data?.[0] || data };\n    }\n    \n    // Return the data that was sent if no ID available\n    return { data: data };\n  }\n\n  async read(table: string, where?: string, orderBy?: string, limit?: number): Promise<GibsonApiResponse<any[]>> {\n    let sql = `SELECT * FROM ${table}`;\n    if (where) sql += ` WHERE ${where}`;\n    if (orderBy) sql += ` ORDER BY ${orderBy}`;\n    if (limit) sql += ` LIMIT ${limit}`;\n    \n    return this.query(sql);\n  }\n\n  async update(table: string, id: string, data: Record<string, any>): Promise<GibsonApiResponse<any>> {\n    const sets = Object.entries(data)\n      .map(([key, value]) => `${key} = ${typeof value === 'string' ? `'${value}'` : value}`)\n      .join(\", \");\n    \n    const sql = `UPDATE ${table} SET ${sets} WHERE id = '${id}' RETURNING *`;\n    \n    const result = await this.query(sql);\n    if (result.error) return result;\n    \n    return { data: result.data?.[0] };\n  }\n\n  async delete(table: string, id: string): Promise<GibsonApiResponse<boolean>> {\n    const sql = `DELETE FROM ${table} WHERE id = '${id}'`;\n    \n    const result = await this.query(sql);\n    if (result.error) return { error: result.error };\n    \n    return { data: true };\n  }\n\n  // Specific business logic methods\n  async getDashboardStats(): Promise<GibsonApiResponse<any>> {\n    const queries = [\n      \"SELECT COUNT(*) as active_bonds FROM bonds WHERE status = 'active'\",\n      \"SELECT COALESCE(SUM(amount), 0) as total_revenue FROM payments WHERE status = 'completed'\",\n      \"SELECT COALESCE(SUM(premium_amount), 0) as pending_payments FROM bonds WHERE payment_status IN ('pending', 'partial')\",\n      \"SELECT COUNT(*) as upcoming_court_dates FROM cases WHERE court_date >= CURRENT_DATE AND court_date <= CURRENT_DATE + INTERVAL '30 days'\"\n    ];\n\n    const results = await Promise.all(queries.map(q => this.query(q)));\n    \n    if (results.some(r => r.error)) {\n      return { error: \"Failed to fetch dashboard statistics\" };\n    }\n\n    return {\n      data: {\n        activeBonds: results[0].data?.[0]?.active_bonds || 0,\n        totalRevenue: results[1].data?.[0]?.total_revenue || 0,\n        pendingPayments: results[2].data?.[0]?.pending_payments || 0,\n        upcomingCourtDates: results[3].data?.[0]?.upcoming_court_dates || 0,\n      }\n    };\n  }\n\n  async getRecentActivity(limit: number = 10): Promise<GibsonApiResponse<any[]>> {\n    const sql = `\n      SELECT a.*, u.first_name, u.last_name \n      FROM activities a \n      JOIN users u ON a.user_id = u.id \n      ORDER BY a.created_at DESC \n      LIMIT ${limit}\n    `;\n    return this.query(sql);\n  }\n\n  async getUpcomingCourtDates(limit: number = 10): Promise<GibsonApiResponse<any[]>> {\n    const sql = `\n      SELECT c.*, cl.first_name, cl.last_name \n      FROM cases c \n      JOIN clients cl ON c.client_id = cl.id \n      WHERE c.court_date >= CURRENT_DATE \n      ORDER BY c.court_date ASC \n      LIMIT ${limit}\n    `;\n    return this.query(sql);\n  }\n\n  async getClientsWithBonds(): Promise<GibsonApiResponse<any[]>> {\n    const sql = `\n      SELECT \n        c.*,\n        COUNT(b.id) as total_bonds,\n        MAX(b.created_at) as last_bond_date\n      FROM clients c\n      LEFT JOIN bonds b ON c.id = b.client_id\n      GROUP BY c.id\n      ORDER BY c.created_at DESC\n    `;\n    return this.query(sql);\n  }\n\n  async getBondsWithDetails(): Promise<GibsonApiResponse<any[]>> {\n    const sql = `\n      SELECT \n        b.*,\n        c.first_name || ' ' || c.last_name as client_name,\n        c.phone as client_phone,\n        cs.court_date,\n        u.first_name || ' ' || u.last_name as agent_name\n      FROM bonds b\n      JOIN clients c ON b.client_id = c.id\n      JOIN cases cs ON b.case_id = cs.id\n      JOIN users u ON b.agent_id = u.id\n      ORDER BY b.created_at DESC\n    `;\n    return this.query(sql);\n  }\n\n  async getFinancialSummary(): Promise<GibsonApiResponse<any>> {\n    const queries = [\n      `SELECT \n        COALESCE(SUM(CASE WHEN DATE_PART('month', created_at) = DATE_PART('month', CURRENT_DATE) THEN amount ELSE 0 END), 0) as monthly_revenue,\n        COALESCE(SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END), 0) as outstanding,\n        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_payments,\n        COUNT(*) as total_payments\n      FROM payments`,\n    ];\n\n    const result = await this.query(queries[0]);\n    if (result.error) return result;\n\n    const data = result.data?.[0] || {};\n    const collectionRate = data.total_payments > 0 \n      ? (data.completed_payments / data.total_payments * 100).toFixed(1)\n      : \"0.0\";\n\n    return {\n      data: {\n        monthlyRevenue: data.monthly_revenue || 0,\n        outstanding: data.outstanding || 0,\n        collectionRate: parseFloat(collectionRate),\n      }\n    };\n  }\n\n  // Database initialization - create all required tables\n  async initializeDatabase(): Promise<GibsonApiResponse<any>> {\n    console.log(\"Initializing database schema...\");\n    \n    const createTablesSQL = [\n      // Users table\n      `CREATE TABLE IF NOT EXISTS users (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        username TEXT NOT NULL UNIQUE,\n        email TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        first_name TEXT NOT NULL,\n        last_name TEXT NOT NULL,\n        role TEXT NOT NULL DEFAULT 'agent',\n        is_active BOOLEAN NOT NULL DEFAULT TRUE,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n      \n      // Clients table\n      `CREATE TABLE IF NOT EXISTS clients (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        first_name TEXT NOT NULL,\n        last_name TEXT NOT NULL,\n        date_of_birth TEXT NOT NULL,\n        phone TEXT NOT NULL,\n        email TEXT,\n        address TEXT NOT NULL,\n        city TEXT NOT NULL,\n        state TEXT NOT NULL,\n        zip_code TEXT NOT NULL,\n        emergency_contact TEXT,\n        emergency_phone TEXT,\n        status TEXT NOT NULL DEFAULT 'active',\n        notes TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n\n      // Cases table\n      `CREATE TABLE IF NOT EXISTS cases (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        case_number TEXT NOT NULL UNIQUE,\n        client_id VARCHAR(255) NOT NULL,\n        charges TEXT NOT NULL,\n        arrest_date TEXT NOT NULL,\n        court_date TEXT,\n        court_location TEXT,\n        judge_name TEXT,\n        prosecutor_name TEXT,\n        defense_attorney TEXT,\n        status TEXT NOT NULL DEFAULT 'open',\n        notes TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n\n      // Bonds table  \n      `CREATE TABLE IF NOT EXISTS bonds (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        bond_number TEXT NOT NULL UNIQUE,\n        client_id VARCHAR(255) NOT NULL,\n        case_id VARCHAR(255) NOT NULL,\n        bond_amount DECIMAL(10, 2) NOT NULL,\n        premium_amount DECIMAL(10, 2) NOT NULL,\n        premium_rate DECIMAL(5, 4) NOT NULL,\n        collateral_amount DECIMAL(10, 2),\n        collateral_description TEXT,\n        status TEXT NOT NULL DEFAULT 'active',\n        issue_date TEXT NOT NULL,\n        exoneration_date TEXT,\n        payment_status TEXT NOT NULL DEFAULT 'pending',\n        agent_id VARCHAR(255) NOT NULL,\n        notes TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n\n      // Payments table\n      `CREATE TABLE IF NOT EXISTS payments (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        transaction_id TEXT NOT NULL UNIQUE,\n        bond_id VARCHAR(255) NOT NULL,\n        client_id VARCHAR(255) NOT NULL,\n        amount DECIMAL(10, 2) NOT NULL,\n        payment_type TEXT NOT NULL,\n        payment_method TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'completed',\n        payment_date TEXT NOT NULL,\n        notes TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n\n      // Documents table\n      `CREATE TABLE IF NOT EXISTS documents (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        filename TEXT NOT NULL,\n        original_name TEXT NOT NULL,\n        file_size INTEGER NOT NULL,\n        mime_type TEXT NOT NULL,\n        category TEXT NOT NULL,\n        related_id VARCHAR(255),\n        related_type TEXT,\n        uploaded_by VARCHAR(255) NOT NULL,\n        notes TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`,\n\n      // Activities table\n      `CREATE TABLE IF NOT EXISTS activities (\n        id VARCHAR(255) PRIMARY KEY DEFAULT (SUBSTRING(UUID(), 1, 36)),\n        user_id VARCHAR(255) NOT NULL,\n        action TEXT NOT NULL,\n        resource_type TEXT NOT NULL,\n        resource_id VARCHAR(255) NOT NULL,\n        details TEXT,\n        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n      )`\n    ];\n\n    try {\n      for (const sql of createTablesSQL) {\n        const result = await this.query(sql);\n        if (result.error) {\n          console.error(\"Failed to create table:\", result.error);\n          return result;\n        }\n      }\n      console.log(\"Database schema initialized successfully\");\n      return { data: { message: \"Database schema initialized successfully\" } };\n    } catch (error) {\n      console.error(\"Database initialization error:\", error);\n      return { error: `Database initialization failed: ${error}` };\n    }\n  }\n}\n\nexport const gibsonApi = new GibsonApiService();\n","size_bytes":12124},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  // Dashboard\n  getDashboardStats: () => \n    fetch(\"/api/dashboard/stats\").then(res => res.json()),\n  \n  getRecentActivity: (limit?: number) =>\n    fetch(`/api/dashboard/recent-activity${limit ? `?limit=${limit}` : \"\"}`).then(res => res.json()),\n  \n  getUpcomingCourtDates: (limit?: number) =>\n    fetch(`/api/dashboard/upcoming-court-dates${limit ? `?limit=${limit}` : \"\"}`).then(res => res.json()),\n\n  // Clients\n  getClients: (filters?: { status?: string; search?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.status) params.append(\"status\", filters.status);\n    if (filters?.search) params.append(\"search\", filters.search);\n    return fetch(`/api/clients${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  getClientsWithBonds: () =>\n    fetch(\"/api/clients/with-bonds\").then(res => res.json()),\n\n  getClient: (id: string) =>\n    fetch(`/api/clients/${id}`).then(res => res.json()),\n\n  createClient: (data: any) =>\n    apiRequest(\"POST\", \"/api/clients\", data).then(res => res.json()),\n\n  updateClient: (id: string, data: any) =>\n    apiRequest(\"PATCH\", `/api/clients/${id}`, data).then(res => res.json()),\n\n  deleteClient: (id: string) =>\n    apiRequest(\"DELETE\", `/api/clients/${id}`),\n\n  // Users\n  getUsers: (filters?: { role?: string; isActive?: boolean }) => {\n    const params = new URLSearchParams();\n    if (filters?.role) params.append(\"role\", filters.role);\n    if (filters?.isActive !== undefined) params.append(\"isActive\", filters.isActive.toString());\n    return fetch(`/api/users${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  createUser: (data: any) =>\n    apiRequest(\"POST\", \"/api/users\", data).then(res => res.json()),\n\n  updateUser: (id: string, data: any) =>\n    apiRequest(\"PATCH\", `/api/users/${id}`, data).then(res => res.json()),\n\n  deleteUser: (id: string) =>\n    apiRequest(\"DELETE\", `/api/users/${id}`),\n\n  // Cases\n  getCases: (filters?: { clientId?: string; status?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.clientId) params.append(\"clientId\", filters.clientId);\n    if (filters?.status) params.append(\"status\", filters.status);\n    return fetch(`/api/cases${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  getCase: (id: string) =>\n    fetch(`/api/cases/${id}`).then(res => res.json()),\n\n  createCase: (data: any) =>\n    apiRequest(\"POST\", \"/api/cases\", data).then(res => res.json()),\n\n  updateCase: (id: string, data: any) =>\n    apiRequest(\"PATCH\", `/api/cases/${id}`, data).then(res => res.json()),\n\n  // Bonds\n  getBonds: (filters?: { clientId?: string; status?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.clientId) params.append(\"clientId\", filters.clientId);\n    if (filters?.status) params.append(\"status\", filters.status);\n    return fetch(`/api/bonds${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  getBondsWithDetails: () =>\n    fetch(\"/api/bonds/with-details\").then(res => res.json()),\n\n  createBond: (data: any) =>\n    apiRequest(\"POST\", \"/api/bonds\", data).then(res => res.json()),\n\n  updateBond: (id: string, data: any) =>\n    apiRequest(\"PATCH\", `/api/bonds/${id}`, data).then(res => res.json()),\n\n  // Payments\n  getPayments: (filters?: { bondId?: string; clientId?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.bondId) params.append(\"bondId\", filters.bondId);\n    if (filters?.clientId) params.append(\"clientId\", filters.clientId);\n    return fetch(`/api/payments${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  createPayment: (data: any) =>\n    apiRequest(\"POST\", \"/api/payments\", data).then(res => res.json()),\n\n  // Financial\n  getFinancialSummary: () =>\n    fetch(\"/api/financial/summary\").then(res => res.json()),\n\n  // Activities  \n  getActivities: (filters?: { resourceId?: string; resourceType?: string; limit?: number }) => {\n    const params = new URLSearchParams();\n    if (filters?.resourceId) params.append(\"resourceId\", filters.resourceId);\n    if (filters?.resourceType) params.append(\"resourceType\", filters.resourceType);\n    if (filters?.limit) params.append(\"limit\", filters.limit.toString());\n    return fetch(`/api/activities${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  // Documents\n  getDocuments: (filters?: { category?: string; relatedId?: string; relatedType?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.category) params.append(\"category\", filters.category);\n    if (filters?.relatedId) params.append(\"relatedId\", filters.relatedId);\n    if (filters?.relatedType) params.append(\"relatedType\", filters.relatedType);\n    return fetch(`/api/documents${params.toString() ? `?${params}` : \"\"}`).then(res => res.json());\n  },\n\n  uploadDocuments: (formData: FormData) =>\n    fetch(\"/api/documents/upload\", {\n      method: \"POST\",\n      body: formData,\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Upload failed: ${res.statusText}`);\n      }\n      return res.json();\n    }),\n\n  // AI Services\n  aiSearch: (query: string, language?: 'en' | 'es') =>\n    apiRequest(\"POST\", \"/api/ai/search\", { query, language }).then(res => res.json()),\n\n  translateText: (text: string, fromLanguage: 'en' | 'es', toLanguage: 'en' | 'es') =>\n    apiRequest(\"POST\", \"/api/ai/translate\", { text, fromLanguage, toLanguage }).then(res => res.json()),\n\n  verifyPhoto: (imageData: string) =>\n    apiRequest(\"POST\", \"/api/ai/verify-photo\", { imageData }).then(res => res.json()),\n\n  getAIHelp: (question: string, language?: 'en' | 'es') =>\n    apiRequest(\"POST\", \"/api/ai/help\", { question, language }).then(res => res.json()),\n\n  analyzeCompliance: (caseId: string) =>\n    apiRequest(\"POST\", \"/api/ai/analyze-compliance\", { caseId }).then(res => res.json()),\n};\n","size_bytes":5908},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface DashboardStats {\n  activeBonds: number;\n  totalRevenue: number;\n  pendingPayments: number;\n  upcomingCourtDates: number;\n}\n\nexport interface RecentActivity {\n  id: string;\n  action: string;\n  resourceType: string;\n  resourceId: string;\n  details?: any;\n  firstName?: string;\n  lastName?: string;\n  createdAt: string;\n}\n\nexport interface CourtDate {\n  id: string;\n  caseNumber: string;\n  courtDate: string;\n  courtLocation: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface ClientWithBonds {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email?: string;\n  status: string;\n  totalBonds: number;\n  lastBondDate?: string;\n  createdAt: string;\n}\n\nexport interface BondWithDetails {\n  id: string;\n  bondNumber: string;\n  clientName: string;\n  clientPhone: string;\n  bondAmount: number;\n  premiumAmount: number;\n  status: string;\n  paymentStatus: string;\n  courtDate?: string;\n  agentName: string;\n  createdAt: string;\n}\n\nexport interface FinancialSummary {\n  monthlyRevenue: number;\n  outstanding: number;\n  collectionRate: number;\n}\n","size_bytes":1092},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/bonds.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { AddBondModal } from \"@/components/modals/add-bond-modal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { api } from \"@/lib/api\";\nimport { BondWithDetails } from \"@/lib/types\";\n\nexport default function Bonds() {\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const [selectedBondId, setSelectedBondId] = useState<string | null>(null);\n  const [bondDetailsModalOpen, setBondDetailsModalOpen] = useState(false);\n\n  const { data: bonds = [], isLoading } = useQuery<BondWithDetails[]>({\n    queryKey: [\"/api/bonds/with-details\"],\n    queryFn: () => api.getBondsWithDetails(),\n  });\n\n  // Filter bonds based on search term and status\n  const filteredBonds = bonds.filter((bond) => {\n    const matchesSearch = !searchTerm || \n      bond.bondNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      bond.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      bond.clientPhone.includes(searchTerm);\n    \n    const matchesStatus = !statusFilter || statusFilter === \"all\" || bond.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Calculate bond statistics\n  const bondStats = {\n    active: bonds.filter(b => b.status === 'active').length,\n    completed: bonds.filter(b => b.status === 'completed').length,\n    atRisk: bonds.filter(b => b.status === 'at_risk').length,\n    forfeited: bonds.filter(b => b.status === 'forfeited').length,\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-blue-100 text-blue-800\" data-testid=\"badge-active\">Active</Badge>;\n      case \"completed\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-completed\">Completed</Badge>;\n      case \"at_risk\":\n        return <Badge className=\"bg-amber-100 text-amber-800\" data-testid=\"badge-at-risk\">At Risk</Badge>;\n      case \"forfeited\":\n        return <Badge className=\"bg-red-100 text-red-800\" data-testid=\"badge-forfeited\">Forfeited</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case \"paid_full\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-paid-full\">Paid in Full</Badge>;\n      case \"partial\":\n        return <Badge className=\"bg-amber-100 text-amber-800\" data-testid=\"badge-partial\">Partial Payment</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-gray-100 text-gray-800\" data-testid=\"badge-pending\">Pending</Badge>;\n      case \"overdue\":\n        return <Badge className=\"bg-red-100 text-red-800\" data-testid=\"badge-overdue\">Overdue</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"Not set\";\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const formatTime = (dateString?: string) => {\n    if (!dateString) return \"\";\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const handleViewBondDetails = (bondId: string) => {\n    setSelectedBondId(bondId);\n    setBondDetailsModalOpen(true);\n  };\n\n  const handleEditBond = (bondId: string) => {\n    // TODO: Implement edit functionality\n    console.log('Edit bond:', bondId);\n  };\n\n  const handlePrintBond = (bondId: string) => {\n    // TODO: Implement print functionality\n    window.print();\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Bond Tracking\"\n        subtitle=\"Monitor bond status, payments, and collateral\"\n        onNewBond={() => setShowAddModal(true)}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* Bond Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-active-bonds\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Active Bonds</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-active-bonds\">\n                    {bondStats.active}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-handshake text-blue-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-completed-bonds\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Completed</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-completed-bonds\">\n                    {bondStats.completed}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-at-risk-bonds\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">At Risk</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-at-risk-bonds\">\n                    {bondStats.atRisk}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-exclamation-triangle text-amber-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-forfeited-bonds\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Forfeited</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-forfeited-bonds\">\n                    {bondStats.forfeited}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-times-circle text-red-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Search</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Bond number, client name...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-bonds\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Status</label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"at_risk\">At Risk</SelectItem>\n                    <SelectItem value=\"forfeited\">Forfeited</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Court Date</label>\n                <Input type=\"date\" data-testid=\"input-court-date-filter\" />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setStatusFilter(\"\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>Clear Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bonds Table */}\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Bond Details</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Court Date</TableHead>\n                  <TableHead>Payment Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-24 mb-1\" />\n                        <Skeleton className=\"h-3 w-20\" />\n                      </TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-20 mb-1\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-16 mb-1\" />\n                        <Skeleton className=\"h-3 w-20\" />\n                      </TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-16\" /></TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-20 mb-1\" />\n                        <Skeleton className=\"h-3 w-16\" />\n                      </TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredBonds.length > 0 ? (\n                  filteredBonds.map((bond) => (\n                    <TableRow key={bond.id} className=\"hover:bg-muted/50\" data-testid={`bond-row-${bond.id}`}>\n                      <TableCell>\n                        <div className=\"text-sm font-medium text-foreground\" data-testid={`bond-number-${bond.id}`}>\n                          {bond.bondNumber}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Created: {formatDate(bond.createdAt)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm font-medium text-foreground\" data-testid={`bond-client-${bond.id}`}>\n                          {bond.clientName}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {bond.clientPhone}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm font-medium text-foreground\">\n                          {formatCurrency(bond.bondAmount)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Premium: {formatCurrency(bond.premiumAmount)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(bond.status)}\n                      </TableCell>\n                      <TableCell>\n                        {bond.courtDate ? (\n                          <div>\n                            <div className=\"text-sm font-medium text-foreground\">\n                              {formatDate(bond.courtDate)}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {formatTime(bond.courtDate)}\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"text-sm text-muted-foreground\">Not scheduled</div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {getPaymentStatusBadge(bond.paymentStatus)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <button \n                            className=\"text-primary hover:text-primary/80\" \n                            title=\"View Details\"\n                            onClick={() => handleViewBondDetails(bond.id)}\n                            data-testid={`button-view-${bond.id}`}\n                          >\n                            <i className=\"fas fa-eye\"></i>\n                          </button>\n                          <button \n                            className=\"text-muted-foreground hover:text-foreground\" \n                            title=\"Edit\"\n                            onClick={() => handleEditBond(bond.id)}\n                            data-testid={`button-edit-${bond.id}`}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </button>\n                          <button \n                            className=\"text-muted-foreground hover:text-foreground\" \n                            title=\"Print\"\n                            onClick={() => handlePrintBond(bond.id)}\n                            data-testid={`button-print-${bond.id}`}\n                          >\n                            <i className=\"fas fa-print\"></i>\n                          </button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      <div className=\"text-muted-foreground\">\n                        {searchTerm || statusFilter ? (\n                          <>\n                            <i className=\"fas fa-search text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No bonds found</p>\n                            <p className=\"text-sm\">Try adjusting your search criteria</p>\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-handshake text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No bonds yet</p>\n                            <p className=\"text-sm\">Create your first bond to get started</p>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          {filteredBonds.length > 0 && (\n            <div className=\"px-6 py-3 border-t border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {filteredBonds.length} of {bonds.length} results\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      <AddBondModal\n        open={showAddModal}\n        onOpenChange={setShowAddModal}\n      />\n\n      {/* Bond Details Modal */}\n      <Dialog open={bondDetailsModalOpen} onOpenChange={setBondDetailsModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Bond Details</DialogTitle>\n            <DialogDescription>\n              View detailed information about this bond\n            </DialogDescription>\n          </DialogHeader>\n          {selectedBondId && (() => {\n            const bond = bonds.find(b => b.id === selectedBondId);\n            if (!bond) return <div>Bond not found</div>;\n            \n            return (\n              <div className=\"space-y-6\" data-testid=\"bond-details-modal\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Bond Number</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-bond-number\">{bond.bondNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                    <div data-testid=\"modal-bond-status\">{getStatusBadge(bond.status)}</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Client Name</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-client-name\">{bond.clientName}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Client Phone</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-client-phone\">{bond.clientPhone}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Bond Amount</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-bond-amount\">{formatCurrency(bond.bondAmount)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Premium Amount</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-premium-amount\">{formatCurrency(bond.premiumAmount)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Court Date</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-court-date\">\n                      {bond.courtDate ? `${formatDate(bond.courtDate)} ${formatTime(bond.courtDate)}` : 'Not scheduled'}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Payment Status</label>\n                    <div data-testid=\"modal-payment-status\">{getPaymentStatusBadge(bond.paymentStatus)}</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Created Date</label>\n                    <p className=\"text-foreground\" data-testid=\"modal-created-date\">{formatDate(bond.createdAt)}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })()}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":21436},"client/src/pages/cases.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { AddCaseModal } from \"@/components/modals/add-case-modal\";\nimport { CaseDetailsModal } from \"@/components/modals/case-details-modal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { api } from \"@/lib/api\";\n\nexport default function Cases() {\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const [selectedCaseId, setSelectedCaseId] = useState<string | null>(null);\n  const [caseDetailsModalOpen, setCaseDetailsModalOpen] = useState(false);\n  \n  const { data: cases = [], isLoading } = useQuery({\n    queryKey: [\"/api/cases\"],\n    queryFn: () => api.getCases(),\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  // Create client lookup map\n  const clientMap = clients.reduce((map: any, client: any) => {\n    map[client.id] = client;\n    return map;\n  }, {});\n\n  // Filter cases based on search term and status\n  const filteredCases = cases.filter((case_: any) => {\n    const client = clientMap[case_.clientId];\n    const clientName = client ? `${client.firstName} ${client.lastName}` : \"\";\n    \n    const matchesSearch = !searchTerm || \n      case_.caseNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      case_.charges.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      clientName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = !statusFilter || statusFilter === \"all\" || case_.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return <Badge className=\"bg-blue-100 text-blue-800\" data-testid=\"badge-open\">Open</Badge>;\n      case \"closed\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-closed\">Closed</Badge>;\n      case \"dismissed\":\n        return <Badge className=\"bg-gray-100 text-gray-800\" data-testid=\"badge-dismissed\">Dismissed</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"Not set\";\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const formatTime = (dateString?: string) => {\n    if (!dateString) return \"\";\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const handleViewCaseDetails = (caseId: string) => {\n    setSelectedCaseId(caseId);\n    setCaseDetailsModalOpen(true);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Case Management\"\n        subtitle=\"Track court cases and legal proceedings\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">Case Management</h3>\n            <p className=\"text-muted-foreground\">Track court cases and legal proceedings</p>\n          </div>\n          <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-case\">\n            <i className=\"fas fa-plus mr-2\"></i>Add New Case\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Search</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Case number, charges, client...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-cases\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Status</label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"open\">Open</SelectItem>\n                    <SelectItem value=\"closed\">Closed</SelectItem>\n                    <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Court Date</label>\n                <Input type=\"date\" data-testid=\"input-court-date-filter\" />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setStatusFilter(\"\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>Clear Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cases Table */}\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Case Information</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Charges</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Court Date</TableHead>\n                  <TableHead>Court Location</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-24 mb-1\" />\n                        <Skeleton className=\"h-3 w-20\" />\n                      </TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-20 mb-1\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-16\" /></TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-20 mb-1\" />\n                        <Skeleton className=\"h-3 w-16\" />\n                      </TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredCases.length > 0 ? (\n                  filteredCases.map((case_: any) => {\n                    const client = clientMap[case_.clientId];\n                    return (\n                      <TableRow key={case_.id} className=\"hover:bg-muted/50\" data-testid={`case-row-${case_.id}`}>\n                        <TableCell>\n                          <div className=\"text-sm font-medium text-foreground\" data-testid={`case-number-${case_.id}`}>\n                            {case_.caseNumber}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Arrest: {formatDate(case_.arrestDate)}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {client ? (\n                            <div>\n                              <div className=\"text-sm font-medium text-foreground\" data-testid={`case-client-${case_.id}`}>\n                                {client.firstName} {client.lastName}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {client.phone}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-sm text-muted-foreground\">Unknown Client</div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground max-w-xs truncate\" title={case_.charges}>\n                            {case_.charges}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(case_.status)}\n                        </TableCell>\n                        <TableCell>\n                          {case_.courtDate ? (\n                            <div>\n                              <div className=\"text-sm font-medium text-foreground\">\n                                {formatDate(case_.courtDate)}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {formatTime(case_.courtDate)}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-sm text-muted-foreground\">Not scheduled</div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-foreground\">\n                            {case_.courtLocation || \"Not specified\"}\n                          </div>\n                          {case_.judgeName && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Judge: {case_.judgeName}\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <button \n                              className=\"text-primary hover:text-primary/80\" \n                              title=\"View Details\"\n                              onClick={() => handleViewCaseDetails(case_.id)}\n                              data-testid={`button-view-${case_.id}`}\n                            >\n                              <i className=\"fas fa-eye\"></i>\n                            </button>\n                            <button \n                              className=\"text-muted-foreground hover:text-foreground\" \n                              title=\"Edit\"\n                              onClick={() => handleViewCaseDetails(case_.id)}\n                              data-testid={`button-edit-${case_.id}`}\n                            >\n                              <i className=\"fas fa-edit\"></i>\n                            </button>\n                            <button \n                              className=\"text-muted-foreground hover:text-foreground\" \n                              title=\"Documents\"\n                              onClick={() => handleViewCaseDetails(case_.id)}\n                              data-testid={`button-documents-${case_.id}`}\n                            >\n                              <i className=\"fas fa-file-alt\"></i>\n                            </button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      <div className=\"text-muted-foreground\">\n                        {searchTerm || statusFilter ? (\n                          <>\n                            <i className=\"fas fa-search text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No cases found</p>\n                            <p className=\"text-sm\">Try adjusting your search criteria</p>\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-briefcase text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No cases yet</p>\n                            <p className=\"text-sm\">Add your first case to get started</p>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          {filteredCases.length > 0 && (\n            <div className=\"px-6 py-3 border-t border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {filteredCases.length} of {cases.length} results\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      <AddCaseModal\n        open={showAddModal}\n        onOpenChange={setShowAddModal}\n      />\n\n      <CaseDetailsModal\n        caseId={selectedCaseId}\n        open={caseDetailsModalOpen}\n        onOpenChange={(open) => {\n          setCaseDetailsModalOpen(open);\n          if (!open) {\n            setSelectedCaseId(null);\n          }\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":15132},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/layout/header\";\nimport { AddClientModal } from \"@/components/modals/add-client-modal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { api } from \"@/lib/api\";\nimport { ClientWithBonds } from \"@/lib/types\";\nimport { Eye, Edit3, MoreHorizontal } from \"lucide-react\";\n\nexport default function Clients() {\n  const [, setLocation] = useLocation();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n\n  const { data: clients = [], isLoading } = useQuery<ClientWithBonds[]>({\n    queryKey: [\"/api/clients/with-bonds\", { search: searchTerm, status: statusFilter }],\n    queryFn: () => api.getClientsWithBonds(),\n  });\n\n  // Filter clients based on search term and status\n  const filteredClients = clients.filter((client) => {\n    const matchesSearch = !searchTerm || \n      client.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      client.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      client.phone.includes(searchTerm) ||\n      (client.email && client.email.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = !statusFilter || statusFilter === \"all\" || client.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-active\">Active</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\" data-testid=\"badge-inactive\">Inactive</Badge>;\n      case \"high_risk\":\n        return <Badge className=\"bg-amber-100 text-amber-800\" data-testid=\"badge-high-risk\">High Risk</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{status}</Badge>;\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"Never\";\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Client Management\"\n        subtitle=\"Manage client information and relationships\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">Client Management</h3>\n            <p className=\"text-muted-foreground\">Manage client information and relationships</p>\n          </div>\n          <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-client\">\n            <i className=\"fas fa-plus mr-2\"></i>Add New Client\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Search</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Name, phone, email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-clients\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Status</label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    <SelectItem value=\"high_risk\">High Risk</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Date Range</label>\n                <Input type=\"date\" data-testid=\"input-date-range\" />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setStatusFilter(\"\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>Clear Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Clients Table */}\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Client Information</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Total Bonds</TableHead>\n                  <TableHead>Last Activity</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Skeleton className=\"w-10 h-10 rounded-full\" />\n                          <div>\n                            <Skeleton className=\"h-4 w-24 mb-1\" />\n                            <Skeleton className=\"h-3 w-20\" />\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Skeleton className=\"h-4 w-20 mb-1\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-6\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                          <Skeleton className=\"h-4 w-4\" />\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredClients.length > 0 ? (\n                  filteredClients.map((client) => (\n                    <TableRow key={client.id} className=\"hover:bg-muted/50\" data-testid={`client-row-${client.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                            <span className=\"text-primary-foreground font-medium\">\n                              {getInitials(client.firstName, client.lastName)}\n                            </span>\n                          </div>\n                          <div>\n                            <button \n                              className=\"text-sm font-medium text-foreground hover:text-primary cursor-pointer text-left\" \n                              data-testid={`client-name-${client.id}`}\n                              onClick={() => setLocation(`/clients/${client.id}`)}\n                            >\n                              {client.firstName} {client.lastName}\n                            </button>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Client since {formatDate(client.createdAt)}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-foreground\" data-testid={`client-phone-${client.id}`}>\n                          {client.phone}\n                        </div>\n                        {client.email && (\n                          <div className=\"text-sm text-muted-foreground\" data-testid={`client-email-${client.id}`}>\n                            {client.email}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(client.status)}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-foreground\" data-testid={`client-bonds-${client.id}`}>\n                        {client.totalBonds}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {formatDate(client.lastBondDate)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\"\n                            size=\"sm\"\n                            title=\"View Details\"\n                            data-testid={`button-view-${client.id}`}\n                            onClick={() => setLocation(`/clients/${client.id}`)}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\"\n                            size=\"sm\"\n                            title=\"Edit\"\n                            data-testid={`button-edit-${client.id}`}\n                          >\n                            <Edit3 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\"\n                            size=\"sm\"\n                            title=\"More Options\"\n                            data-testid={`button-options-${client.id}`}\n                          >\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <div className=\"text-muted-foreground\">\n                        {searchTerm || statusFilter ? (\n                          <>\n                            <i className=\"fas fa-search text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No clients found</p>\n                            <p className=\"text-sm\">Try adjusting your search criteria</p>\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-users text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No clients yet</p>\n                            <p className=\"text-sm\">Add your first client to get started</p>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          {filteredClients.length > 0 && (\n            <div className=\"px-6 py-3 border-t border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {filteredClients.length} of {clients.length} results\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      <AddClientModal\n        open={showAddModal}\n        onOpenChange={setShowAddModal}\n      />\n    </div>\n  );\n}\n","size_bytes":13563},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { AISearch } from \"@/components/ui/ai-search\";\nimport { ClientCheckin } from \"@/components/ui/client-checkin\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { api } from \"@/lib/api\";\nimport { DashboardStats, RecentActivity, CourtDate } from \"@/lib/types\";\n\nexport default function Dashboard() {\n  const { t } = useLanguage();\n  \n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: api.getDashboardStats,\n  });\n\n  const { data: recentActivity = [], isLoading: activityLoading } = useQuery<RecentActivity[]>({\n    queryKey: [\"/api/dashboard/recent-activity\"],\n    queryFn: () => api.getRecentActivity(10),\n  });\n\n  const { data: courtDates = [], isLoading: courtDatesLoading } = useQuery<CourtDate[]>({\n    queryKey: [\"/api/dashboard/upcoming-court-dates\"],\n    queryFn: () => api.getUpcomingCourtDates(10),\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const getActivityIcon = (action: string) => {\n    switch (action.toLowerCase()) {\n      case 'create':\n      case 'created':\n        return \"fas fa-plus text-blue-600\";\n      case 'payment':\n      case 'paid':\n        return \"fas fa-check text-green-600\";\n      case 'reminder':\n      case 'alert':\n        return \"fas fa-exclamation text-amber-600\";\n      default:\n        return \"fas fa-info text-gray-600\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric',\n      });\n    } catch {\n      return dateString;\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true,\n      });\n    } catch {\n      return '';\n    }\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title={t('dashboard.title')}\n        subtitle={t('dashboard.overview')}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* AI Search and Client Check-in */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <AISearch />\n          <ClientCheckin />\n        </div>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-active-bonds\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Active Bonds</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-16 mt-1\" />\n                  ) : (\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-active-bonds\">\n                      {stats?.activeBonds || 0}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-handshake text-blue-600 text-xl\"></i>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center\">\n                <span className=\"text-green-600 text-sm font-medium\">+12%</span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Total Revenue</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-24 mt-1\" />\n                  ) : (\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-total-revenue\">\n                      {formatCurrency(stats?.totalRevenue || 0)}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-dollar-sign text-green-600 text-xl\"></i>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center\">\n                <span className=\"text-green-600 text-sm font-medium\">+8%</span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-payments\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Pending Payments</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20 mt-1\" />\n                  ) : (\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-pending-payments\">\n                      {formatCurrency(stats?.pendingPayments || 0)}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-amber-600 text-xl\"></i>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center\">\n                <span className=\"text-destructive text-sm font-medium\">-3%</span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-court-dates\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Court Dates</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-12 mt-1\" />\n                  ) : (\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-court-dates\">\n                      {stats?.upcomingCourtDates || 0}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-calendar text-purple-600 text-xl\"></i>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center\">\n                <span className=\"text-muted-foreground text-sm\">Next: {courtDates[0] ? formatDate(courtDates[0].courtDate) : 'None scheduled'}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Recent Activity */}\n          <Card data-testid=\"recent-activity-card\">\n            <CardHeader>\n              <CardTitle>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityLoading ? (\n                  Array.from({ length: 3 }).map((_, i) => (\n                    <div key={i} className=\"flex items-start space-x-3\">\n                      <Skeleton className=\"w-8 h-8 rounded-full\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-3/4 mb-1\" />\n                        <Skeleton className=\"h-3 w-1/2\" />\n                      </div>\n                    </div>\n                  ))\n                ) : recentActivity.length > 0 ? (\n                  recentActivity.map((activity) => (\n                    <div key={activity.id} className=\"flex items-start space-x-3\" data-testid={`activity-${activity.id}`}>\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <i className={getActivityIcon(activity.action)} style={{ fontSize: '14px' }}></i>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm text-foreground\">\n                          {activity.action} for{' '}\n                          <span className=\"font-medium\">\n                            {activity.firstName} {activity.lastName}\n                          </span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatDate(activity.createdAt)}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-sm\">No recent activity</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Court Dates */}\n          <Card data-testid=\"court-dates-card\">\n            <CardHeader>\n              <CardTitle>Upcoming Court Dates</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {courtDatesLoading ? (\n                  Array.from({ length: 3 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full rounded-lg\" />\n                  ))\n                ) : courtDates.length > 0 ? (\n                  courtDates.map((courtDate, index) => (\n                    <div\n                      key={courtDate.id}\n                      className={`flex items-center justify-between p-4 bg-secondary/10 border border-border rounded-lg mb-3 ${\n                        index !== courtDates.length - 1 ? 'border-b' : ''\n                      }`}\n                      data-testid={`court-date-${courtDate.id}`}\n                      style={{ marginBottom: index !== courtDates.length - 1 ? '12px' : '0' }}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-semibold text-foreground mb-1\">\n                          {courtDate.firstName} {courtDate.lastName}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Case #{courtDate.caseNumber}\n                        </p>\n                      </div>\n                      <div className=\"text-right flex-shrink-0 ml-4\">\n                        <p className=\"text-sm font-semibold text-foreground mb-1\">\n                          {formatDate(courtDate.courtDate)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatTime(courtDate.courtDate)}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-sm\">No upcoming court dates</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Revenue Chart */}\n        <Card data-testid=\"revenue-chart-card\">\n          <CardHeader>\n            <CardTitle>Revenue Trends</CardTitle>\n            <CardDescription>Monthly revenue performance over time</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <RevenueChart />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12014},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { UploadDocumentModal } from \"@/components/modals/upload-document-modal\";\nimport { api } from \"@/lib/api\";\n\nexport default function Documents() {\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"\");\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n\n  const { data: documents = [], isLoading } = useQuery({\n    queryKey: [\"/api/documents\", { category: categoryFilter }],\n    queryFn: () => api.getDocuments({ category: categoryFilter }),\n  });\n\n  // Calculate document statistics by category\n  const documentStats = {\n    contracts: documents.filter((d: any) => d.category === 'contract').length,\n    courtPapers: documents.filter((d: any) => d.category === 'court_papers').length,\n    identification: documents.filter((d: any) => d.category === 'identification').length,\n    financial: documents.filter((d: any) => d.category === 'financial').length,\n  };\n\n  const filteredDocuments = categoryFilter && categoryFilter !== \"all\"\n    ? documents.filter((doc: any) => doc.category === categoryFilter)\n    : documents;\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"contract\":\n        return \"fas fa-file-contract text-blue-600\";\n      case \"court_papers\":\n        return \"fas fa-gavel text-purple-600\";\n      case \"identification\":\n        return \"fas fa-id-card text-green-600\";\n      case \"financial\":\n        return \"fas fa-receipt text-amber-600\";\n      default:\n        return \"fas fa-file text-gray-600\";\n    }\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType?.includes('pdf')) return \"fas fa-file-pdf text-red-600\";\n    if (mimeType?.includes('image')) return \"fas fa-file-image text-green-600\";\n    if (mimeType?.includes('word')) return \"fas fa-file-word text-blue-600\";\n    return \"fas fa-file text-gray-600\";\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getCategoryLabel = (category: string) => {\n    switch (category) {\n      case \"contract\":\n        return \"Contract\";\n      case \"court_papers\":\n        return \"Court Papers\";\n      case \"identification\":\n        return \"Identification\";\n      case \"financial\":\n        return \"Financial\";\n      default:\n        return category;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Document Management\"\n        subtitle=\"Manage contracts, court papers, and client documents\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">Document Management</h3>\n            <p className=\"text-muted-foreground\">Manage contracts, court papers, and client documents</p>\n          </div>\n          <Button \n            data-testid=\"button-upload-document\"\n            onClick={() => setUploadModalOpen(true)}\n          >\n            <i className=\"fas fa-upload mr-2\"></i>Upload Document\n          </Button>\n        </div>\n\n        {/* Document Categories */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-contracts\" className=\"cursor-pointer hover:bg-accent transition-colors\" onClick={() => setCategoryFilter(categoryFilter === 'contract' ? '' : 'contract')}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-file-contract text-blue-600 text-xl\"></i>\n              </div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">Contracts</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-contracts\">\n                {documentStats.contracts}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-court-papers\" className=\"cursor-pointer hover:bg-accent transition-colors\" onClick={() => setCategoryFilter(categoryFilter === 'court_papers' ? '' : 'court_papers')}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-gavel text-purple-600 text-xl\"></i>\n              </div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">Court Papers</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-court-papers\">\n                {documentStats.courtPapers}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-identification\" className=\"cursor-pointer hover:bg-accent transition-colors\" onClick={() => setCategoryFilter(categoryFilter === 'identification' ? '' : 'identification')}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-id-card text-green-600 text-xl\"></i>\n              </div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">Identification</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-identification\">\n                {documentStats.identification}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-financial-docs\" className=\"cursor-pointer hover:bg-accent transition-colors\" onClick={() => setCategoryFilter(categoryFilter === 'financial' ? '' : 'financial')}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-receipt text-amber-600 text-xl\"></i>\n              </div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">Financial</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"value-financial-docs\">\n                {documentStats.financial}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Document List */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {categoryFilter ? `${getCategoryLabel(categoryFilter)} Documents` : 'Recent Documents'}\n              </CardTitle>\n              <div className=\"flex space-x-2\">\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"contract\">Contracts</SelectItem>\n                    <SelectItem value=\"court_papers\">Court Papers</SelectItem>\n                    <SelectItem value=\"identification\">Identification</SelectItem>\n                    <SelectItem value=\"financial\">Financial</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"w-10 h-10 rounded-lg\" />\n                      <div>\n                        <Skeleton className=\"h-4 w-48 mb-1\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Skeleton className=\"h-4 w-4\" />\n                      <Skeleton className=\"h-4 w-4\" />\n                      <Skeleton className=\"h-4 w-4\" />\n                    </div>\n                  </div>\n                ))\n              ) : filteredDocuments.length > 0 ? (\n                filteredDocuments.map((document: any) => (\n                  <div\n                    key={document.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                    data-testid={`document-row-${document.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center\">\n                        <i className={getFileIcon(document.mimeType)}></i>\n                      </div>\n                      <div>\n                        <h5 className=\"text-sm font-medium text-foreground\" data-testid={`document-name-${document.id}`}>\n                          {document.originalName}\n                        </h5>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {getCategoryLabel(document.category)} • Uploaded {formatDate(document.createdAt)} • {formatFileSize(document.fileSize)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button \n                        className=\"text-primary hover:text-primary/80\" \n                        title=\"View\"\n                        data-testid={`button-view-${document.id}`}\n                      >\n                        <i className=\"fas fa-eye\"></i>\n                      </button>\n                      <button \n                        className=\"text-muted-foreground hover:text-foreground\" \n                        title=\"Download\"\n                        data-testid={`button-download-${document.id}`}\n                      >\n                        <i className=\"fas fa-download\"></i>\n                      </button>\n                      <button \n                        className=\"text-muted-foreground hover:text-foreground\" \n                        title=\"Share\"\n                        data-testid={`button-share-${document.id}`}\n                      >\n                        <i className=\"fas fa-share\"></i>\n                      </button>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-muted-foreground\">\n                    {categoryFilter ? (\n                      <>\n                        <i className={`${getCategoryIcon(categoryFilter)} text-4xl mb-4 block opacity-50`}></i>\n                        <p className=\"text-lg mb-2\">No {getCategoryLabel(categoryFilter).toLowerCase()} documents found</p>\n                        <p className=\"text-sm\">Upload your first {getCategoryLabel(categoryFilter).toLowerCase()} document to get started</p>\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-file-alt text-4xl mb-4 block opacity-50\"></i>\n                        <p className=\"text-lg mb-2\">No documents yet</p>\n                        <p className=\"text-sm\">Upload your first document to get started</p>\n                      </>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upload Document Modal */}\n      <UploadDocumentModal\n        open={uploadModalOpen}\n        onOpenChange={setUploadModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":12670},"client/src/pages/financial.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { api } from \"@/lib/api\";\nimport { FinancialSummary } from \"@/lib/types\";\nimport { insertPaymentSchema, InsertPayment } from \"@shared/schema\";\n\nexport default function Financial() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"\");\n  const [showRecordPaymentModal, setShowRecordPaymentModal] = useState(false);\n\n  const { data: financialSummary, isLoading: summaryLoading } = useQuery<FinancialSummary>({\n    queryKey: [\"/api/financial/summary\"],\n    queryFn: () => api.getFinancialSummary(),\n  });\n\n  const { data: payments = [], isLoading: paymentsLoading } = useQuery({\n    queryKey: [\"/api/payments\"],\n    queryFn: () => api.getPayments(),\n  });\n\n  // Filter payments based on search term and type\n  const filteredPayments = payments.filter((payment: any) => {\n    const matchesSearch = !searchTerm || \n      payment.transactionId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (payment.clientName && payment.clientName.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesType = !typeFilter || typeFilter === \"all\" || payment.paymentType === typeFilter;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-completed\">Completed</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-amber-100 text-amber-800\" data-testid=\"badge-pending\">Pending</Badge>;\n      case \"failed\":\n        return <Badge className=\"bg-red-100 text-red-800\" data-testid=\"badge-failed\">Failed</Badge>;\n      case \"refunded\":\n        return <Badge className=\"bg-gray-100 text-gray-800\" data-testid=\"badge-refunded\">Refunded</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentTypeLabel = (type: string) => {\n    switch (type) {\n      case \"premium\":\n        return \"Premium Payment\";\n      case \"collateral_return\":\n        return \"Collateral Return\";\n      case \"fee\":\n        return \"Fee\";\n      default:\n        return type;\n    }\n  };\n\n  const { toast } = useToast();\n  \n  // Get clients and bonds for dropdowns\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  const { data: bonds = [] } = useQuery({\n    queryKey: [\"/api/bonds\"],\n    queryFn: () => api.getBonds(),\n  });\n\n  const form = useForm<InsertPayment>({\n    resolver: zodResolver(insertPaymentSchema),\n    defaultValues: {\n      transactionId: `TXN-${Date.now()}`,\n      bondId: \"\",\n      clientId: \"\",\n      amount: \"\",\n      paymentType: \"premium\",\n      paymentMethod: \"cash\",\n      status: \"completed\",\n      paymentDate: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    },\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: (data: InsertPayment) => api.createPayment(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/financial/summary\"] });\n      toast({\n        title: \"Payment Recorded\",\n        description: \"Payment has been successfully recorded.\",\n      });\n      setShowRecordPaymentModal(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRecordPayment = () => {\n    setShowRecordPaymentModal(true);\n  };\n\n  const handleExportReport = () => {\n    // TODO: Implement export functionality\n    console.log('Export report clicked');\n  };\n\n  const onSubmitPayment = (data: InsertPayment) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Financial Management\"\n        subtitle=\"Track payments, fees, and financial reporting\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">Financial Management</h3>\n            <p className=\"text-muted-foreground\">Track payments, fees, and financial reporting</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"secondary\" onClick={handleExportReport} data-testid=\"button-export-report\">\n              <i className=\"fas fa-download mr-2\"></i>Export Report\n            </Button>\n            <Button onClick={handleRecordPayment} data-testid=\"button-record-payment\">\n              <i className=\"fas fa-plus mr-2\"></i>Record Payment\n            </Button>\n          </div>\n        </div>\n\n        {/* Financial Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card data-testid=\"stat-monthly-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Revenue This Month</h4>\n                <i className=\"fas fa-arrow-up text-green-600\"></i>\n              </div>\n              {summaryLoading ? (\n                <Skeleton className=\"h-8 w-24 mb-2\" />\n              ) : (\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-monthly-revenue\">\n                  {formatCurrency(financialSummary?.monthlyRevenue || 0)}\n                </p>\n              )}\n              <p className=\"text-sm text-green-600 mt-2\">+12.5% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-outstanding-payments\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Outstanding Payments</h4>\n                <i className=\"fas fa-clock text-amber-600\"></i>\n              </div>\n              {summaryLoading ? (\n                <Skeleton className=\"h-8 w-20 mb-2\" />\n              ) : (\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-outstanding\">\n                  {formatCurrency(financialSummary?.outstanding || 0)}\n                </p>\n              )}\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {payments.filter((p: any) => p.status === 'pending').length} pending payments\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-collection-rate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Collection Rate</h4>\n                <i className=\"fas fa-percentage text-primary\"></i>\n              </div>\n              {summaryLoading ? (\n                <Skeleton className=\"h-8 w-16 mb-2\" />\n              ) : (\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"value-collection-rate\">\n                  {financialSummary?.collectionRate || 0}%\n                </p>\n              )}\n              <p className=\"text-sm text-green-600 mt-2\">Above industry average</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Revenue Chart */}\n        <Card className=\"mb-8\" data-testid=\"revenue-chart-card\">\n          <CardHeader>\n            <CardTitle>Revenue Trends</CardTitle>\n            <CardDescription>Monthly revenue performance over time</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <RevenueChart />\n          </CardContent>\n        </Card>\n\n        {/* Payment History Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Search</label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Transaction ID, client...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-payments\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Payment Type</label>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger data-testid=\"select-type-filter\">\n                    <SelectValue placeholder=\"All Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"premium\">Premium Payment</SelectItem>\n                    <SelectItem value=\"collateral_return\">Collateral Return</SelectItem>\n                    <SelectItem value=\"fee\">Fee</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Date Range</label>\n                <Input type=\"date\" data-testid=\"input-date-range\" />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setTypeFilter(\"\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>Clear Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment History Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions</CardTitle>\n          </CardHeader>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Transaction ID</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {paymentsLoading ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-4\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredPayments.length > 0 ? (\n                  filteredPayments.map((payment: any) => (\n                    <TableRow key={payment.id} className=\"hover:bg-muted/50\" data-testid={`payment-row-${payment.id}`}>\n                      <TableCell className=\"text-sm font-medium text-foreground\" data-testid={`payment-id-${payment.id}`}>\n                        {payment.transactionId}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-foreground\">\n                        {payment.clientName || \"Unknown Client\"}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-foreground\">\n                        {getPaymentTypeLabel(payment.paymentType)}\n                      </TableCell>\n                      <TableCell className=\"text-sm font-medium text-foreground\">\n                        {formatCurrency(payment.amount)}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {formatDate(payment.paymentDate)}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(payment.status)}\n                      </TableCell>\n                      <TableCell>\n                        <button \n                          className=\"text-primary hover:text-primary/80\" \n                          title=\"View Receipt\"\n                          data-testid={`button-receipt-${payment.id}`}\n                        >\n                          <i className=\"fas fa-receipt\"></i>\n                        </button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      <div className=\"text-muted-foreground\">\n                        {searchTerm || typeFilter ? (\n                          <>\n                            <i className=\"fas fa-search text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No payments found</p>\n                            <p className=\"text-sm\">Try adjusting your search criteria</p>\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-dollar-sign text-4xl mb-4 block opacity-50\"></i>\n                            <p className=\"text-lg mb-2\">No payments yet</p>\n                            <p className=\"text-sm\">Record your first payment to get started</p>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          {filteredPayments.length > 0 && (\n            <div className=\"px-6 py-3 border-t border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {filteredPayments.length} of {payments.length} results\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      {/* Record Payment Modal */}\n      <Dialog open={showRecordPaymentModal} onOpenChange={setShowRecordPaymentModal}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n            <DialogDescription>\n              Record a new payment transaction\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitPayment)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"transactionId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Transaction ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-transaction-id\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"clientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Client</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-client\">\n                          <SelectValue placeholder=\"Select client\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {clients.map((client: any) => (\n                          <SelectItem key={client.id} value={client.id}>\n                            {client.firstName} {client.lastName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"bondId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bond</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-bond\">\n                          <SelectValue placeholder=\"Select bond\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {bonds.map((bond: any) => (\n                          <SelectItem key={bond.id} value={bond.id}>\n                            {bond.bondNumber}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Amount</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\"\n                        data-testid=\"input-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"premium\">Premium Payment</SelectItem>\n                        <SelectItem value=\"collateral_return\">Collateral Return</SelectItem>\n                        <SelectItem value=\"fee\">Fee</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Method</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-method\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"check\">Check</SelectItem>\n                        <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                        <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Date</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"date\" data-testid=\"input-payment-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Additional notes...\" data-testid=\"input-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowRecordPaymentModal(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createPaymentMutation.isPending}\n                  data-testid=\"button-submit-payment\"\n                >\n                  {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":24158},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { RevenueChart } from \"@/components/charts/revenue-chart\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport { api } from \"@/lib/api\";\n\nexport default function Reports() {\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: api.getDashboardStats,\n  });\n\n  const { data: financialSummary, isLoading: financialLoading } = useQuery({\n    queryKey: [\"/api/financial/summary\"],\n    queryFn: api.getFinancialSummary,\n  });\n\n  const { data: bonds = [] } = useQuery({\n    queryKey: [\"/api/bonds\"],\n    queryFn: () => api.getBonds(),\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  // Calculate performance metrics\n  const performanceMetrics = {\n    bondsCreated: bonds.length,\n    revenue: financialSummary?.monthlyRevenue || 0,\n    successRate: bonds.length > 0 ? ((bonds.filter((b: any) => b.status === 'completed').length / bonds.length) * 100).toFixed(1) : '0.0',\n  };\n\n  // Calculate client analytics\n  const clientAnalytics = {\n    newClients: clients.filter((c: any) => {\n      const createdDate = new Date(c.createdAt);\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      return createdDate > thirtyDaysAgo;\n    }).length,\n    repeatClients: 8, // This would need to be calculated based on multiple bonds per client\n    retention: financialSummary?.collectionRate || 0,\n  };\n\n  // Prepare bond status distribution data for pie chart\n  const bondStatusData = [\n    { name: 'Active', value: bonds.filter((b: any) => b.status === 'active').length, color: '#3B82F6' },\n    { name: 'Completed', value: bonds.filter((b: any) => b.status === 'completed').length, color: '#10B981' },\n    { name: 'At Risk', value: bonds.filter((b: any) => b.status === 'at_risk').length, color: '#F59E0B' },\n    { name: 'Forfeited', value: bonds.filter((b: any) => b.status === 'forfeited').length, color: '#EF4444' },\n  ].filter(item => item.value > 0);\n\n  // Risk assessment data\n  const riskData = [\n    { name: 'Low Risk', value: 78, color: '#10B981' },\n    { name: 'Medium Risk', value: 18, color: '#F59E0B' },\n    { name: 'High Risk', value: 4, color: '#EF4444' },\n  ];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Reports & Analytics\"\n        subtitle=\"Business insights and performance metrics\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">Reports & Analytics</h3>\n            <p className=\"text-muted-foreground\">Business insights and performance metrics</p>\n          </div>\n          <Button data-testid=\"button-generate-report\">\n            <i className=\"fas fa-file-export mr-2\"></i>Generate Report\n          </Button>\n        </div>\n\n        {/* Report Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          <Card data-testid=\"card-monthly-performance\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Monthly Performance</h4>\n                <i className=\"fas fa-chart-line text-primary\"></i>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Bonds Created</span>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-4 w-8\" />\n                  ) : (\n                    <span className=\"text-sm font-medium text-foreground\" data-testid=\"value-bonds-created\">\n                      {performanceMetrics.bondsCreated}\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Revenue</span>\n                  {financialLoading ? (\n                    <Skeleton className=\"h-4 w-16\" />\n                  ) : (\n                    <span className=\"text-sm font-medium text-foreground\" data-testid=\"value-performance-revenue\">\n                      {formatCurrency(performanceMetrics.revenue)}\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Success Rate</span>\n                  <span className=\"text-sm font-medium text-green-600\" data-testid=\"value-success-rate\">\n                    {performanceMetrics.successRate}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-client-analytics\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Client Analytics</h4>\n                <i className=\"fas fa-users text-primary\"></i>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">New Clients</span>\n                  <span className=\"text-sm font-medium text-foreground\" data-testid=\"value-new-clients\">\n                    {clientAnalytics.newClients}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Repeat Clients</span>\n                  <span className=\"text-sm font-medium text-foreground\" data-testid=\"value-repeat-clients\">\n                    {clientAnalytics.repeatClients}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Client Retention</span>\n                  <span className=\"text-sm font-medium text-green-600\" data-testid=\"value-client-retention\">\n                    {clientAnalytics.retention}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-risk-assessment\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-lg font-semibold text-foreground\">Risk Assessment</h4>\n                <i className=\"fas fa-shield-alt text-primary\"></i>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Low Risk</span>\n                  <span className=\"text-sm font-medium text-green-600\" data-testid=\"value-low-risk\">78%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Medium Risk</span>\n                  <span className=\"text-sm font-medium text-amber-600\" data-testid=\"value-medium-risk\">18%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">High Risk</span>\n                  <span className=\"text-sm font-medium text-red-600\" data-testid=\"value-high-risk\">4%</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card data-testid=\"card-revenue-trends\">\n            <CardHeader>\n              <CardTitle>Revenue Trends</CardTitle>\n              <CardDescription>Monthly revenue performance over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart />\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-bond-status-distribution\">\n            <CardHeader>\n              <CardTitle>Bond Status Distribution</CardTitle>\n              <CardDescription>Current distribution of bond statuses</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                {bondStatusData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={bondStatusData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}`}\n                      >\n                        {bondStatusData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-chart-pie text-4xl mb-4 opacity-50\"></i>\n                      <p>No bond data available</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Risk Assessment Chart */}\n        <Card data-testid=\"card-risk-breakdown\">\n          <CardHeader>\n            <CardTitle>Risk Assessment Breakdown</CardTitle>\n            <CardDescription>Distribution of client risk levels</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={riskData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-border\" />\n                  <XAxis \n                    dataKey=\"name\" \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                  />\n                  <YAxis \n                    className=\"text-muted-foreground\"\n                    fontSize={12}\n                    tickFormatter={(value) => `${value}%`}\n                  />\n                  <Tooltip\n                    formatter={(value: number) => [`${value}%`, 'Percentage']}\n                    labelStyle={{ color: 'hsl(var(--foreground))' }}\n                    contentStyle={{\n                      backgroundColor: 'hsl(var(--card))',\n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '8px',\n                    }}\n                  />\n                  <Bar dataKey=\"value\" radius={[4, 4, 0, 0]}>\n                    {riskData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12051},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { api } from \"@/lib/api\";\nimport { User } from \"@shared/schema\";\n\nexport default function Settings() {\n  const [activeCategory, setActiveCategory] = useState(\"users\");\n  const [showAddUserModal, setShowAddUserModal] = useState(false);\n\n  // Fetch real user data from API\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    queryFn: () => api.getUsers(),\n  });\n\n  const settingsCategories = [\n    { id: \"users\", icon: \"fas fa-users\", label: \"User Management\" },\n    { id: \"system\", icon: \"fas fa-cog\", label: \"System Settings\" },\n    { id: \"notifications\", icon: \"fas fa-bell\", label: \"Notifications\" },\n    { id: \"api\", icon: \"fas fa-key\", label: \"API Configuration\" },\n    { id: \"export\", icon: \"fas fa-file-export\", label: \"Data Export\" },\n  ];\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-admin\">Admin</Badge>;\n      case \"agent\":\n        return <Badge className=\"bg-blue-100 text-blue-800\" data-testid=\"badge-agent\">Agent</Badge>;\n      case \"staff\":\n        return <Badge className=\"bg-gray-100 text-gray-800\" data-testid=\"badge-staff\">Staff</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">{role}</Badge>;\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const renderUserManagement = () => (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>User Management</CardTitle>\n          <Button data-testid=\"button-add-user\" onClick={() => setShowAddUserModal(true)}>\n            <i className=\"fas fa-plus mr-2\"></i>Add User\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {users.map((user) => (\n            <div\n              key={user.id}\n              className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n              data-testid={`user-row-${user.id}`}\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground font-medium\">\n                    {getInitials(user.firstName, user.lastName)}\n                  </span>\n                </div>\n                <div>\n                  <h5 className=\"text-sm font-medium text-foreground\" data-testid={`user-name-${user.id}`}>\n                    {user.firstName} {user.lastName}\n                  </h5>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`user-email-${user.id}`}>\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                {getRoleBadge(user.role)}\n                <div className=\"flex space-x-2\">\n                  <button \n                    className=\"text-muted-foreground hover:text-foreground\" \n                    title=\"Edit\"\n                    data-testid={`button-edit-user-${user.id}`}\n                  >\n                    <i className=\"fas fa-edit\"></i>\n                  </button>\n                  <button \n                    className=\"text-destructive hover:text-destructive/80\" \n                    title=\"Delete\"\n                    data-testid={`button-delete-user-${user.id}`}\n                  >\n                    <i className=\"fas fa-trash\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderSystemSettings = () => (\n    <Card data-testid=\"card-system-settings\">\n      <CardHeader>\n        <CardTitle>System Settings</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"p-4 border border-border rounded-lg\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Default Premium Rate</h5>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Default percentage rate applied to new bonds\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <input type=\"number\" defaultValue=\"10\" className=\"w-20 px-2 py-1 border border-input rounded text-sm\" />\n                <span className=\"text-sm\">%</span>\n                <Button size=\"sm\" variant=\"outline\">Update</Button>\n              </div>\n            </div>\n\n            <div className=\"p-4 border border-border rounded-lg\">\n              <h5 className=\"text-sm font-medium text-foreground mb-2\">Business Hours</h5>\n              <p className=\"text-xs text-muted-foreground mb-3\">\n                Operating hours for the business\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <input type=\"time\" defaultValue=\"08:00\" className=\"px-2 py-1 border border-input rounded text-sm\" />\n                <span className=\"text-sm\">to</span>\n                <input type=\"time\" defaultValue=\"18:00\" className=\"px-2 py-1 border border-input rounded text-sm\" />\n                <Button size=\"sm\" variant=\"outline\">Update</Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-4 border border-border rounded-lg\">\n            <h5 className=\"text-sm font-medium text-foreground mb-2\">Company Information</h5>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Update company details for contracts and documents\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <input type=\"text\" placeholder=\"Company Name\" className=\"px-3 py-2 border border-input rounded text-sm\" />\n              <input type=\"text\" placeholder=\"License Number\" className=\"px-3 py-2 border border-input rounded text-sm\" />\n              <input type=\"text\" placeholder=\"Phone Number\" className=\"px-3 py-2 border border-input rounded text-sm\" />\n              <input type=\"email\" placeholder=\"Email Address\" className=\"px-3 py-2 border border-input rounded text-sm\" />\n            </div>\n            <Button className=\"mt-3\">Save Changes</Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderNotifications = () => (\n    <Card data-testid=\"card-notifications\">\n      <CardHeader>\n        <CardTitle>Notification Settings</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {[\n            { id: \"court-reminders\", label: \"Court Date Reminders\", description: \"Send reminders 24 hours before court dates\" },\n            { id: \"payment-due\", label: \"Payment Due Notifications\", description: \"Notify when payments are due or overdue\" },\n            { id: \"bond-status\", label: \"Bond Status Changes\", description: \"Alert when bond status changes\" },\n            { id: \"new-clients\", label: \"New Client Notifications\", description: \"Notify when new clients are added\" },\n            { id: \"system-alerts\", label: \"System Alerts\", description: \"Important system notifications and updates\" },\n          ].map((notification) => (\n            <div key={notification.id} className=\"flex items-center justify-between p-3 border border-border rounded-lg\">\n              <div>\n                <h5 className=\"text-sm font-medium text-foreground\">{notification.label}</h5>\n                <p className=\"text-xs text-muted-foreground\">{notification.description}</p>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" defaultChecked className=\"sr-only peer\" />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary\"></div>\n              </label>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderApiConfiguration = () => (\n    <Card data-testid=\"card-api-config\">\n      <CardHeader>\n        <CardTitle>API Configuration</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"p-4 border border-border rounded-lg\">\n            <h5 className=\"text-sm font-medium text-foreground mb-2\">Gibson AI API</h5>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Configuration for the Gibson AI integration\n            </p>\n            <div className=\"space-y-2\">\n              <div>\n                <label className=\"text-xs text-muted-foreground\">API Endpoint</label>\n                <input \n                  type=\"text\" \n                  defaultValue=\"https://api.gibsonai.com\" \n                  className=\"w-full px-3 py-2 border border-input rounded text-sm mt-1\" \n                  readOnly \n                />\n              </div>\n              <div>\n                <label className=\"text-xs text-muted-foreground\">API Key Status</label>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge className=\"bg-green-100 text-green-800\">Connected</Badge>\n                  <Button size=\"sm\" variant=\"outline\">Test Connection</Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-4 border border-border rounded-lg\">\n            <h5 className=\"text-sm font-medium text-foreground mb-2\">Rate Limiting</h5>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Configure API request limits\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <div>\n                <label className=\"text-xs text-muted-foreground\">Requests per minute</label>\n                <input type=\"number\" defaultValue=\"60\" className=\"w-full px-3 py-2 border border-input rounded text-sm mt-1\" />\n              </div>\n              <div>\n                <label className=\"text-xs text-muted-foreground\">Burst limit</label>\n                <input type=\"number\" defaultValue=\"100\" className=\"w-full px-3 py-2 border border-input rounded text-sm mt-1\" />\n              </div>\n            </div>\n            <Button className=\"mt-3\" size=\"sm\">Update Limits</Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderDataExport = () => (\n    <Card data-testid=\"card-data-export\">\n      <CardHeader>\n        <CardTitle>Data Export</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {[\n            { id: \"clients\", label: \"Client Data\", description: \"Export all client information and contact details\" },\n            { id: \"bonds\", label: \"Bond Records\", description: \"Export bond history and payment information\" },\n            { id: \"cases\", label: \"Case Information\", description: \"Export court cases and legal proceedings\" },\n            { id: \"financial\", label: \"Financial Reports\", description: \"Export payment history and financial summaries\" },\n            { id: \"documents\", label: \"Document Registry\", description: \"Export document metadata and file information\" },\n          ].map((exportType) => (\n            <div key={exportType.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n              <div>\n                <h5 className=\"text-sm font-medium text-foreground\">{exportType.label}</h5>\n                <p className=\"text-xs text-muted-foreground\">{exportType.description}</p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button size=\"sm\" variant=\"outline\" data-testid={`button-export-${exportType.id}`}>\n                  <i className=\"fas fa-download mr-1\"></i>CSV\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" data-testid={`button-export-json-${exportType.id}`}>\n                  <i className=\"fas fa-download mr-1\"></i>JSON\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-6 p-4 border border-border rounded-lg bg-muted/50\">\n          <h5 className=\"text-sm font-medium text-foreground mb-2\">Full System Backup</h5>\n          <p className=\"text-xs text-muted-foreground mb-3\">\n            Export complete system data including all records and configurations\n          </p>\n          <Button data-testid=\"button-full-backup\">\n            <i className=\"fas fa-database mr-2\"></i>Generate Full Backup\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderContent = () => {\n    switch (activeCategory) {\n      case \"users\":\n        return renderUserManagement();\n      case \"system\":\n        return renderSystemSettings();\n      case \"notifications\":\n        return renderNotifications();\n      case \"api\":\n        return renderApiConfiguration();\n      case \"export\":\n        return renderDataExport();\n      default:\n        return renderUserManagement();\n    }\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Settings\"\n        subtitle=\"System configuration and user management\"\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Settings Menu */}\n          <Card data-testid=\"settings-menu\">\n            <CardHeader>\n              <CardTitle>Settings Categories</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <nav className=\"space-y-2\">\n                {settingsCategories.map((category) => (\n                  <button\n                    key={category.id}\n                    onClick={() => setActiveCategory(category.id)}\n                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md text-left transition-colors ${\n                      activeCategory === category.id\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-foreground hover:bg-accent\"\n                    }`}\n                    data-testid={`nav-${category.id}`}\n                  >\n                    <i className={`${category.icon} w-5`}></i>\n                    <span>{category.label}</span>\n                  </button>\n                ))}\n              </nav>\n            </CardContent>\n          </Card>\n\n          {/* Settings Content */}\n          <div className=\"lg:col-span-2\">\n            {renderContent()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15373},"client/src/components/charts/revenue-chart.tsx":{"content":"import { useMemo } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\ninterface RevenueChartProps {\n  data?: any[];\n  className?: string;\n}\n\nexport function RevenueChart({ data = [], className = \"\" }: RevenueChartProps) {\n  // Generate sample data for demonstration since we don't have historical data\n  const chartData = useMemo(() => {\n    const months = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    \n    return months.map((month, index) => ({\n      month,\n      revenue: Math.floor(Math.random() * 50000) + 20000, // Random revenue between 20k-70k\n    }));\n  }, []);\n\n  return (\n    <div className={`h-64 w-full ${className}`}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-border\" />\n          <XAxis \n            dataKey=\"month\" \n            className=\"text-muted-foreground\"\n            fontSize={12}\n          />\n          <YAxis \n            className=\"text-muted-foreground\"\n            fontSize={12}\n            tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n          />\n          <Tooltip\n            formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n            labelStyle={{ color: 'hsl(var(--foreground))' }}\n            contentStyle={{\n              backgroundColor: 'hsl(var(--card))',\n              border: '1px solid hsl(var(--border))',\n              borderRadius: '8px',\n            }}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"revenue\" \n            stroke=\"hsl(var(--primary))\" \n            strokeWidth={2}\n            dot={{ fill: 'hsl(var(--primary))', strokeWidth: 2, r: 4 }}\n            activeDot={{ r: 6, fill: 'hsl(var(--primary))' }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":2011},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { LanguageSwitcher } from \"@/components/ui/language-switcher\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n  onNewBond?: () => void;\n  showNewBondButton?: boolean;\n}\n\nexport function Header({ title, subtitle, onNewBond, showNewBondButton = true }: HeaderProps) {\n  const { t } = useLanguage();\n  \n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">{title}</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"page-subtitle\">{subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder={t('search.placeholder')}\n              className=\"w-64\"\n              data-testid=\"global-search-input\"\n            />\n            <i className=\"fas fa-search absolute right-3 top-3 text-muted-foreground\"></i>\n          </div>\n          <LanguageSwitcher />\n          <button \n            className=\"relative p-2 text-muted-foreground hover:text-foreground\"\n            data-testid=\"notifications-button\"\n          >\n            <i className=\"fas fa-bell\"></i>\n            <span className=\"absolute top-0 right-0 w-2 h-2 bg-destructive rounded-full\"></span>\n          </button>\n          {showNewBondButton && (\n            <Button onClick={onNewBond} data-testid=\"new-bond-button\">\n              <i className=\"fas fa-plus mr-2\"></i>{t('bonds.addBond')}\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1831},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\ninterface SidebarProps {\n  currentUser?: {\n    firstName: string;\n    lastName: string;\n    role: string;\n  };\n}\n\nexport function Sidebar({ currentUser = { firstName: \"John\", lastName: \"Smith\", role: \"Bail Agent\" } }: SidebarProps) {\n  const [location] = useLocation();\n  \n  const navItems = [\n    { path: \"/\", icon: \"fas fa-tachometer-alt\", label: \"Dashboard\" },\n    { path: \"/clients\", icon: \"fas fa-users\", label: \"Client Management\" },\n    { path: \"/cases\", icon: \"fas fa-briefcase\", label: \"Case Management\" },\n    { path: \"/bonds\", icon: \"fas fa-handshake\", label: \"Bond Tracking\" },\n    { path: \"/financial\", icon: \"fas fa-dollar-sign\", label: \"Financial Management\" },\n    { path: \"/documents\", icon: \"fas fa-file-alt\", label: \"Document Management\" },\n    { path: \"/reports\", icon: \"fas fa-chart-bar\", label: \"Reports & Analytics\" },\n    { path: \"/agents\", icon: \"fas fa-user-shield\", label: \"Agents & Staff\" },\n    { path: \"/onboarding\", icon: \"fas fa-graduation-cap\", label: \"Training & Setup\" },\n    { path: \"/settings\", icon: \"fas fa-cog\", label: \"Settings\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex-shrink-0 flex flex-col h-full\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-shield-alt text-primary-foreground text-lg\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-foreground\">BailBond Pro</h1>\n            <p className=\"text-sm text-muted-foreground\">Management System</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"p-4 space-y-2 flex-1\">\n        {navItems.map((item) => (\n          <Link key={item.path} href={item.path}>\n            <div\n              data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              className={`flex items-center space-x-3 px-3 py-2 rounded-md transition-colors cursor-pointer ${\n                isActive(item.path)\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-foreground hover:bg-accent\"\n              }`}\n            >\n              <i className={`${item.icon} w-5`}></i>\n              <span>{item.label}</span>\n            </div>\n          </Link>\n        ))}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border bg-card\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <i className=\"fas fa-user text-secondary-foreground text-sm\"></i>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"user-name\">\n              {currentUser.firstName} {currentUser.lastName}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"user-role\">\n              {currentUser.role}\n            </p>\n          </div>\n          <button \n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"logout-button\"\n          >\n            <i className=\"fas fa-sign-out-alt\"></i>\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3555},"client/src/components/modals/add-bond-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\nconst bondSchema = z.object({\n  bondNumber: z.string().min(1, \"Bond number is required\"),\n  clientId: z.string().min(1, \"Client is required\"),\n  caseId: z.string().min(1, \"Case is required\"),\n  bondAmount: z.string().min(1, \"Bond amount is required\"),\n  premiumRate: z.string().min(1, \"Premium rate is required\"),\n  collateralAmount: z.string().optional(),\n  collateralDescription: z.string().optional(),\n  issueDate: z.string().min(1, \"Issue date is required\"),\n  agentId: z.string().nullable().optional(), // Nullable until auth is implemented\n  notes: z.string().optional(),\n}).refine(data => {\n  const bondAmount = parseFloat(data.bondAmount);\n  const premiumRate = parseFloat(data.premiumRate);\n  return !isNaN(bondAmount) && !isNaN(premiumRate);\n}, { message: \"Bond amount and premium rate must be valid numbers\" });\n\ntype BondFormData = z.infer<typeof bondSchema>;\n\ninterface AddBondModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddBondModal({ open, onOpenChange }: AddBondModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<BondFormData>({\n    resolver: zodResolver(bondSchema),\n    defaultValues: {\n      bondNumber: \"\",\n      clientId: \"\",\n      caseId: \"\",\n      bondAmount: \"\",\n      premiumRate: \"10.0\", // Default 10%\n      collateralAmount: \"\",\n      collateralDescription: \"\",\n      issueDate: new Date().toISOString().split('T')[0],\n      agentId: null,\n      notes: \"\",\n    },\n  });\n\n  // Fetch clients for dropdown\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  // Fetch cases for selected client\n  const selectedClientId = form.watch(\"clientId\");\n  const { data: cases = [] } = useQuery({\n    queryKey: [\"/api/cases\", selectedClientId],\n    queryFn: () => api.getCases({ clientId: selectedClientId }),\n    enabled: !!selectedClientId,\n  });\n\n  // Calculate premium amount when bond amount or rate changes\n  const bondAmount = form.watch(\"bondAmount\");\n  const premiumRate = form.watch(\"premiumRate\");\n  const premiumAmount = bondAmount && premiumRate \n    ? (parseFloat(bondAmount) * parseFloat(premiumRate) / 100).toFixed(2)\n    : \"0.00\";\n\n  const createBondMutation = useMutation({\n    mutationFn: (data: any) => {\n      const bondData = {\n        ...data,\n        bondAmount: parseFloat(data.bondAmount),\n        premiumAmount: parseFloat(premiumAmount),\n        premiumRate: parseFloat(data.premiumRate) / 100, // Convert percentage to decimal\n        collateralAmount: data.collateralAmount ? parseFloat(data.collateralAmount) : null,\n      };\n      return api.createBond(bondData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Bond created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bonds\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create bond\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BondFormData) => {\n    createBondMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"add-bond-modal-title\">Create New Bond</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"bondNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bond Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-bond-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"issueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Issue Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-issue-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"clientId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Client</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-client\">\n                        <SelectValue placeholder=\"Select client\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent \n                      className=\"z-[9999]\" \n                      position=\"popper\"\n                      sideOffset={5}\n                    >\n                      {clients.map((client: any) => (\n                        <SelectItem key={client.id} value={client.id} data-testid={`client-option-${client.id}`}>\n                          {client.firstName} {client.lastName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"caseId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Case</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClientId}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-case\">\n                        <SelectValue placeholder={!selectedClientId ? \"Select client first\" : \"Select case\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent \n                      className=\"z-[9999]\" \n                      position=\"popper\"\n                      sideOffset={5}\n                    >\n                      {cases.map((case_: any) => (\n                        <SelectItem key={case_.id} value={case_.id} data-testid={`case-option-${case_.id}`}>\n                          {case_.caseNumber} - {case_.charges}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"bondAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bond Amount ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-bond-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"premiumRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Premium Rate (%)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.1\" {...field} data-testid=\"input-premium-rate\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex flex-col\">\n                <label className=\"text-sm font-medium text-foreground mb-2\">Premium Amount</label>\n                <div className=\"px-3 py-2 bg-muted rounded-md text-sm\" data-testid=\"text-premium-amount\">\n                  ${premiumAmount}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"collateralAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Collateral Amount ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-collateral-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"collateralDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Collateral Description</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-collateral-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} rows={3} data-testid=\"input-notes\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createBondMutation.isPending}\n                data-testid=\"button-create-bond\"\n              >\n                {createBondMutation.isPending ? \"Creating...\" : \"Create Bond\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11537},"client/src/components/modals/add-case-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\nconst caseSchema = z.object({\n  caseNumber: z.string().min(1, \"Case number is required\"),\n  clientId: z.string().min(1, \"Client is required\"),\n  charges: z.string().min(1, \"Charges are required\"),\n  arrestDate: z.string().min(1, \"Arrest date is required\"),\n  courtDate: z.string().optional(),\n  courtLocation: z.string().optional(),\n  judgeName: z.string().optional(),\n  prosecutorName: z.string().optional(),\n  defenseAttorney: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype CaseFormData = z.infer<typeof caseSchema>;\n\ninterface AddCaseModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddCaseModal({ open, onOpenChange }: AddCaseModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CaseFormData>({\n    resolver: zodResolver(caseSchema),\n    defaultValues: {\n      caseNumber: \"\",\n      clientId: \"\",\n      charges: \"\",\n      arrestDate: \"\",\n      courtDate: \"\",\n      courtLocation: \"\",\n      judgeName: \"\",\n      prosecutorName: \"\",\n      defenseAttorney: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch clients for dropdown\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  const createCaseMutation = useMutation({\n    mutationFn: (data: CaseFormData) => {\n      return api.createCase(data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Case created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CaseFormData) => {\n    createCaseMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"add-case-modal-title\">Create New Case</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"caseNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Case Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-case-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"arrestDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Arrest Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-arrest-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"clientId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Client</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-client\">\n                        <SelectValue placeholder=\"Select client\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {clients.map((client: any) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          {client.firstName} {client.lastName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"charges\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Charges</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} rows={3} data-testid=\"input-charges\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"courtDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Court Date (Optional)</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} data-testid=\"input-court-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"courtLocation\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Court Location</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-court-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"judgeName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Judge Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-judge-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"prosecutorName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prosecutor</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-prosecutor-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"defenseAttorney\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Defense Attorney</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-defense-attorney\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} rows={3} data-testid=\"input-notes\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createCaseMutation.isPending}\n                data-testid=\"button-create-case\"\n              >\n                {createCaseMutation.isPending ? \"Creating...\" : \"Create Case\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9320},"client/src/components/modals/add-client-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\nconst clientSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  zipCode: z.string().min(1, \"ZIP code is required\"),\n  emergencyContact: z.string().optional(),\n  emergencyPhone: z.string().optional(),\n  status: z.string().default(\"active\"),\n  notes: z.string().optional(),\n});\n\ntype ClientFormData = z.infer<typeof clientSchema>;\n\ninterface AddClientModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddClientModal({ open, onOpenChange }: AddClientModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ClientFormData>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      dateOfBirth: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      emergencyContact: \"\",\n      emergencyPhone: \"\",\n      status: \"active\",\n      notes: \"\",\n    },\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: api.createClient,\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Client created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ClientFormData) => {\n    createClientMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"add-client-modal-title\">Add New Client</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"dateOfBirth\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Date of Birth</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" {...field} data-testid=\"input-date-of-birth\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number</FormLabel>\n                    <FormControl>\n                      <Input type=\"tel\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} rows={3} data-testid=\"input-address\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"city\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>City</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-city\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>State</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-state\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"zipCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ZIP Code</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-zip-code\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"emergencyContact\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Emergency Contact</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-emergency-contact\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"emergencyPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Emergency Phone</FormLabel>\n                    <FormControl>\n                      <Input type=\"tel\" {...field} data-testid=\"input-emergency-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"high_risk\">High Risk</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} rows={3} data-testid=\"input-notes\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createClientMutation.isPending}\n                data-testid=\"button-save-client\"\n              >\n                {createClientMutation.isPending ? \"Saving...\" : \"Save Client\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10673},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/modals/upload-document-modal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\nconst documentSchema = z.object({\n  category: z.string().min(1, \"Category is required\"),\n  relatedType: z.string().optional(),\n  relatedId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype DocumentFormData = z.infer<typeof documentSchema>;\n\ninterface UploadDocumentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  defaultRelatedType?: string;\n  defaultRelatedId?: string;\n}\n\nexport function UploadDocumentModal({ open, onOpenChange, defaultRelatedType, defaultRelatedId }: UploadDocumentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const form = useForm<DocumentFormData>({\n    resolver: zodResolver(documentSchema),\n    defaultValues: {\n      category: \"\",\n      relatedType: defaultRelatedType || \"\",\n      relatedId: defaultRelatedId || \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch clients for association\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    queryFn: () => api.getClients(),\n  });\n\n  // Fetch cases for association\n  const { data: cases = [] } = useQuery({\n    queryKey: [\"/api/cases\"],\n    queryFn: () => api.getCases(),\n  });\n\n  // Fetch bonds for association\n  const { data: bonds = [] } = useQuery({\n    queryKey: [\"/api/bonds\"],\n    queryFn: () => api.getBonds(),\n  });\n\n  const selectedRelatedType = form.watch(\"relatedType\");\n\n  const getRelatedOptions = () => {\n    switch (selectedRelatedType) {\n      case \"client\":\n        return clients.map((client: any) => ({\n          value: client.id,\n          label: `${client.firstName} ${client.lastName}`,\n        }));\n      case \"case\":\n        return cases.map((case_: any) => ({\n          value: case_.id,\n          label: `${case_.caseNumber} - ${case_.charges}`,\n        }));\n      case \"bond\":\n        return bonds.map((bond: any) => ({\n          value: bond.id,\n          label: `${bond.bondNumber} - ${bond.client_name || 'Unknown Client'}`,\n        }));\n      case \"none\":\n        return [];\n      default:\n        return [];\n    }\n  };\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: DocumentFormData) => {\n      if (selectedFiles.length === 0) {\n        throw new Error(\"Please select at least one file to upload\");\n      }\n\n      const formData = new FormData();\n      selectedFiles.forEach((file, index) => {\n        formData.append(`files`, file);\n      });\n      formData.append(\"category\", data.category);\n      if (data.relatedType && data.relatedType !== \"none\") formData.append(\"relatedType\", data.relatedType);\n      if (data.relatedId && data.relatedType !== \"none\") formData.append(\"relatedId\", data.relatedId);\n      if (data.notes) formData.append(\"notes\", data.notes);\n\n      return api.uploadDocuments(formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `${selectedFiles.length} document(s) uploaded successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      form.reset();\n      setSelectedFiles([]);\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to upload documents\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (files) {\n      const fileArray = Array.from(files);\n      const validFiles = fileArray.filter(file => {\n        // Allow common document types\n        const allowedTypes = [\n          'application/pdf',\n          'image/jpeg',\n          'image/jpg', \n          'image/png',\n          'image/gif',\n          'application/msword',\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'text/plain'\n        ];\n        return allowedTypes.includes(file.type);\n      });\n\n      if (validFiles.length < fileArray.length) {\n        toast({\n          title: \"Warning\",\n          description: \"Some files were skipped. Only PDF, images, Word documents, and text files are allowed.\",\n          variant: \"destructive\",\n        });\n      }\n\n      setSelectedFiles(prev => [...prev, ...validFiles]);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const onSubmit = (data: DocumentFormData) => {\n    uploadMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"upload-document-modal-title\">Upload Documents</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            \n            {/* File Upload Area */}\n            <div className=\"space-y-4\">\n              <label className=\"text-sm font-medium text-foreground\">Files</label>\n              <div\n                className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                  isDragOver ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'\n                }`}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <i className=\"fas fa-cloud-upload-alt text-3xl text-muted-foreground\"></i>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Drag and drop files here, or{\" \"}\n                    <button\n                      type=\"button\"\n                      className=\"text-primary hover:underline\"\n                      onClick={() => fileInputRef.current?.click()}\n                      data-testid=\"button-select-files\"\n                    >\n                      click to select\n                    </button>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Supports: PDF, Images (JPG, PNG, GIF), Word documents, Text files\n                  </p>\n                </div>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  className=\"hidden\"\n                  accept=\".pdf,.jpg,.jpeg,.png,.gif,.doc,.docx,.txt\"\n                  onChange={(e) => handleFileSelect(e.target.files)}\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n\n              {/* Selected Files List */}\n              {selectedFiles.length > 0 && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-foreground\">\n                    Selected Files ({selectedFiles.length})\n                  </label>\n                  <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                    {selectedFiles.map((file, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-2 bg-muted rounded\"\n                        data-testid={`selected-file-${index}`}\n                      >\n                        <div className=\"flex items-center space-x-2 min-w-0\">\n                          <i className=\"fas fa-file text-sm text-muted-foreground\"></i>\n                          <span className=\"text-sm truncate\">{file.name}</span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            ({formatFileSize(file.size)})\n                          </span>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFile(index)}\n                          data-testid={`button-remove-file-${index}`}\n                        >\n                          <i className=\"fas fa-times text-xs\"></i>\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Category Selection */}\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-category\">\n                        <SelectValue placeholder=\"Select document category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"contract\">Contracts</SelectItem>\n                      <SelectItem value=\"court_papers\">Court Papers</SelectItem>\n                      <SelectItem value=\"identification\">Identification</SelectItem>\n                      <SelectItem value=\"financial\">Financial</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Associate with Record */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"relatedType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Associate with (Optional)</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-related-type\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        <SelectItem value=\"client\">Client</SelectItem>\n                        <SelectItem value=\"case\">Case</SelectItem>\n                        <SelectItem value=\"bond\">Bond</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedRelatedType && selectedRelatedType !== \"none\" && (\n                <FormField\n                  control={form.control}\n                  name=\"relatedId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Select {selectedRelatedType}</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-related-record\">\n                            <SelectValue placeholder={`Select ${selectedRelatedType}`} />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {getRelatedOptions().map((option: { value: string; label: string }) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            {/* Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"Add any notes about these documents...\"\n                      data-testid=\"input-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={uploadMutation.isPending || selectedFiles.length === 0}\n                data-testid=\"button-upload\"\n              >\n                {uploadMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Uploading...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Upload {selectedFiles.length > 0 ? `${selectedFiles.length} File(s)` : 'Files'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15021},"client/src/components/modals/case-details-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UploadDocumentModal } from \"./upload-document-modal\";\nimport { api } from \"@/lib/api\";\n\nconst caseUpdateSchema = z.object({\n  caseNumber: z.string().min(1, \"Case number is required\"),\n  charges: z.string().min(1, \"Charges are required\"),\n  arrestDate: z.string().min(1, \"Arrest date is required\"),\n  courtDate: z.string().optional(),\n  courtLocation: z.string().optional(),\n  judgeName: z.string().optional(),\n  prosecutorName: z.string().optional(),\n  defenseAttorney: z.string().optional(),\n  status: z.enum([\"open\", \"closed\", \"dismissed\"]),\n  notes: z.string().optional(),\n});\n\ntype CaseUpdateData = z.infer<typeof caseUpdateSchema>;\n\ninterface CaseDetailsModalProps {\n  caseId: string | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CaseDetailsModal({ caseId, open, onOpenChange }: CaseDetailsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"details\");\n\n  // Fetch case details\n  const { data: caseData, isLoading: isCaseLoading } = useQuery({\n    queryKey: [\"/api/cases\", caseId],\n    queryFn: () => caseId ? api.getCase(caseId) : null,\n    enabled: !!caseId && open,\n  });\n\n  // Fetch client details\n  const { data: client } = useQuery({\n    queryKey: [\"/api/clients\", caseData?.clientId],\n    queryFn: () => caseData?.clientId ? api.getClient(caseData.clientId) : null,\n    enabled: !!caseData?.clientId,\n  });\n\n  // Fetch case documents\n  const { data: documents = [] } = useQuery({\n    queryKey: [\"/api/documents\", { relatedId: caseId, relatedType: \"case\" }],\n    queryFn: () => api.getDocuments({ relatedId: caseId!, relatedType: \"case\" }),\n    enabled: !!caseId && open,\n  });\n\n  // Fetch case activities/timeline\n  const { data: activities = [] } = useQuery({\n    queryKey: [\"/api/activities\", caseId],\n    queryFn: () => caseId ? api.getActivities({ resourceId: caseId, resourceType: \"case\" }) : [],\n    enabled: !!caseId && open,\n  });\n\n  const form = useForm<CaseUpdateData>({\n    resolver: zodResolver(caseUpdateSchema),\n    defaultValues: {\n      caseNumber: \"\",\n      charges: \"\",\n      arrestDate: \"\",\n      courtDate: \"\",\n      courtLocation: \"\",\n      judgeName: \"\",\n      prosecutorName: \"\",\n      defenseAttorney: \"\",\n      status: \"open\",\n      notes: \"\",\n    },\n  });\n\n  // Update form when case data changes\n  useEffect(() => {\n    if (caseData) {\n      form.reset({\n        caseNumber: caseData.caseNumber || \"\",\n        charges: caseData.charges || \"\",\n        arrestDate: caseData.arrestDate || \"\",\n        courtDate: caseData.courtDate || \"\",\n        courtLocation: caseData.courtLocation || \"\",\n        judgeName: caseData.judgeName || \"\",\n        prosecutorName: caseData.prosecutorName || \"\",\n        defenseAttorney: caseData.defenseAttorney || \"\",\n        status: caseData.status || \"open\",\n        notes: caseData.notes || \"\",\n      });\n    }\n  }, [caseData, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: CaseUpdateData) => {\n      if (!caseId) throw new Error(\"No case ID\");\n      return api.updateCase(caseId, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Case updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\", caseId] });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusChange = async (newStatus: \"open\" | \"closed\" | \"dismissed\") => {\n    if (!caseId || !caseData) return;\n    \n    updateMutation.mutate({\n      ...form.getValues(),\n      status: newStatus,\n    });\n  };\n\n  const onSubmit = (data: CaseUpdateData) => {\n    updateMutation.mutate(data);\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"Not set\";\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const formatDateTime = (dateString?: string) => {\n    if (!dateString) return \"Not set\";\n    return new Date(dateString).toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Open</Badge>;\n      case \"closed\":\n        return <Badge className=\"bg-green-100 text-green-800\">Closed</Badge>;\n      case \"dismissed\":\n        return <Badge className=\"bg-gray-100 text-gray-800\">Dismissed</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"contract\":\n        return \"fas fa-file-contract text-blue-600\";\n      case \"court_papers\":\n        return \"fas fa-gavel text-purple-600\";\n      case \"identification\":\n        return \"fas fa-id-card text-green-600\";\n      case \"financial\":\n        return \"fas fa-receipt text-amber-600\";\n      default:\n        return \"fas fa-file text-gray-600\";\n    }\n  };\n\n  if (!caseId) return null;\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle data-testid=\"case-details-modal-title\">\n              {isCaseLoading ? \"Loading...\" : `Case ${caseData?.caseNumber || 'Details'}`}\n            </DialogTitle>\n          </DialogHeader>\n\n          {isCaseLoading ? (\n            <div className=\"space-y-4\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n              </div>\n            </div>\n          ) : caseData ? (\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"details\" data-testid=\"tab-details\">Details</TabsTrigger>\n                <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n                  Documents ({documents.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">Timeline</TabsTrigger>\n                <TabsTrigger value=\"notes\" data-testid=\"tab-notes\">Notes</TabsTrigger>\n              </TabsList>\n\n              {/* Case Details Tab */}\n              <TabsContent value=\"details\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground\">\n                        Case {caseData.caseNumber}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Created {formatDate(caseData.createdAt)}\n                      </p>\n                    </div>\n                    {getStatusBadge(caseData.status)}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsEditing(!isEditing)}\n                      data-testid=\"button-toggle-edit\"\n                    >\n                      {isEditing ? (\n                        <>\n                          <i className=\"fas fa-times mr-2\"></i>Cancel\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-edit mr-2\"></i>Edit\n                        </>\n                      )}\n                    </Button>\n                    {!isEditing && (\n                      <Select\n                        value={caseData.status}\n                        onValueChange={handleStatusChange}\n                      >\n                        <SelectTrigger className=\"w-32\" data-testid=\"select-status-quick\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"open\">Open</SelectItem>\n                          <SelectItem value=\"closed\">Closed</SelectItem>\n                          <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    )}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {isEditing ? (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"caseNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Case Number</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-edit-case-number\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Status</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-edit-status\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"open\">Open</SelectItem>\n                                  <SelectItem value=\"closed\">Closed</SelectItem>\n                                  <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"arrestDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Arrest Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} data-testid=\"input-edit-arrest-date\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"courtDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Court Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"datetime-local\" {...field} data-testid=\"input-edit-court-date\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"courtLocation\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Court Location</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-edit-court-location\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"judgeName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Judge Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-edit-judge-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"prosecutorName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Prosecutor Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-edit-prosecutor-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"defenseAttorney\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Defense Attorney</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-edit-defense-attorney\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"charges\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Charges</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} data-testid=\"textarea-edit-charges\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} data-testid=\"textarea-edit-notes\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsEditing(false)}\n                          data-testid=\"button-cancel-edit\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={updateMutation.isPending}\n                          data-testid=\"button-save-case\"\n                        >\n                          {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                ) : (\n                  <div className=\"space-y-6\">\n                    {/* Client Information */}\n                    {client && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Client Information</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Name</label>\n                            <p className=\"text-foreground\">{client.firstName} {client.lastName}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Phone</label>\n                            <p className=\"text-foreground\">{client.phone || \"Not provided\"}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                            <p className=\"text-foreground\">{client.email || \"Not provided\"}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Address</label>\n                            <p className=\"text-foreground\">{client.address || \"Not provided\"}</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Case Information */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\">Case Information</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Case Number</label>\n                          <p className=\"text-foreground font-mono\">{caseData.caseNumber}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                          <div className=\"mt-1\">{getStatusBadge(caseData.status)}</div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Arrest Date</label>\n                          <p className=\"text-foreground\">{formatDate(caseData.arrestDate)}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Court Date</label>\n                          <p className=\"text-foreground\">{formatDateTime(caseData.courtDate)}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Court Location</label>\n                          <p className=\"text-foreground\">{caseData.courtLocation || \"Not specified\"}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Judge</label>\n                          <p className=\"text-foreground\">{caseData.judgeName || \"Not assigned\"}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Prosecutor</label>\n                          <p className=\"text-foreground\">{caseData.prosecutorName || \"Not specified\"}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Defense Attorney</label>\n                          <p className=\"text-foreground\">{caseData.defenseAttorney || \"Not specified\"}</p>\n                        </div>\n                        <div className=\"md:col-span-2\">\n                          <label className=\"text-sm font-medium text-muted-foreground\">Charges</label>\n                          <p className=\"text-foreground\">{caseData.charges}</p>\n                        </div>\n                        {caseData.notes && (\n                          <div className=\"md:col-span-2\">\n                            <label className=\"text-sm font-medium text-muted-foreground\">Notes</label>\n                            <p className=\"text-foreground whitespace-pre-wrap\">{caseData.notes}</p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Documents Tab */}\n              <TabsContent value=\"documents\" className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Case Documents</h3>\n                  <Button\n                    onClick={() => setUploadModalOpen(true)}\n                    data-testid=\"button-upload-case-document\"\n                  >\n                    <i className=\"fas fa-upload mr-2\"></i>Upload Document\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {documents.length > 0 ? (\n                    documents.map((document: any) => (\n                      <Card key={document.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"mt-1\">\n                                <i className={getCategoryIcon(document.category)}></i>\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <h4 className=\"text-sm font-medium text-foreground truncate\">\n                                  {document.originalName}\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {document.category.replace('_', ' ')} • {Math.round(document.fileSize / 1024)} KB\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Uploaded {formatDate(document.createdAt)}\n                                </p>\n                                {document.notes && (\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\n                                    {document.notes}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <button \n                                className=\"text-primary hover:text-primary/80\" \n                                title=\"View\"\n                                data-testid={`button-view-document-${document.id}`}\n                              >\n                                <i className=\"fas fa-eye\"></i>\n                              </button>\n                              <button \n                                className=\"text-muted-foreground hover:text-foreground\" \n                                title=\"Download\"\n                                data-testid={`button-download-document-${document.id}`}\n                              >\n                                <i className=\"fas fa-download\"></i>\n                              </button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <Card>\n                      <CardContent className=\"p-8 text-center\">\n                        <i className=\"fas fa-file-alt text-4xl text-muted-foreground/50 mb-4\"></i>\n                        <h4 className=\"text-lg font-medium text-foreground mb-2\">No documents yet</h4>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Upload case documents like court papers, contracts, or evidence\n                        </p>\n                        <Button\n                          onClick={() => setUploadModalOpen(true)}\n                          data-testid=\"button-upload-first-document\"\n                        >\n                          <i className=\"fas fa-upload mr-2\"></i>Upload First Document\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              {/* Timeline Tab */}\n              <TabsContent value=\"timeline\" className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Case Timeline</h3>\n                \n                <div className=\"space-y-4\">\n                  {activities.length > 0 ? (\n                    activities.map((activity: any, index: number) => (\n                      <div key={activity.id} className=\"flex items-start space-x-4\">\n                        <div className=\"flex flex-col items-center\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-clock text-primary-foreground text-xs\"></i>\n                          </div>\n                          {index < activities.length - 1 && (\n                            <div className=\"w-px h-8 bg-border mt-2\"></div>\n                          )}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {activity.action}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {formatDateTime(activity.createdAt)}\n                          </div>\n                          {activity.details && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              {JSON.stringify(activity.details)}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <Card>\n                      <CardContent className=\"p-8 text-center\">\n                        <i className=\"fas fa-timeline text-4xl text-muted-foreground/50 mb-4\"></i>\n                        <h4 className=\"text-lg font-medium text-foreground mb-2\">No timeline events yet</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Case activities and milestones will appear here as they occur\n                        </p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              {/* Notes Tab */}\n              <TabsContent value=\"notes\" className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Case Notes</h3>\n                \n                {caseData.notes ? (\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"whitespace-pre-wrap text-foreground\">\n                        {caseData.notes}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <i className=\"fas fa-sticky-note text-4xl text-muted-foreground/50 mb-4\"></i>\n                      <h4 className=\"text-lg font-medium text-foreground mb-2\">No notes yet</h4>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Add notes to track important case information\n                      </p>\n                      <Button\n                        onClick={() => setIsEditing(true)}\n                        data-testid=\"button-add-notes\"\n                      >\n                        <i className=\"fas fa-edit mr-2\"></i>Add Notes\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Case not found</p>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Upload Document Modal for this specific case */}\n      <UploadDocumentModal\n        open={uploadModalOpen}\n        onOpenChange={setUploadModalOpen}\n        defaultRelatedType=\"case\"\n        defaultRelatedId={caseId}\n      />\n    </>\n  );\n}","size_bytes":30856},"client/src/components/ui/ai-search.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Search, Bot, Loader2, MessageCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { api } from \"@/lib/api\";\n\ninterface SearchResult {\n  type: 'client' | 'case' | 'bond' | 'payment' | 'document';\n  id: string;\n  title: string;\n  description: string;\n  relevanceScore: number;\n}\n\nexport function AISearch() {\n  const { t, language } = useLanguage();\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<SearchResult[]>([]);\n\n  const searchMutation = useMutation({\n    mutationFn: (searchQuery: string) => api.aiSearch(searchQuery, language),\n    onSuccess: (data) => {\n      setResults(data.results || []);\n    },\n    onError: (error) => {\n      console.error('Search error:', error);\n      setResults([]);\n    },\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (query.trim()) {\n      searchMutation.mutate(query.trim());\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'client': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'case': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'bond': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      case 'payment': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'document': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'client': return 'fas fa-user';\n      case 'case': return 'fas fa-briefcase';\n      case 'bond': return 'fas fa-handshake';\n      case 'payment': return 'fas fa-credit-card';\n      case 'document': return 'fas fa-file-alt';\n      default: return 'fas fa-question';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Bot className=\"h-5 w-5 text-primary\" />\n          <span>{t('search.placeholder')}</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Search Form */}\n        <form onSubmit={handleSearch} className=\"flex space-x-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n            <Input\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder={language === 'es' \n                ? \"Pregúntame sobre clientes, casos o fianzas...\"\n                : \"Ask me about clients, cases, or bonds...\"\n              }\n              className=\"pl-10\"\n              disabled={searchMutation.isPending}\n              data-testid=\"ai-search-input\"\n            />\n          </div>\n          <Button \n            type=\"submit\" \n            disabled={!query.trim() || searchMutation.isPending}\n            data-testid=\"ai-search-button\"\n          >\n            {searchMutation.isPending ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Search className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </form>\n\n        {/* Results */}\n        {results.length > 0 && (\n          <div className=\"space-y-3\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">\n              {t('search.suggestions')} ({results.length})\n            </h4>\n            <ScrollArea className=\"h-64\">\n              <div className=\"space-y-2\">\n                {results.map((result, index) => (\n                  <Card \n                    key={`${result.type}-${result.id}-${index}`}\n                    className=\"cursor-pointer hover:bg-muted/50 transition-colors p-3\"\n                    data-testid={`search-result-${result.type}-${result.id}`}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        <i className={`${getTypeIcon(result.type)} text-sm text-muted-foreground`}></i>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h5 className=\"text-sm font-medium truncate\">\n                            {result.title}\n                          </h5>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge \n                              variant=\"secondary\" \n                              className={`text-xs ${getTypeColor(result.type)}`}\n                            >\n                              {t(`${result.type}s.title`).slice(0, -1)}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {Math.round(result.relevanceScore * 100)}%\n                            </span>\n                          </div>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {result.description}\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n\n        {/* No Results */}\n        {searchMutation.isSuccess && results.length === 0 && query && (\n          <div className=\"text-center py-4 text-muted-foreground\">\n            <MessageCircle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">{t('search.noResults')}</p>\n            <p className=\"text-xs\">{t('search.tryDifferent')}</p>\n          </div>\n        )}\n\n        {/* Error State */}\n        {searchMutation.isError && (\n          <div className=\"text-center py-4 text-destructive\">\n            <p className=\"text-sm\">{t('errors.generic')}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6511},"client/src/components/ui/client-checkin.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Camera, MapPin, Upload, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { api } from \"@/lib/api\";\n\ninterface PhotoVerificationResult {\n  isValidPhoto: boolean;\n  confidence: number;\n  personDetected: boolean;\n  quality: 'high' | 'medium' | 'low';\n  issues?: string[];\n}\n\ninterface GeolocationCoords {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n}\n\nexport function ClientCheckin() {\n  const { t } = useLanguage();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [photo, setPhoto] = useState<string | null>(null);\n  const [location, setLocation] = useState<GeolocationCoords | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [verificationResult, setVerificationResult] = useState<PhotoVerificationResult | null>(null);\n\n  const verifyPhotoMutation = useMutation({\n    mutationFn: (imageData: string) => api.verifyPhoto(imageData),\n    onSuccess: (result: PhotoVerificationResult) => {\n      setVerificationResult(result);\n    },\n    onError: (error) => {\n      console.error('Photo verification error:', error);\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setPhoto(result);\n        setVerificationResult(null);\n        \n        // Automatically verify the photo\n        verifyPhotoMutation.mutate(result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const captureLocation = async () => {\n    if (!navigator.geolocation) {\n      setLocationError(t('checkin.gpsRequired'));\n      return;\n    }\n\n    setLocationError(null);\n    console.log('[GPS] Requesting location permission...');\n    \n    // For development/testing, provide mock location if geolocation fails\n    const fallbackLocation = () => {\n      console.log('[GPS] Using fallback location for development');\n      setLocation({\n        latitude: 33.4484, // Phoenix, AZ coordinates as example\n        longitude: -112.0740,\n        accuracy: 10,\n      });\n    };\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log('[GPS] Location captured successfully:', position.coords);\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n        });\n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n        let errorMessage = \"Unknown location error.\";\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = \"Location access denied. Please enable location services.\";\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information unavailable.\";\n            break;\n          case error.TIMEOUT:\n            errorMessage = \"Location request timed out.\";\n            break;\n        }\n        \n        setLocationError(errorMessage);\n        \n        // In development, use fallback location\n        if (import.meta.env.DEV) {\n          console.log('[GPS] Development mode - using fallback location');\n          fallbackLocation();\n        }\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000,\n      }\n    );\n  };\n\n  const handleSubmitCheckin = () => {\n    if (!photo || !location || !verificationResult?.isValidPhoto) {\n      return;\n    }\n\n    // Here you would submit the check-in data to your backend\n    console.log('Submitting check-in:', {\n      photo,\n      location,\n      verification: verificationResult,\n      timestamp: new Date().toISOString(),\n    });\n  };\n\n  const getQualityColor = (quality: string) => {\n    switch (quality) {\n      case 'high': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'low': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <CheckCircle className=\"h-5 w-5 text-primary\" />\n          <span>{t('checkin.title')}</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Photo Upload */}\n        <div className=\"space-y-2\">\n          <Label>{t('checkin.takePhoto')}</Label>\n          <div className=\"space-y-2\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              capture=\"user\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            />\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-upload-photo\"\n            >\n              <Camera className=\"h-4 w-4 mr-2\" />\n              {t('checkin.uploadPhoto')}\n            </Button>\n          </div>\n\n          {/* Photo Preview */}\n          {photo && (\n            <div className=\"relative\">\n              <img\n                src={photo}\n                alt=\"Check-in photo\"\n                className=\"w-full h-48 object-cover rounded-lg\"\n              />\n              {verifyPhotoMutation.isPending && (\n                <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center rounded-lg\">\n                  <Loader2 className=\"h-6 w-6 text-white animate-spin\" />\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Verification Results */}\n          {verificationResult && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Photo Verification:</span>\n                {verificationResult.isValidPhoto ? (\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <XCircle className=\"h-4 w-4 text-red-600\" />\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Badge className={getQualityColor(verificationResult.quality)}>\n                  Quality: {verificationResult.quality}\n                </Badge>\n                <Badge variant=\"secondary\">\n                  {Math.round(verificationResult.confidence * 100)}% confidence\n                </Badge>\n              </div>\n\n              {verificationResult.issues && verificationResult.issues.length > 0 && (\n                <div className=\"text-xs text-destructive\">\n                  Issues: {verificationResult.issues.join(', ')}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Location */}\n        <div className=\"space-y-2\">\n          <Label>{t('checkin.location')}</Label>\n          <Button\n            onClick={captureLocation}\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-capture-location\"\n          >\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            Capture GPS Location\n          </Button>\n\n          {location && (\n            <div className=\"text-xs text-muted-foreground p-2 bg-muted rounded\">\n              <div>Lat: {location.latitude.toFixed(6)}</div>\n              <div>Lng: {location.longitude.toFixed(6)}</div>\n              <div>Accuracy: ±{Math.round(location.accuracy)}m</div>\n            </div>\n          )}\n\n          {locationError && (\n            <div className=\"text-xs text-destructive\">\n              {locationError}\n            </div>\n          )}\n        </div>\n\n        {/* Submit Check-in */}\n        <Button\n          onClick={handleSubmitCheckin}\n          disabled={!photo || !location || !verificationResult?.isValidPhoto}\n          className=\"w-full\"\n          data-testid=\"button-submit-checkin\"\n        >\n          {t('checkin.checkinSuccessful')}\n        </Button>\n\n        {/* Compliance Status */}\n        <div className=\"pt-2 border-t\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>{t('checkin.compliance')}:</span>\n            <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n              {t('checkin.compliant')}\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9103},"client/src/components/ui/language-switcher.tsx":{"content":"import { Globe, Check } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useLanguage } from '@/contexts/language-context';\nimport { Language } from '@shared/i18n';\n\nconst languages = [\n  { code: 'en' as Language, name: 'English', flag: '🇺🇸' },\n  { code: 'es' as Language, name: 'Español', flag: '🇪🇸' },\n];\n\nexport function LanguageSwitcher() {\n  const { language, setLanguage, t } = useLanguage();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"h-8 w-8 p-0\"\n          data-testid=\"button-language-switcher\"\n        >\n          <Globe className=\"h-4 w-4\" />\n          <span className=\"sr-only\">{t('common.selectLanguage')}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-40\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => setLanguage(lang.code)}\n            className=\"flex items-center justify-between cursor-pointer\"\n            data-testid={`menu-item-language-${lang.code}`}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-lg\">{lang.flag}</span>\n              <span className=\"text-sm\">{lang.name}</span>\n            </div>\n            {language === lang.code && (\n              <Check className=\"h-4 w-4 text-primary\" />\n            )}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1705},"client/src/contexts/language-context.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { Language, useTranslation } from '@shared/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: string, fallback?: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguageState] = useState<Language>(() => {\n    // Try to get saved language from localStorage\n    const saved = localStorage.getItem('bail-bonds-language');\n    if (saved === 'en' || saved === 'es') {\n      return saved;\n    }\n    \n    // Detect browser language\n    const browserLang = navigator.language.toLowerCase();\n    if (browserLang.startsWith('es')) {\n      return 'es';\n    }\n    \n    return 'en';\n  });\n\n  const { t } = useTranslation(language);\n\n  const setLanguage = (newLanguage: Language) => {\n    setLanguageState(newLanguage);\n    localStorage.setItem('bail-bonds-language', newLanguage);\n    \n    // Update document lang attribute\n    document.documentElement.lang = newLanguage;\n  };\n\n  useEffect(() => {\n    // Set initial document lang\n    document.documentElement.lang = language;\n  }, [language]);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":1684},"server/ai-services.ts":{"content":"// AI Services for the bail bonds system\n// Referenced from the javascript_openai integration\n\nimport OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface SearchResult {\n  type: 'client' | 'case' | 'bond' | 'payment' | 'document';\n  id: string;\n  title: string;\n  description: string;\n  relevanceScore: number;\n}\n\nexport interface TranslationRequest {\n  text: string;\n  fromLanguage: 'en' | 'es';\n  toLanguage: 'en' | 'es';\n}\n\nexport interface PhotoVerificationResult {\n  isValidPhoto: boolean;\n  confidence: number;\n  personDetected: boolean;\n  quality: 'high' | 'medium' | 'low';\n  issues?: string[];\n}\n\nexport class AIService {\n  // Intelligent search across all data types with data minimization for security\n  async intelligentSearch(\n    query: string,\n    data: {\n      clients: any[];\n      cases: any[];\n      bonds: any[];\n      payments: any[];\n      documents: any[];\n    },\n    language: 'en' | 'es' = 'en'\n  ): Promise<SearchResult[]> {\n    try {\n      // First, perform server-side filtering to reduce dataset size\n      const filteredData = this.prefilterSearchData(query, data);\n      \n      // If we have too much data even after filtering, use text-based search only\n      const totalItems = Object.values(filteredData).reduce((sum, arr) => sum + arr.length, 0);\n      if (totalItems > 50) {\n        console.log(`[AI Search] Large dataset (${totalItems} items), using server-side search only`);\n        return this.performServerSideSearch(query, data);\n      }\n\n      // Sanitize data before sending to AI (remove PII and sensitive fields)\n      const sanitizedData = this.sanitizeDataForAI(filteredData);\n\n      const systemPrompt = language === 'es' \n        ? \"Eres un asistente experto en el sistema de fianzas. Analiza la consulta del usuario y encuentra elementos relevantes en los datos proporcionados. Devuelve resultados en JSON con relevancia ordenada.\"\n        : \"You are an expert bail bonds system assistant. Analyze the user's query and find relevant items in the provided data. Return results in JSON with relevance ranking.\";\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `${systemPrompt}\n\nAvailable sanitized data structure (personal details redacted for privacy):\n- Clients: id, initials, generalLocation, yearOfBirth\n- Cases: id, caseNumber, chargeType (general), status, courtYear\n- Bonds: id, bondNumber, bondType, bondAmount (rounded), status\n- Payments: id, amount (rounded), month, paymentMethod, status\n- Documents: id, fileName (sanitized), category, uploadDate (month only)\n\nResponse format: {\n  \"results\": [\n    {\n      \"type\": \"client|case|bond|payment|document\",\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"description\": \"string\", \n      \"relevanceScore\": number (0-1)\n    }\n  ]\n}`\n          },\n          {\n            role: \"user\",\n            content: `Search query: \"${query}\"\n\nSanitized data (personal details removed for privacy):\n${JSON.stringify(sanitizedData)}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"results\": []}');\n      return result.results || [];\n    } catch (error) {\n      console.error('AI search error:', error);\n      // Fallback to server-side search if AI fails\n      return this.performServerSideSearch(query, data);\n    }\n  }\n\n  // Pre-filter data based on query to reduce size before AI processing\n  private prefilterSearchData(query: string, data: any) {\n    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);\n    \n    const filterArray = (items: any[], searchFields: string[]) => {\n      return items.filter(item => {\n        return searchTerms.some(term => \n          searchFields.some(field => \n            item[field]?.toString().toLowerCase().includes(term)\n          )\n        );\n      }).slice(0, 20); // Limit to top 20 matches per category\n    };\n\n    return {\n      clients: filterArray(data.clients, ['firstName', 'lastName']),\n      cases: filterArray(data.cases, ['caseNumber', 'chargeType', 'chargeDescription']),\n      bonds: filterArray(data.bonds, ['bondNumber', 'bondType']),\n      payments: filterArray(data.payments, ['paymentMethod']),\n      documents: filterArray(data.documents, ['fileName', 'category'])\n    };\n  }\n\n  // Sanitize data by removing PII and sensitive information\n  private sanitizeDataForAI(data: any) {\n    return {\n      clients: data.clients.map((client: any) => ({\n        id: client.id,\n        initials: `${client.firstName?.[0] || ''}${client.lastName?.[0] || ''}`,\n        generalLocation: client.city || 'Unknown',\n        yearOfBirth: client.dateOfBirth ? new Date(client.dateOfBirth).getFullYear() : null\n      })),\n      cases: data.cases.map((case_: any) => ({\n        id: case_.id,\n        caseNumber: case_.caseNumber,\n        chargeType: case_.chargeType,\n        status: case_.status,\n        courtYear: case_.courtDate ? new Date(case_.courtDate).getFullYear() : null\n      })),\n      bonds: data.bonds.map((bond: any) => ({\n        id: bond.id,\n        bondNumber: bond.bondNumber,\n        bondType: bond.bondType,\n        bondAmount: bond.bondAmount ? Math.round(bond.bondAmount / 1000) * 1000 : null, // Round to nearest 1000\n        status: bond.status\n      })),\n      payments: data.payments.map((payment: any) => ({\n        id: payment.id,\n        amount: payment.amount ? Math.round(payment.amount / 100) * 100 : null, // Round to nearest 100\n        month: payment.paymentDate ? new Date(payment.paymentDate).getMonth() + 1 : null,\n        paymentMethod: payment.paymentMethod,\n        status: payment.status\n      })),\n      documents: data.documents.map((doc: any) => ({\n        id: doc.id,\n        fileName: doc.fileName?.replace(/\\.(pdf|doc|docx|jpg|jpeg|png)$/i, '[FILE]'), // Remove extensions\n        category: doc.category,\n        uploadMonth: doc.uploadDate ? new Date(doc.uploadDate).getMonth() + 1 : null\n      }))\n    };\n  }\n\n  // Server-side text search as fallback (no AI, no external data transmission)\n  private performServerSideSearch(query: string, data: any): SearchResult[] {\n    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 1);\n    const results: SearchResult[] = [];\n\n    // Search clients\n    data.clients.forEach((client: any) => {\n      const searchableText = `${client.firstName} ${client.lastName} ${client.email}`.toLowerCase();\n      const matches = searchTerms.filter(term => searchableText.includes(term));\n      if (matches.length > 0) {\n        results.push({\n          type: 'client',\n          id: client.id,\n          title: `${client.firstName} ${client.lastName}`,\n          description: `Email: ${client.email?.replace(/(.{2}).*(@.*)/, '$1***$2') || 'N/A'}`,\n          relevanceScore: matches.length / searchTerms.length\n        });\n      }\n    });\n\n    // Search cases\n    data.cases.forEach((case_: any) => {\n      const searchableText = `${case_.caseNumber} ${case_.chargeType} ${case_.chargeDescription}`.toLowerCase();\n      const matches = searchTerms.filter(term => searchableText.includes(term));\n      if (matches.length > 0) {\n        results.push({\n          type: 'case',\n          id: case_.id,\n          title: `Case ${case_.caseNumber}`,\n          description: `${case_.chargeType} - ${case_.status}`,\n          relevanceScore: matches.length / searchTerms.length\n        });\n      }\n    });\n\n    // Search bonds\n    data.bonds.forEach((bond: any) => {\n      const searchableText = `${bond.bondNumber} ${bond.bondType}`.toLowerCase();\n      const matches = searchTerms.filter(term => searchableText.includes(term));\n      if (matches.length > 0) {\n        results.push({\n          type: 'bond',\n          id: bond.id,\n          title: `Bond ${bond.bondNumber}`,\n          description: `${bond.bondType} - $${bond.bondAmount} - ${bond.status}`,\n          relevanceScore: matches.length / searchTerms.length\n        });\n      }\n    });\n\n    // Sort by relevance and limit results\n    return results\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\n      .slice(0, 10);\n  }\n\n  // Translate text between English and Spanish\n  async translateText({ text, fromLanguage, toLanguage }: TranslationRequest): Promise<string> {\n    if (fromLanguage === toLanguage) {\n      return text;\n    }\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a professional translator specializing in legal and bail bonds terminology. \n            Translate from ${fromLanguage === 'en' ? 'English' : 'Spanish'} to ${toLanguage === 'en' ? 'English' : 'Spanish'}.\n            Maintain legal accuracy and formal tone. Return only the translated text.`\n          },\n          {\n            role: \"user\",\n            content: text\n          }\n        ],\n      });\n\n      return response.choices[0].message.content || text;\n    } catch (error) {\n      console.error('Translation error:', error);\n      return text;\n    }\n  }\n\n  // Analyze photos for client check-in verification\n  async verifyCheckinPhoto(base64Image: string): Promise<PhotoVerificationResult> {\n    try {\n      // Clean the base64 string and detect image type\n      let cleanBase64 = base64Image;\n      let imageType = 'jpeg';\n      \n      // Handle data URL format\n      if (base64Image.startsWith('data:')) {\n        const matches = base64Image.match(/data:image\\/(\\w+);base64,(.+)/);\n        if (matches) {\n          imageType = matches[1];\n          cleanBase64 = matches[2];\n        }\n      }\n      \n      // Validate base64 format\n      if (!cleanBase64 || cleanBase64.length < 100) {\n        throw new Error('Invalid image data');\n      }\n\n      console.log(`[AI Service] Verifying photo - Type: ${imageType}, Size: ${cleanBase64.length} characters`);\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a photo verification expert for a bail bonds check-in system. \n            Analyze the image and determine if it's suitable for client verification.\n            \n            Check for:\n            - Clear person visible\n            - Face clearly visible (not obscured)\n            - Photo quality (lighting, focus, clarity)\n            - Not a screenshot or photo of photo\n            - Appropriate setting\n            \n            Respond with JSON: {\n              \"isValidPhoto\": boolean,\n              \"confidence\": number (0-1),\n              \"personDetected\": boolean,\n              \"quality\": \"high|medium|low\",\n              \"issues\": [\"array of issues if any\"]\n            }`\n          },\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: \"Analyze this check-in photo for client verification:\"\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:image/${imageType};base64,${cleanBase64}`\n                }\n              }\n            ],\n          },\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      console.log('[AI Service] Photo verification result:', result);\n      \n      return {\n        isValidPhoto: result.isValidPhoto || false,\n        confidence: result.confidence || 0,\n        personDetected: result.personDetected || false,\n        quality: result.quality || 'low',\n        issues: result.issues || []\n      };\n    } catch (error) {\n      console.error('Photo verification error:', error);\n      // For development, return a mock successful result to avoid blocking\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[AI Service] Development mode - returning mock successful verification');\n        return {\n          isValidPhoto: true,\n          confidence: 0.85,\n          personDetected: true,\n          quality: 'medium',\n          issues: []\n        };\n      }\n      \n      return {\n        isValidPhoto: false,\n        confidence: 0,\n        personDetected: false,\n        quality: 'low',\n        issues: ['Failed to analyze photo: ' + (error instanceof Error ? error.message : 'Unknown error')]\n      };\n    }\n  }\n\n  // Generate system help and guidance\n  async generateHelp(question: string, language: 'en' | 'es' = 'en'): Promise<string> {\n    try {\n      const systemPrompt = language === 'es'\n        ? \"Eres un asistente experto del sistema de gestión de fianzas. Proporciona ayuda clara y útil sobre cómo usar el sistema.\"\n        : \"You are an expert bail bonds management system assistant. Provide clear, helpful guidance on how to use the system.\";\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `${systemPrompt}\n\nThe system includes:\n- Client Management: Add, edit, and track client information\n- Case Management: Handle legal cases with court dates and documents\n- Bond Management: Create and monitor bail bonds with payments\n- Document Management: Upload and organize legal documents\n- Check-in System: Client photo verification and GPS tracking\n- Payment Processing: Track payments and generate reports\n- Multi-language Support: English and Spanish interface\n\nProvide specific, actionable guidance based on the user's question.`\n          },\n          {\n            role: \"user\",\n            content: question\n          }\n        ],\n      });\n\n      return response.choices[0].message.content || 'I apologize, but I couldn\\'t generate a helpful response. Please try rephrasing your question.';\n    } catch (error) {\n      console.error('Help generation error:', error);\n      return language === 'es' \n        ? 'Lo siento, no pude generar una respuesta útil. Por favor intenta reformular tu pregunta.'\n        : 'I apologize, but I couldn\\'t generate a helpful response. Please try rephrasing your question.';\n    }\n  }\n\n  // Analyze case data for insights and compliance\n  async analyzeCaseCompliance(caseData: any, checkins: any[]): Promise<{\n    complianceStatus: 'compliant' | 'warning' | 'non-compliant';\n    riskLevel: 'low' | 'medium' | 'high';\n    insights: string[];\n    recommendations: string[];\n  }> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a compliance analyst for a bail bonds system. Analyze case data and check-in history to assess compliance and risk.\n\nConsider:\n- Check-in frequency and consistency\n- Court date compliance\n- Payment history\n- Case status and progression\n- Any missed appointments or violations\n\nRespond with JSON: {\n  \"complianceStatus\": \"compliant|warning|non-compliant\",\n  \"riskLevel\": \"low|medium|high\", \n  \"insights\": [\"array of key insights\"],\n  \"recommendations\": [\"array of actionable recommendations\"]\n}`\n          },\n          {\n            role: \"user\",\n            content: `Analyze this case:\nCase Data: ${JSON.stringify(caseData)}\nCheck-in History: ${JSON.stringify(checkins)}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return {\n        complianceStatus: result.complianceStatus || 'warning',\n        riskLevel: result.riskLevel || 'medium',\n        insights: result.insights || [],\n        recommendations: result.recommendations || []\n      };\n    } catch (error) {\n      console.error('Compliance analysis error:', error);\n      return {\n        complianceStatus: 'warning',\n        riskLevel: 'medium',\n        insights: ['Unable to analyze compliance data'],\n        recommendations: ['Please review case manually']\n      };\n    }\n  }\n}\n\nexport const aiService = new AIService();","size_bytes":16275},"shared/i18n.ts":{"content":"// Internationalization (i18n) support for English and Spanish\n// Referenced from the javascript_openai integration\n\nexport type Language = 'en' | 'es';\n\nexport interface Translation {\n  [key: string]: string | Translation;\n}\n\nexport const translations: Record<Language, Translation> = {\n  en: {\n    common: {\n      save: 'Save',\n      cancel: 'Cancel',\n      edit: 'Edit',\n      delete: 'Delete',\n      view: 'View',\n      add: 'Add',\n      search: 'Search',\n      loading: 'Loading...',\n      actions: 'Actions',\n      status: 'Status',\n      date: 'Date',\n      amount: 'Amount',\n      total: 'Total',\n      yes: 'Yes',\n      no: 'No',\n      required: 'Required',\n      optional: 'Optional',\n      upload: 'Upload',\n      download: 'Download',\n      close: 'Close',\n      submit: 'Submit',\n      next: 'Next',\n      previous: 'Previous',\n      refresh: 'Refresh',\n      filter: 'Filter',\n      clear: 'Clear',\n      selectLanguage: 'Select Language',\n    },\n    navigation: {\n      dashboard: 'Dashboard',\n      clients: 'Clients',\n      cases: 'Cases',\n      bonds: 'Bonds',\n      payments: 'Payments',\n      documents: 'Documents',\n      reports: 'Reports',\n      settings: 'Settings',\n      help: 'Help',\n      logout: 'Logout',\n    },\n    dashboard: {\n      title: 'Dashboard',\n      overview: 'Overview',\n      recentActivity: 'Recent Activity',\n      upcomingDates: 'Upcoming Court Dates',\n      statistics: 'Statistics',\n      activeBonds: 'Active Bonds',\n      totalRevenue: 'Total Revenue',\n      pendingPayments: 'Pending Payments',\n      overduePayments: 'Overdue Payments',\n    },\n    clients: {\n      title: 'Clients',\n      addClient: 'Add Client',\n      clientDetails: 'Client Details',\n      personalInfo: 'Personal Information',\n      contactInfo: 'Contact Information',\n      firstName: 'First Name',\n      lastName: 'Last Name',\n      email: 'Email',\n      phone: 'Phone',\n      address: 'Address',\n      city: 'City',\n      state: 'State',\n      zipCode: 'ZIP Code',\n      dateOfBirth: 'Date of Birth',\n      ssn: 'SSN',\n      emergencyContact: 'Emergency Contact',\n      emergencyPhone: 'Emergency Phone',\n      searchClients: 'Search clients...',\n      noClients: 'No clients found',\n      addFirstClient: 'Add your first client to get started',\n    },\n    cases: {\n      title: 'Cases',\n      addCase: 'Add Case',\n      caseDetails: 'Case Details',\n      caseNumber: 'Case Number',\n      chargeType: 'Charge Type',\n      chargeDescription: 'Charge Description',\n      arrestDate: 'Arrest Date',\n      courtDate: 'Court Date',\n      courtLocation: 'Court Location',\n      judgeName: 'Judge Name',\n      prosecutorName: 'Prosecutor Name',\n      defenseAttorney: 'Defense Attorney',\n      bondAmount: 'Bond Amount',\n      status: 'Status',\n      open: 'Open',\n      closed: 'Closed',\n      dismissed: 'Dismissed',\n      timeline: 'Timeline',\n      notes: 'Notes',\n      searchCases: 'Search cases...',\n      noCases: 'No cases found',\n      addFirstCase: 'Add your first case to get started',\n    },\n    bonds: {\n      title: 'Bonds',\n      addBond: 'Add Bond',\n      bondDetails: 'Bond Details',\n      bondNumber: 'Bond Number',\n      bondType: 'Bond Type',\n      bondAmount: 'Bond Amount',\n      premium: 'Premium',\n      collateral: 'Collateral',\n      cosigner: 'Co-signer',\n      issueDate: 'Issue Date',\n      expirationDate: 'Expiration Date',\n      active: 'Active',\n      forfeited: 'Forfeited',\n      exonerated: 'Exonerated',\n      searchBonds: 'Search bonds...',\n      noBonds: 'No bonds found',\n      addFirstBond: 'Add your first bond to get started',\n    },\n    payments: {\n      title: 'Payments',\n      addPayment: 'Add Payment',\n      paymentDetails: 'Payment Details',\n      paymentAmount: 'Payment Amount',\n      paymentDate: 'Payment Date',\n      paymentMethod: 'Payment Method',\n      cash: 'Cash',\n      check: 'Check',\n      card: 'Credit Card',\n      transfer: 'Bank Transfer',\n      notes: 'Notes',\n      pending: 'Pending',\n      completed: 'Completed',\n      failed: 'Failed',\n      searchPayments: 'Search payments...',\n      noPayments: 'No payments found',\n      addFirstPayment: 'Add your first payment to get started',\n    },\n    documents: {\n      title: 'Documents',\n      uploadDocument: 'Upload Document',\n      documentDetails: 'Document Details',\n      fileName: 'File Name',\n      fileType: 'File Type',\n      uploadDate: 'Upload Date',\n      category: 'Category',\n      contract: 'Contract',\n      courtPaper: 'Court Paper',\n      identification: 'Identification',\n      financial: 'Financial',\n      other: 'Other',\n      relatedTo: 'Related To',\n      client: 'Client',\n      case: 'Case',\n      bond: 'Bond',\n      dragDropFiles: 'Drag and drop files here, or click to select',\n      supportedFormats: 'Supported formats: PDF, DOC, DOCX, JPG, PNG (max 10MB)',\n      searchDocuments: 'Search documents...',\n      noDocuments: 'No documents found',\n      uploadFirstDocument: 'Upload your first document to get started',\n    },\n    checkin: {\n      title: 'Client Check-in',\n      scheduleCheckin: 'Schedule Check-in',\n      checkinHistory: 'Check-in History',\n      takePhoto: 'Take Photo',\n      uploadPhoto: 'Upload Photo',\n      location: 'Location',\n      gpsRequired: 'GPS location required',\n      photoRequired: 'Photo verification required',\n      checkinSuccessful: 'Check-in successful',\n      checkinFailed: 'Check-in failed',\n      nextCheckin: 'Next Check-in',\n      overdueCheckin: 'Overdue Check-in',\n      compliance: 'Compliance Status',\n      compliant: 'Compliant',\n      nonCompliant: 'Non-Compliant',\n      warning: 'Warning',\n    },\n    search: {\n      placeholder: 'Ask me anything about clients, cases, or bonds...',\n      searching: 'Searching...',\n      noResults: 'No results found',\n      tryDifferent: 'Try a different search term',\n      suggestions: 'Suggestions',\n      recentSearches: 'Recent Searches',\n    },\n    help: {\n      title: 'Help & Support',\n      userGuide: 'User Guide',\n      tutorials: 'Tutorials',\n      faq: 'Frequently Asked Questions',\n      contact: 'Contact Support',\n      aiAssistant: 'AI Assistant',\n      askQuestion: 'Ask a question...',\n    },\n    errors: {\n      generic: 'An error occurred. Please try again.',\n      network: 'Network error. Please check your connection.',\n      validation: 'Please check the form for errors.',\n      unauthorized: 'You are not authorized to perform this action.',\n      notFound: 'The requested item was not found.',\n      serverError: 'Server error. Please try again later.',\n    },\n    clientPortal: {\n      title: 'Client Portal',\n      secureClientAccess: 'Secure access for bail bond clients',\n      signInToYourAccount: 'Sign in to your account',\n      username: 'Username',\n      password: 'Password',\n      enterUsername: 'Enter your username',\n      enterPassword: 'Enter your password',\n      signIn: 'Sign In',\n      signingIn: 'Signing in...',\n      loginSuccessful: 'Login Successful',\n      loginFailed: 'Login Failed',\n      welcomeBackClient: 'Welcome back to your client portal',\n      invalidCredentials: 'Invalid username or password',\n      needHelp: 'Need Help?',\n      contactYourBailAgent: 'Contact your bail agent for assistance',\n      emergencySupport: 'Emergency Support',\n      loginCredentialsProvidedByAgent: 'Login credentials are provided by your bail agent',\n      secureConnectionProtected: 'Secure connection protected by SSL encryption',\n      dashboard: 'Dashboard',\n      myBonds: 'My Bonds',\n      courtDates: 'Court Dates',\n      checkIn: 'Check In',\n      checkinHistory: 'Check-in History',\n      bondDetails: 'Bond Details',\n      caseInformation: 'Case Information',\n      paymentStatus: 'Payment Status',\n      complianceStatus: 'Compliance Status',\n      lastCheckin: 'Last Check-in',\n      nextCourtDate: 'Next Court Date',\n      bondAmount: 'Bond Amount',\n      premiumPaid: 'Premium Paid',\n      balanceDue: 'Balance Due',\n      takePhotoCheckin: 'Take Photo for Check-in',\n      uploadPhotoCheckin: 'Upload Photo for Check-in',\n      enableLocation: 'Enable Location Services',\n      locationRequired: 'Location services are required for check-ins',\n      photoRequired: 'Photo verification is required for check-ins',\n      checkinCompleted: 'Check-in completed successfully',\n      checkinFailed: 'Check-in failed. Please try again.',\n      viewDetails: 'View Details',\n      logoutSuccessful: 'Logout Successful',\n      comeBackSoon: 'Come back soon for your next check-in',\n      checkinSuccessful: 'Check-in completed successfully',\n      pleaseRetry: 'Please try again',\n      selectBond: 'Select Bond',\n      bondRequiredForCheckin: 'Please select a bond for check-in',\n      noRecentCheckin: 'No recent check-in',\n      selectedForCheckin: 'Selected for check-in',\n      selectBondForCheckin: 'Please select a bond from the Bonds tab first',\n      takePhoto: 'Take Photo',\n      tapToTakePhoto: 'Tap to use your camera',\n      ensureGoodLighting: 'Ensure good lighting for photo verification',\n      photoVerificationRequired: 'Photo verification is required for all check-ins',\n    },\n  },\n  es: {\n    common: {\n      save: 'Guardar',\n      cancel: 'Cancelar',\n      edit: 'Editar',\n      delete: 'Eliminar',\n      view: 'Ver',\n      add: 'Agregar',\n      search: 'Buscar',\n      loading: 'Cargando...',\n      actions: 'Acciones',\n      status: 'Estado',\n      date: 'Fecha',\n      amount: 'Cantidad',\n      total: 'Total',\n      yes: 'Sí',\n      no: 'No',\n      required: 'Requerido',\n      optional: 'Opcional',\n      upload: 'Subir',\n      download: 'Descargar',\n      close: 'Cerrar',\n      submit: 'Enviar',\n      next: 'Siguiente',\n      previous: 'Anterior',\n      refresh: 'Actualizar',\n      filter: 'Filtrar',\n      clear: 'Limpiar',\n      selectLanguage: 'Seleccionar Idioma',\n    },\n    navigation: {\n      dashboard: 'Panel de Control',\n      clients: 'Clientes',\n      cases: 'Casos',\n      bonds: 'Fianzas',\n      payments: 'Pagos',\n      documents: 'Documentos',\n      reports: 'Reportes',\n      settings: 'Configuración',\n      help: 'Ayuda',\n      logout: 'Cerrar Sesión',\n    },\n    dashboard: {\n      title: 'Panel de Control',\n      overview: 'Resumen',\n      recentActivity: 'Actividad Reciente',\n      upcomingDates: 'Fechas de Corte Próximas',\n      statistics: 'Estadísticas',\n      activeBonds: 'Fianzas Activas',\n      totalRevenue: 'Ingresos Totales',\n      pendingPayments: 'Pagos Pendientes',\n      overduePayments: 'Pagos Vencidos',\n    },\n    clients: {\n      title: 'Clientes',\n      addClient: 'Agregar Cliente',\n      clientDetails: 'Detalles del Cliente',\n      personalInfo: 'Información Personal',\n      contactInfo: 'Información de Contacto',\n      firstName: 'Nombre',\n      lastName: 'Apellido',\n      email: 'Correo Electrónico',\n      phone: 'Teléfono',\n      address: 'Dirección',\n      city: 'Ciudad',\n      state: 'Estado',\n      zipCode: 'Código Postal',\n      dateOfBirth: 'Fecha de Nacimiento',\n      ssn: 'Número de Seguro Social',\n      emergencyContact: 'Contacto de Emergencia',\n      emergencyPhone: 'Teléfono de Emergencia',\n      searchClients: 'Buscar clientes...',\n      noClients: 'No se encontraron clientes',\n      addFirstClient: 'Agrega tu primer cliente para comenzar',\n    },\n    cases: {\n      title: 'Casos',\n      addCase: 'Agregar Caso',\n      caseDetails: 'Detalles del Caso',\n      caseNumber: 'Número de Caso',\n      chargeType: 'Tipo de Cargo',\n      chargeDescription: 'Descripción del Cargo',\n      arrestDate: 'Fecha de Arresto',\n      courtDate: 'Fecha de Corte',\n      courtLocation: 'Ubicación del Tribunal',\n      judgeName: 'Nombre del Juez',\n      prosecutorName: 'Nombre del Fiscal',\n      defenseAttorney: 'Abogado Defensor',\n      bondAmount: 'Monto de la Fianza',\n      status: 'Estado',\n      open: 'Abierto',\n      closed: 'Cerrado',\n      dismissed: 'Desestimado',\n      timeline: 'Cronología',\n      notes: 'Notas',\n      searchCases: 'Buscar casos...',\n      noCases: 'No se encontraron casos',\n      addFirstCase: 'Agrega tu primer caso para comenzar',\n    },\n    bonds: {\n      title: 'Fianzas',\n      addBond: 'Agregar Fianza',\n      bondDetails: 'Detalles de la Fianza',\n      bondNumber: 'Número de Fianza',\n      bondType: 'Tipo de Fianza',\n      bondAmount: 'Monto de la Fianza',\n      premium: 'Prima',\n      collateral: 'Garantía',\n      cosigner: 'Codeudor',\n      issueDate: 'Fecha de Emisión',\n      expirationDate: 'Fecha de Vencimiento',\n      active: 'Activa',\n      forfeited: 'Perdida',\n      exonerated: 'Exonerada',\n      searchBonds: 'Buscar fianzas...',\n      noBonds: 'No se encontraron fianzas',\n      addFirstBond: 'Agrega tu primera fianza para comenzar',\n    },\n    payments: {\n      title: 'Pagos',\n      addPayment: 'Agregar Pago',\n      paymentDetails: 'Detalles del Pago',\n      paymentAmount: 'Monto del Pago',\n      paymentDate: 'Fecha de Pago',\n      paymentMethod: 'Método de Pago',\n      cash: 'Efectivo',\n      check: 'Cheque',\n      card: 'Tarjeta de Crédito',\n      transfer: 'Transferencia Bancaria',\n      notes: 'Notas',\n      pending: 'Pendiente',\n      completed: 'Completado',\n      failed: 'Fallido',\n      searchPayments: 'Buscar pagos...',\n      noPayments: 'No se encontraron pagos',\n      addFirstPayment: 'Agrega tu primer pago para comenzar',\n    },\n    documents: {\n      title: 'Documentos',\n      uploadDocument: 'Subir Documento',\n      documentDetails: 'Detalles del Documento',\n      fileName: 'Nombre del Archivo',\n      fileType: 'Tipo de Archivo',\n      uploadDate: 'Fecha de Subida',\n      category: 'Categoría',\n      contract: 'Contrato',\n      courtPaper: 'Documento Judicial',\n      identification: 'Identificación',\n      financial: 'Financiero',\n      other: 'Otro',\n      relatedTo: 'Relacionado con',\n      client: 'Cliente',\n      case: 'Caso',\n      bond: 'Fianza',\n      dragDropFiles: 'Arrastra y suelta archivos aquí, o haz clic para seleccionar',\n      supportedFormats: 'Formatos soportados: PDF, DOC, DOCX, JPG, PNG (máx 10MB)',\n      searchDocuments: 'Buscar documentos...',\n      noDocuments: 'No se encontraron documentos',\n      uploadFirstDocument: 'Sube tu primer documento para comenzar',\n    },\n    checkin: {\n      title: 'Registro de Cliente',\n      scheduleCheckin: 'Programar Registro',\n      checkinHistory: 'Historial de Registros',\n      takePhoto: 'Tomar Foto',\n      uploadPhoto: 'Subir Foto',\n      location: 'Ubicación',\n      gpsRequired: 'Ubicación GPS requerida',\n      photoRequired: 'Verificación fotográfica requerida',\n      checkinSuccessful: 'Registro exitoso',\n      checkinFailed: 'Registro fallido',\n      nextCheckin: 'Próximo Registro',\n      overdueCheckin: 'Registro Vencido',\n      compliance: 'Estado de Cumplimiento',\n      compliant: 'Cumpliendo',\n      nonCompliant: 'No Cumpliendo',\n      warning: 'Advertencia',\n    },\n    search: {\n      placeholder: 'Pregúntame cualquier cosa sobre clientes, casos o fianzas...',\n      searching: 'Buscando...',\n      noResults: 'No se encontraron resultados',\n      tryDifferent: 'Intenta con un término de búsqueda diferente',\n      suggestions: 'Sugerencias',\n      recentSearches: 'Búsquedas Recientes',\n    },\n    help: {\n      title: 'Ayuda y Soporte',\n      userGuide: 'Guía del Usuario',\n      tutorials: 'Tutoriales',\n      faq: 'Preguntas Frecuentes',\n      contact: 'Contactar Soporte',\n      aiAssistant: 'Asistente IA',\n      askQuestion: 'Haz una pregunta...',\n    },\n    errors: {\n      generic: 'Ocurrió un error. Por favor intenta de nuevo.',\n      network: 'Error de red. Por favor verifica tu conexión.',\n      validation: 'Por favor revisa el formulario en busca de errores.',\n      unauthorized: 'No estás autorizado para realizar esta acción.',\n      notFound: 'El elemento solicitado no fue encontrado.',\n      serverError: 'Error del servidor. Por favor intenta más tarde.',\n    },\n    clientPortal: {\n      title: 'Portal del Cliente',\n      secureClientAccess: 'Acceso seguro para clientes de fianzas',\n      signInToYourAccount: 'Inicia sesión en tu cuenta',\n      username: 'Nombre de usuario',\n      password: 'Contraseña',\n      enterUsername: 'Ingresa tu nombre de usuario',\n      enterPassword: 'Ingresa tu contraseña',\n      signIn: 'Iniciar Sesión',\n      signingIn: 'Iniciando sesión...',\n      loginSuccessful: 'Inicio de Sesión Exitoso',\n      loginFailed: 'Falló el Inicio de Sesión',\n      welcomeBackClient: 'Bienvenido de vuelta a tu portal de cliente',\n      invalidCredentials: 'Nombre de usuario o contraseña inválidos',\n      needHelp: '¿Necesitas Ayuda?',\n      contactYourBailAgent: 'Contacta a tu agente de fianzas para asistencia',\n      emergencySupport: 'Soporte de Emergencia',\n      loginCredentialsProvidedByAgent: 'Las credenciales de acceso son proporcionadas por tu agente de fianzas',\n      secureConnectionProtected: 'Conexión segura protegida por encriptación SSL',\n      dashboard: 'Panel de Control',\n      myBonds: 'Mis Fianzas',\n      courtDates: 'Fechas de Corte',\n      checkIn: 'Registrarse',\n      checkinHistory: 'Historial de Registros',\n      bondDetails: 'Detalles de la Fianza',\n      caseInformation: 'Información del Caso',\n      paymentStatus: 'Estado del Pago',\n      complianceStatus: 'Estado de Cumplimiento',\n      lastCheckin: 'Último Registro',\n      nextCourtDate: 'Próxima Fecha de Corte',\n      bondAmount: 'Monto de la Fianza',\n      premiumPaid: 'Prima Pagada',\n      balanceDue: 'Saldo Pendiente',\n      takePhotoCheckin: 'Tomar Foto para Registro',\n      uploadPhotoCheckin: 'Subir Foto para Registro',\n      enableLocation: 'Habilitar Servicios de Ubicación',\n      locationRequired: 'Los servicios de ubicación son requeridos para registros',\n      photoRequired: 'La verificación fotográfica es requerida para registros',\n      checkinCompleted: 'Registro completado exitosamente',\n      checkinFailed: 'Registro falló. Por favor intenta de nuevo.',\n      viewDetails: 'Ver Detalles',\n      logoutSuccessful: 'Cierre de Sesión Exitoso',\n      comeBackSoon: 'Regresa pronto para tu próximo registro',\n      checkinSuccessful: 'Registro completado exitosamente',\n      pleaseRetry: 'Por favor intenta de nuevo',\n      selectBond: 'Seleccionar Fianza',\n      bondRequiredForCheckin: 'Por favor selecciona una fianza para el registro',\n      noRecentCheckin: 'Sin registro reciente',\n      selectedForCheckin: 'Seleccionado para registro',\n      selectBondForCheckin: 'Por favor selecciona una fianza de la pestaña Fianzas primero',\n      takePhoto: 'Tomar Foto',\n      tapToTakePhoto: 'Toca para usar tu cámara',\n      ensureGoodLighting: 'Asegúrate de tener buena iluminación para la verificación fotográfica',\n      photoVerificationRequired: 'La verificación fotográfica es requerida para todos los registros',\n    },\n  },\n};\n\n// Helper function to get nested translation\nexport function getTranslation(\n  language: Language,\n  key: string,\n  fallback?: string\n): string {\n  const keys = key.split('.');\n  let value: any = translations[language];\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  if (typeof value === 'string') {\n    return value;\n  }\n  \n  // Fallback to English if not found in current language\n  if (language !== 'en') {\n    value = translations.en;\n    for (const k of keys) {\n      value = value?.[k];\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n  }\n  \n  return fallback || key;\n}\n\n// Translation hook for React components\nexport function useTranslation(language: Language) {\n  return {\n    t: (key: string, fallback?: string) => getTranslation(language, key, fallback),\n    language,\n  };\n}","size_bytes":19682},"client/src/components/contracts/contract-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { FileText, Download, Eye, Edit, Plus, Search, Filter } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertContractTemplateSchema, type InsertContractTemplate } from \"@shared/schema\";\n\ninterface ContractTemplate {\n  id: string;\n  name: string;\n  nameEs: string;\n  type: 'bail-agreement' | 'indemnity' | 'collateral' | 'payment-plan' | 'power-of-attorney';\n  description: string;\n  descriptionEs: string;\n  content: string;\n  contentEs: string;\n  variables: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface GeneratedContract {\n  id: string;\n  templateId: string;\n  clientId: string;\n  clientName: string;\n  caseId?: string;\n  bondId?: string;\n  content: string;\n  status: 'draft' | 'sent' | 'signed' | 'executed';\n  createdAt: string;\n  signedAt?: string;\n  variables: Record<string, any>;\n}\n\nexport function ContractManager() {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<ContractTemplate | null>(null);\n\n  // Form setup for contract template creation\n  const form = useForm<InsertContractTemplate>({\n    resolver: zodResolver(insertContractTemplateSchema),\n    defaultValues: {\n      name: \"\",\n      nameEs: \"\",\n      type: \"bail-agreement\",\n      description: \"\",\n      descriptionEs: \"\",\n      content: \"\",\n      contentEs: \"\",\n      variables: [],\n      isActive: true,\n      createdBy: \"system-user\" // Using system user for now\n    }\n  });\n\n  // Fetch contract templates from API\n  const { data: contractTemplates = [], isLoading: templatesLoading, error: templatesError } = useQuery<ContractTemplate[]>({\n    queryKey: ['/api/contract-templates'],\n  });\n\n  // Create template mutation\n  const createTemplateMutation = useMutation({\n    mutationFn: async (data: InsertContractTemplate) => {\n      // Parse variables from comma-separated string to array\n      const formData = {\n        ...data,\n        variables: typeof data.variables === 'string' \n          ? data.variables.split(',').map(v => v.trim()).filter(v => v) \n          : data.variables\n      };\n      return apiRequest('POST', '/api/contract-templates', formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === 'es' ? 'Plantilla creada' : 'Template created',\n        description: language === 'es' ? 'La plantilla se ha creado exitosamente' : 'Template created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contract-templates'] });\n      setShowCreateDialog(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: language === 'es' ? 'Error al crear plantilla' : 'Error creating template',\n        description: error?.message || (language === 'es' ? 'No se pudo crear la plantilla' : 'Failed to create template'),\n      });\n    }\n  });\n\n  // Download contract mutation\n  const downloadContractMutation = useMutation({\n    mutationFn: async (contractId: string) => {\n      const response = await fetch(`/api/contracts/${contractId}/download`);\n      if (!response.ok) throw new Error('Download failed');\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `contract_${contractId}.html`;\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    onSuccess: () => {\n      toast({\n        title: language === 'es' ? 'Descarga exitosa' : 'Download successful',\n        description: language === 'es' ? 'El contrato se ha descargado correctamente' : 'Contract downloaded successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: language === 'es' ? 'Error de descarga' : 'Download error',\n        description: language === 'es' ? 'No se pudo descargar el contrato' : 'Failed to download contract',\n      });\n    }\n  });\n\n  // Form submission handler\n  const onSubmit = (data: InsertContractTemplate) => {\n    createTemplateMutation.mutate(data);\n  };\n\n  const filteredTemplates = contractTemplates.filter(template => {\n    const matchesSearch = !searchTerm || \n      (language === 'es' ? template.nameEs : template.name).toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (language === 'es' ? template.descriptionEs : template.description).toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = !typeFilter || typeFilter === \"all\" || template.type === typeFilter;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const getTypeLabel = (type: string) => {\n    const labels = {\n      'bail-agreement': language === 'es' ? 'Acuerdo de Fianza' : 'Bail Agreement',\n      'indemnity': language === 'es' ? 'Indemnización' : 'Indemnity',\n      'collateral': language === 'es' ? 'Garantía' : 'Collateral',\n      'payment-plan': language === 'es' ? 'Plan de Pago' : 'Payment Plan',\n      'power-of-attorney': language === 'es' ? 'Poder Legal' : 'Power of Attorney'\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const getTypeColor = (type: string) => {\n    const colors = {\n      'bail-agreement': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n      'indemnity': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n      'collateral': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      'payment-plan': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      'power-of-attorney': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">\n            {language === 'es' ? 'Gestión de Contratos' : 'Contract Management'}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === 'es' \n              ? 'Genere y gestione contratos legales precisos para su negocio'\n              : 'Generate and manage accurate legal contracts for your business'\n            }\n          </p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          {language === 'es' ? 'Nueva Plantilla' : 'New Template'}\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">\n            {language === 'es' ? 'Plantillas de Contratos' : 'Contract Templates'}\n          </CardTitle>\n          <CardDescription>\n            {language === 'es' \n              ? 'Gestione plantillas de contratos y genere documentos personalizados'\n              : 'Manage contract templates and generate personalized documents'\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex space-x-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder={language === 'es' ? 'Buscar plantillas...' : 'Search templates...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder={language === 'es' ? 'Tipo de contrato' : 'Contract type'} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">\n                  {language === 'es' ? 'Todos los tipos' : 'All types'}\n                </SelectItem>\n                <SelectItem value=\"bail-agreement\">\n                  {language === 'es' ? 'Acuerdo de Fianza' : 'Bail Agreement'}\n                </SelectItem>\n                <SelectItem value=\"indemnity\">\n                  {language === 'es' ? 'Indemnización' : 'Indemnity'}\n                </SelectItem>\n                <SelectItem value=\"collateral\">\n                  {language === 'es' ? 'Garantía' : 'Collateral'}\n                </SelectItem>\n                <SelectItem value=\"payment-plan\">\n                  {language === 'es' ? 'Plan de Pago' : 'Payment Plan'}\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {templatesLoading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <div className=\"text-muted-foreground\">\n                {language === 'es' ? 'Cargando plantillas...' : 'Loading templates...'}\n              </div>\n            </div>\n          ) : templatesError ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <div className=\"text-destructive\">\n                {language === 'es' ? 'Error al cargar las plantillas' : 'Error loading templates'}\n              </div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{language === 'es' ? 'Nombre' : 'Name'}</TableHead>\n                  <TableHead>{language === 'es' ? 'Tipo' : 'Type'}</TableHead>\n                  <TableHead>{language === 'es' ? 'Descripción' : 'Description'}</TableHead>\n                  <TableHead>{language === 'es' ? 'Variables' : 'Variables'}</TableHead>\n                  <TableHead>{language === 'es' ? 'Estado' : 'Status'}</TableHead>\n                  <TableHead>{language === 'es' ? 'Acciones' : 'Actions'}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTemplates.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center text-muted-foreground py-8\">\n                      {language === 'es' ? 'No se encontraron plantillas' : 'No templates found'}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredTemplates.map((template) => (\n                <TableRow key={template.id}>\n                  <TableCell className=\"font-medium\">\n                    {language === 'es' ? template.nameEs : template.name}\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getTypeColor(template.type)}>\n                      {getTypeLabel(template.type)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {language === 'es' ? template.descriptionEs : template.description}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">{template.variables.length} vars</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                      {template.isActive \n                        ? (language === 'es' ? 'Activo' : 'Active')\n                        : (language === 'es' ? 'Inactivo' : 'Inactive')\n                      }\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setSelectedTemplate(template)}\n                        data-testid={`button-preview-${template.id}`}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        data-testid={`button-edit-${template.id}`}\n                        onClick={() => {\n                          toast({\n                            title: language === 'es' ? 'Próximamente' : 'Coming Soon',\n                            description: language === 'es' ? 'La edición de plantillas estará disponible pronto' : 'Template editing will be available soon',\n                          });\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        data-testid={`button-download-${template.id}`}\n                        onClick={() => {\n                          toast({\n                            title: language === 'es' ? 'Generar primero' : 'Generate First',\n                            description: language === 'es' ? 'Primero genera un contrato para descargarlo' : 'Generate a contract first to download it',\n                          });\n                        }}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                  </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Create Template Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {language === 'es' ? 'Crear Nueva Plantilla' : 'Create New Template'}\n            </DialogTitle>\n            <DialogDescription>\n              {language === 'es' \n                ? 'Cree una nueva plantilla de contrato para usar en documentos legales'\n                : 'Create a new contract template to use in legal documents'\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Nombre (Inglés)' : 'Name (English)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder={language === 'es' ? 'Ej: Bail Agreement' : 'e.g., Bail Agreement'}\n                          data-testid=\"input-template-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"nameEs\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Nombre (Español)' : 'Name (Spanish)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder={language === 'es' ? 'Ej: Acuerdo de Fianza' : 'e.g., Acuerdo de Fianza'}\n                          data-testid=\"input-template-name-es\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {language === 'es' ? 'Tipo de Contrato' : 'Contract Type'}\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-template-type\">\n                          <SelectValue placeholder={language === 'es' ? 'Seleccionar tipo' : 'Select type'} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"bail-agreement\">\n                          {language === 'es' ? 'Acuerdo de Fianza' : 'Bail Agreement'}\n                        </SelectItem>\n                        <SelectItem value=\"indemnity\">\n                          {language === 'es' ? 'Indemnización' : 'Indemnity'}\n                        </SelectItem>\n                        <SelectItem value=\"collateral\">\n                          {language === 'es' ? 'Garantía' : 'Collateral'}\n                        </SelectItem>\n                        <SelectItem value=\"payment-plan\">\n                          {language === 'es' ? 'Plan de Pago' : 'Payment Plan'}\n                        </SelectItem>\n                        <SelectItem value=\"power-of-attorney\">\n                          {language === 'es' ? 'Poder Legal' : 'Power of Attorney'}\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Descripción (Inglés)' : 'Description (English)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder={language === 'es' ? 'Describe the purpose of this template...' : 'Describe the purpose of this template...'}\n                          data-testid=\"textarea-template-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"descriptionEs\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Descripción (Español)' : 'Description (Spanish)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder={language === 'es' ? 'Describa el propósito de esta plantilla...' : 'Describa el propósito de esta plantilla...'}\n                          data-testid=\"textarea-template-description-es\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Contenido (Inglés)' : 'Content (English)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          rows={6}\n                          placeholder={language === 'es' \n                            ? 'Enter the contract content in English...' \n                            : 'Enter the contract content in English...'}\n                          data-testid=\"textarea-template-content\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"contentEs\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {language === 'es' ? 'Contenido (Español)' : 'Content (Spanish)'}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          rows={6}\n                          placeholder={language === 'es' \n                            ? 'Ingrese el contenido del contrato en español...' \n                            : 'Ingrese el contenido del contrato en español...'}\n                          data-testid=\"textarea-template-content-es\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"variables\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {language === 'es' ? 'Variables (separadas por coma)' : 'Variables (comma-separated)'}\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder={language === 'es' \n                          ? 'clientName, bondAmount, courtDate' \n                          : 'clientName, bondAmount, courtDate'}\n                        data-testid=\"input-template-variables\"\n                        {...field}\n                        value={Array.isArray(field.value) ? field.value.join(', ') : String(field.value || '')}\n                        onChange={(e) => field.onChange(e.target.value)}\n                      />\n                    </FormControl>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {language === 'es' \n                        ? 'Las variables se usarán como {{clientName}}, {{bondAmount}}, etc.'\n                        : 'Variables will be used as {{clientName}}, {{bondAmount}}, etc.'}\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowCreateDialog(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-template\"\n                >\n                  {language === 'es' ? 'Cancelar' : 'Cancel'}\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={createTemplateMutation.isPending}\n                  data-testid=\"button-save-template\"\n                >\n                  {createTemplateMutation.isPending \n                    ? (language === 'es' ? 'Creando...' : 'Creating...') \n                    : (language === 'es' ? 'Crear Plantilla' : 'Create Template')\n                  }\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Template Preview Dialog */}\n      <Dialog open={!!selectedTemplate} onOpenChange={() => setSelectedTemplate(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedTemplate && (language === 'es' ? selectedTemplate.nameEs : selectedTemplate?.name)}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedTemplate && (language === 'es' ? selectedTemplate.descriptionEs : selectedTemplate?.description)}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">\n                  {language === 'es' ? 'Variables disponibles:' : 'Available variables:'}\n                </Label>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {selectedTemplate.variables.map((variable) => (\n                    <Badge key={variable} variant=\"outline\">\n                      {`{{${variable}}}`}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">\n                  {language === 'es' ? 'Vista previa del contrato:' : 'Contract preview:'}\n                </Label>\n                <div className=\"mt-2 p-4 bg-muted rounded-lg\">\n                  <pre className=\"text-sm whitespace-pre-wrap\">\n                    {language === 'es' ? selectedTemplate.contentEs : selectedTemplate.content}\n                  </pre>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setSelectedTemplate(null)}>\n                  {language === 'es' ? 'Cerrar' : 'Close'}\n                </Button>\n                <Button>\n                  {language === 'es' ? 'Generar Contrato' : 'Generate Contract'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":27049},"client/src/components/onboarding/onboarding-wizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { CheckCircle, Circle, ArrowRight, ArrowLeft, Book, FileText, Users, CreditCard } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  titleEs: string;\n  description: string;\n  descriptionEs: string;\n  icon: React.ReactNode;\n  component: React.ReactNode;\n  isCompleted: boolean;\n  isRequired: boolean;\n}\n\nexport function OnboardingWizard({ onComplete }: { onComplete?: () => void }) {\n  const { t, language } = useLanguage();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());\n\n  const steps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to BailBond Pro',\n      titleEs: 'Bienvenido a BailBond Pro',\n      description: 'Learn the basics of your new bail bonds management system',\n      descriptionEs: 'Aprende los conceptos básicos de tu nuevo sistema de gestión de fianzas',\n      icon: <Book className=\"h-6 w-6\" />,\n      component: <WelcomeStep />,\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'setup',\n      title: 'System Setup',\n      titleEs: 'Configuración del Sistema',\n      description: 'Configure your company information and preferences',\n      descriptionEs: 'Configura la información de tu empresa y preferencias',\n      icon: <FileText className=\"h-6 w-6\" />,\n      component: <SystemSetupStep />,\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'clients',\n      title: 'Client Management',\n      titleEs: 'Gestión de Clientes',\n      description: 'Learn how to add and manage clients',\n      descriptionEs: 'Aprende cómo agregar y gestionar clientes',\n      icon: <Users className=\"h-6 w-6\" />,\n      component: <ClientManagementStep />,\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'bonds',\n      title: 'Bond Processing',\n      titleEs: 'Procesamiento de Fianzas',\n      description: 'Understanding the bond creation and tracking process',\n      descriptionEs: 'Comprende el proceso de creación y seguimiento de fianzas',\n      icon: <CreditCard className=\"h-6 w-6\" />,\n      component: <BondProcessingStep />,\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'sops',\n      title: 'Standard Operating Procedures',\n      titleEs: 'Procedimientos Operativos Estándar',\n      description: 'Review essential SOPs and compliance requirements',\n      descriptionEs: 'Revisa los POE esenciales y requisitos de cumplimiento',\n      icon: <CheckCircle className=\"h-6 w-6\" />,\n      component: <SOPsStep />,\n      isCompleted: false,\n      isRequired: true\n    }\n  ];\n\n  const [currentSteps, setCurrentSteps] = useState(steps);\n  const progress = (completedSteps.size / steps.length) * 100;\n\n  const markStepCompleted = (stepId: string) => {\n    setCompletedSteps(prev => new Set([...Array.from(prev), stepId]));\n    setCurrentSteps(prev => \n      prev.map(step => \n        step.id === stepId ? { ...step, isCompleted: true } : step\n      )\n    );\n  };\n\n  const canProceed = currentSteps[currentStep]?.isCompleted || !currentSteps[currentStep]?.isRequired;\n  const isLastStep = currentStep === steps.length - 1;\n  const isFirstStep = currentStep === 0;\n\n  const handleNext = () => {\n    if (!isLastStep) {\n      setCurrentStep(prev => prev + 1);\n    } else if (completedSteps.size === steps.length) {\n      onComplete?.();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (!isFirstStep) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  const currentStepData = currentSteps[currentStep];\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">\n          {language === 'es' ? 'Configuración Inicial' : 'Initial Setup'}\n        </h1>\n        <p className=\"text-muted-foreground mb-4\">\n          {language === 'es' \n            ? 'Complete estos pasos para configurar completamente su sistema'\n            : 'Complete these steps to fully set up your system'\n          }\n        </p>\n        <Progress value={progress} className=\"w-full\" />\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          {completedSteps.size} {language === 'es' ? 'de' : 'of'} {steps.length} {language === 'es' ? 'pasos completados' : 'steps completed'}\n        </p>\n      </div>\n\n      {/* Step Navigation */}\n      <div className=\"flex items-center justify-center mb-8 overflow-x-auto\">\n        <div className=\"flex items-center space-x-4\">\n          {currentSteps.map((step, index) => (\n            <div\n              key={step.id}\n              className={`flex items-center ${\n                index < currentSteps.length - 1 ? 'after:w-8 after:h-px after:bg-border after:ml-4' : ''\n              }`}\n            >\n              <div\n                className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${\n                  index === currentStep\n                    ? 'bg-primary text-primary-foreground'\n                    : step.isCompleted\n                    ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300'\n                    : 'bg-muted text-muted-foreground hover:bg-muted/80'\n                }`}\n                onClick={() => setCurrentStep(index)}\n              >\n                {step.isCompleted ? (\n                  <CheckCircle className=\"h-5 w-5\" />\n                ) : (\n                  <Circle className=\"h-5 w-5\" />\n                )}\n                <span className=\"text-sm font-medium hidden md:block\">\n                  {language === 'es' ? step.titleEs : step.title}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Current Step Content */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              {currentStepData.icon}\n            </div>\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <span>{language === 'es' ? currentStepData.titleEs : currentStepData.title}</span>\n                {currentStepData.isRequired && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    {language === 'es' ? 'Requerido' : 'Required'}\n                  </Badge>\n                )}\n              </CardTitle>\n              <CardDescription>\n                {language === 'es' ? currentStepData.descriptionEs : currentStepData.description}\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <StepWrapper\n            stepId={currentStepData.id}\n            onComplete={() => markStepCompleted(currentStepData.id)}\n          >\n            {currentStepData.component}\n          </StepWrapper>\n        </CardContent>\n      </Card>\n\n      {/* Navigation Buttons */}\n      <div className=\"flex justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={handlePrevious}\n          disabled={isFirstStep}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          {language === 'es' ? 'Anterior' : 'Previous'}\n        </Button>\n        \n        <Button\n          onClick={handleNext}\n          disabled={!canProceed}\n        >\n          {isLastStep ? (language === 'es' ? 'Completar' : 'Complete') : (language === 'es' ? 'Siguiente' : 'Next')}\n          {!isLastStep && <ArrowRight className=\"h-4 w-4 ml-2\" />}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Step wrapper to handle completion logic\nfunction StepWrapper({ \n  children, \n  stepId, \n  onComplete \n}: { \n  children: React.ReactNode; \n  stepId: string; \n  onComplete: () => void; \n}) {\n  return (\n    <div>\n      {children}\n      <div className=\"mt-6\">\n        <Button onClick={onComplete}>\n          Mark Step Complete\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Individual Step Components\nfunction WelcomeStep() {\n  const { t, language } = useLanguage();\n  \n  return (\n    <div className=\"space-y-6\">\n      <div className=\"prose dark:prose-invert max-w-none\">\n        <h3>{language === 'es' ? 'Bienvenido a su Sistema de Gestión de Fianzas' : 'Welcome to Your Bail Bonds Management System'}</h3>\n        <p>\n          {language === 'es' \n            ? 'Este sistema le ayudará a gestionar eficientemente todos los aspectos de su negocio de fianzas:'\n            : 'This system will help you efficiently manage all aspects of your bail bonds business:'\n          }\n        </p>\n        <ul>\n          <li>{language === 'es' ? 'Gestión completa de clientes' : 'Complete client management'}</li>\n          <li>{language === 'es' ? 'Seguimiento de casos y fechas de corte' : 'Case tracking and court dates'}</li>\n          <li>{language === 'es' ? 'Procesamiento de fianzas y pagos' : 'Bond processing and payments'}</li>\n          <li>{language === 'es' ? 'Gestión de documentos legales' : 'Legal document management'}</li>\n          <li>{language === 'es' ? 'Registro de clientes con verificación de fotos' : 'Client check-ins with photo verification'}</li>\n          <li>{language === 'es' ? 'Búsqueda inteligente con IA' : 'AI-powered intelligent search'}</li>\n        </ul>\n        <p>\n          {language === 'es'\n            ? 'El sistema está completamente traducido al español e inglés para servir mejor a sus clientes.'\n            : 'The system is fully translated to Spanish and English to better serve your clients.'\n          }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction SystemSetupStep() {\n  const { language } = useLanguage();\n  \n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">\n        {language === 'es' ? 'Configuración de la Empresa' : 'Company Setup'}\n      </h3>\n      <div className=\"grid md:grid-cols-2 gap-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">\n              {language === 'es' ? 'Información de la Empresa' : 'Company Information'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"text-sm space-y-2\">\n              <li>• {language === 'es' ? 'Nombre de la empresa' : 'Company name'}</li>\n              <li>• {language === 'es' ? 'Información de contacto' : 'Contact information'}</li>\n              <li>• {language === 'es' ? 'Número de licencia' : 'License number'}</li>\n              <li>• {language === 'es' ? 'Logo y marca' : 'Logo and branding'}</li>\n            </ul>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">\n              {language === 'es' ? 'Configuración del Sistema' : 'System Configuration'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"text-sm space-y-2\">\n              <li>• {language === 'es' ? 'Tarifas y comisiones' : 'Fees and commissions'}</li>\n              <li>• {language === 'es' ? 'Configuración de pagos' : 'Payment settings'}</li>\n              <li>• {language === 'es' ? 'Plantillas de documentos' : 'Document templates'}</li>\n              <li>• {language === 'es' ? 'Configuración de notificaciones' : 'Notification settings'}</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nfunction ClientManagementStep() {\n  const { language } = useLanguage();\n  \n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">\n        {language === 'es' ? 'Gestión de Clientes' : 'Client Management'}\n      </h3>\n      <div className=\"prose dark:prose-invert max-w-none\">\n        <h4>{language === 'es' ? 'Proceso de Incorporación de Clientes:' : 'Client Onboarding Process:'}</h4>\n        <ol>\n          <li>{language === 'es' ? 'Recopilar información personal y de contacto' : 'Collect personal and contact information'}</li>\n          <li>{language === 'es' ? 'Verificar identificación y antecedentes' : 'Verify identification and background'}</li>\n          <li>{language === 'es' ? 'Documentar información del contacto de emergencia' : 'Document emergency contact information'}</li>\n          <li>{language === 'es' ? 'Configurar el sistema de registro con fotos y GPS' : 'Set up photo and GPS check-in system'}</li>\n          <li>{language === 'es' ? 'Explicar las obligaciones y requisitos' : 'Explain obligations and requirements'}</li>\n        </ol>\n        \n        <h4>{language === 'es' ? 'Características Clave:' : 'Key Features:'}</h4>\n        <ul>\n          <li>{language === 'es' ? 'Búsqueda inteligente de clientes' : 'Intelligent client search'}</li>\n          <li>{language === 'es' ? 'Seguimiento del historial completo' : 'Complete history tracking'}</li>\n          <li>{language === 'es' ? 'Gestión de documentos' : 'Document management'}</li>\n          <li>{language === 'es' ? 'Sistema de registro móvil' : 'Mobile check-in system'}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction BondProcessingStep() {\n  const { language } = useLanguage();\n  \n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">\n        {language === 'es' ? 'Procesamiento de Fianzas' : 'Bond Processing'}\n      </h3>\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <div>\n          <h4 className=\"font-medium mb-3\">\n            {language === 'es' ? 'Flujo de Trabajo de Fianzas:' : 'Bond Workflow:'}\n          </h4>\n          <ol className=\"text-sm space-y-2\">\n            <li>1. {language === 'es' ? 'Recibir llamada inicial' : 'Receive initial call'}</li>\n            <li>2. {language === 'es' ? 'Verificar información del caso' : 'Verify case information'}</li>\n            <li>3. {language === 'es' ? 'Calcular prima y garantía' : 'Calculate premium and collateral'}</li>\n            <li>4. {language === 'es' ? 'Crear documentos de la fianza' : 'Create bond documents'}</li>\n            <li>5. {language === 'es' ? 'Procesar pago' : 'Process payment'}</li>\n            <li>6. {language === 'es' ? 'Presentar fianza en el tribunal' : 'Post bond at court'}</li>\n            <li>7. {language === 'es' ? 'Monitorear cumplimiento' : 'Monitor compliance'}</li>\n          </ol>\n        </div>\n        \n        <div>\n          <h4 className=\"font-medium mb-3\">\n            {language === 'es' ? 'Características del Sistema:' : 'System Features:'}\n          </h4>\n          <ul className=\"text-sm space-y-2\">\n            <li>• {language === 'es' ? 'Cálculo automático de primas' : 'Automatic premium calculation'}</li>\n            <li>• {language === 'es' ? 'Generación de contratos' : 'Contract generation'}</li>\n            <li>• {language === 'es' ? 'Seguimiento de pagos' : 'Payment tracking'}</li>\n            <li>• {language === 'es' ? 'Alertas de fechas de corte' : 'Court date alerts'}</li>\n            <li>• {language === 'es' ? 'Gestión de garantías' : 'Collateral management'}</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction SOPsStep() {\n  const { language } = useLanguage();\n  \n  return (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">\n        {language === 'es' ? 'Procedimientos Operativos Estándar' : 'Standard Operating Procedures'}\n      </h3>\n      <div className=\"grid gap-4\">\n        {[\n          {\n            title: language === 'es' ? 'Cumplimiento Legal' : 'Legal Compliance',\n            items: [\n              language === 'es' ? 'Verificar licencias actuales' : 'Verify current licenses',\n              language === 'es' ? 'Mantener registros requeridos' : 'Maintain required records',\n              language === 'es' ? 'Cumplir con regulaciones estatales' : 'Comply with state regulations'\n            ]\n          },\n          {\n            title: language === 'es' ? 'Gestión de Riesgos' : 'Risk Management',\n            items: [\n              language === 'es' ? 'Evaluar riesgo del cliente' : 'Assess client risk',\n              language === 'es' ? 'Verificar garantías' : 'Verify collateral',\n              language === 'es' ? 'Monitorear cumplimiento' : 'Monitor compliance'\n            ]\n          },\n          {\n            title: language === 'es' ? 'Seguridad de Datos' : 'Data Security',\n            items: [\n              language === 'es' ? 'Proteger información personal' : 'Protect personal information',\n              language === 'es' ? 'Hacer copias de seguridad regulares' : 'Regular data backups',\n              language === 'es' ? 'Controlar acceso al sistema' : 'Control system access'\n            ]\n          }\n        ].map((section, index) => (\n          <Card key={index}>\n            <CardHeader>\n              <CardTitle className=\"text-base\">{section.title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm space-y-1\">\n                {section.items.map((item, itemIndex) => (\n                  <li key={itemIndex}>• {item}</li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":17450},"client/src/components/training/training-system.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BookOpen, PlayCircle, CheckCircle, Award, Clock, Star, FileText, Video, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\ninterface TrainingModule {\n  id: string;\n  title: string;\n  titleEs: string;\n  description: string;\n  descriptionEs: string;\n  category: 'legal-compliance' | 'system-usage' | 'client-service' | 'risk-management' | 'operations';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: number; // in minutes\n  isRequired: boolean;\n  isCompleted: boolean;\n  completedAt?: string;\n  progress: number; // 0-100\n  sections: TrainingSection[];\n}\n\ninterface TrainingSection {\n  id: string;\n  title: string;\n  titleEs: string;\n  type: 'video' | 'text' | 'quiz' | 'interactive';\n  content: string;\n  contentEs: string;\n  isCompleted: boolean;\n  duration: number;\n}\n\ninterface SOP {\n  id: string;\n  title: string;\n  titleEs: string;\n  category: 'client-onboarding' | 'bond-processing' | 'payment-handling' | 'legal-compliance' | 'emergency-procedures';\n  description: string;\n  descriptionEs: string;\n  content: string;\n  contentEs: string;\n  version: string;\n  lastUpdated: string;\n  isActive: boolean;\n  steps: SOPStep[];\n}\n\ninterface SOPStep {\n  id: string;\n  step: number;\n  title: string;\n  titleEs: string;\n  description: string;\n  descriptionEs: string;\n  isRequired: boolean;\n  estimatedTime: number;\n  resources?: string[];\n}\n\nexport function TrainingSystem() {\n  const { t, language } = useLanguage();\n  const [activeTab, setActiveTab] = useState(\"training\");\n  const [selectedModule, setSelectedModule] = useState<TrainingModule | null>(null);\n\n  // Fetch training modules from API\n  const { data: trainingModules = [], isLoading: modulesLoading, error: modulesError } = useQuery<TrainingModule[]>({\n    queryKey: ['/api/training-modules'],\n  });\n\n  // Fetch SOPs from API  \n  const { data: sops = [], isLoading: sopsLoading, error: sopsError } = useQuery<SOP[]>({\n    queryKey: ['/api/sops'],\n  });\n\n  // Mock training data\n  const mockTrainingModules: TrainingModule[] = [\n    {\n      id: \"module-1\",\n      title: \"Bail Bonds Legal Framework\",\n      titleEs: \"Marco Legal de Fianzas\",\n      description: \"Understanding the legal foundation of bail bonds business\",\n      descriptionEs: \"Comprenda el fundamento legal del negocio de fianzas\",\n      category: \"legal-compliance\",\n      difficulty: \"beginner\",\n      duration: 45,\n      isRequired: true,\n      isCompleted: false,\n      progress: 0,\n      sections: [\n        {\n          id: \"section-1-1\",\n          title: \"Introduction to Bail System\",\n          titleEs: \"Introducción al Sistema de Fianzas\",\n          type: \"video\",\n          content: \"Overview of the US bail system and constitutional rights\",\n          contentEs: \"Descripción general del sistema de fianzas de EE.UU. y derechos constitucionales\",\n          isCompleted: false,\n          duration: 15\n        },\n        {\n          id: \"section-1-2\",\n          title: \"State Regulations and Licensing\",\n          titleEs: \"Regulaciones Estatales y Licencias\",\n          type: \"text\",\n          content: \"Understanding state-specific requirements and licensing procedures\",\n          contentEs: \"Comprenda los requisitos específicos del estado y procedimientos de licencias\",\n          isCompleted: false,\n          duration: 20\n        },\n        {\n          id: \"section-1-3\",\n          title: \"Legal Compliance Quiz\",\n          titleEs: \"Examen de Cumplimiento Legal\",\n          type: \"quiz\",\n          content: \"Test your knowledge of legal requirements\",\n          contentEs: \"Pruebe su conocimiento de los requisitos legales\",\n          isCompleted: false,\n          duration: 10\n        }\n      ]\n    },\n    {\n      id: \"module-2\",\n      title: \"System Operation and Navigation\",\n      titleEs: \"Operación y Navegación del Sistema\",\n      description: \"Master the BailBond Pro system features and workflows\",\n      descriptionEs: \"Domine las características y flujos de trabajo del sistema BailBond Pro\",\n      category: \"system-usage\",\n      difficulty: \"beginner\",\n      duration: 30,\n      isRequired: true,\n      isCompleted: false,\n      progress: 25,\n      sections: [\n        {\n          id: \"section-2-1\",\n          title: \"Dashboard Overview\",\n          titleEs: \"Resumen del Panel\",\n          type: \"interactive\",\n          content: \"Navigate the main dashboard and key features\",\n          contentEs: \"Navegue por el panel principal y características clave\",\n          isCompleted: true,\n          duration: 10\n        },\n        {\n          id: \"section-2-2\",\n          title: \"Client Management\",\n          titleEs: \"Gestión de Clientes\",\n          type: \"video\",\n          content: \"Adding, editing, and managing client information\",\n          contentEs: \"Agregar, editar y gestionar información de clientes\",\n          isCompleted: false,\n          duration: 15\n        },\n        {\n          id: \"section-2-3\",\n          title: \"AI Search Features\",\n          titleEs: \"Características de Búsqueda IA\",\n          type: \"interactive\",\n          content: \"Using natural language search and AI assistance\",\n          contentEs: \"Usar búsqueda de lenguaje natural y asistencia IA\",\n          isCompleted: false,\n          duration: 5\n        }\n      ]\n    },\n    {\n      id: \"module-3\",\n      title: \"Risk Assessment and Management\",\n      titleEs: \"Evaluación y Gestión de Riesgos\",\n      description: \"Learn to assess client risk and manage collateral effectively\",\n      descriptionEs: \"Aprenda a evaluar el riesgo del cliente y gestionar garantías eficazmente\",\n      category: \"risk-management\",\n      difficulty: \"intermediate\",\n      duration: 60,\n      isRequired: true,\n      isCompleted: false,\n      progress: 0,\n      sections: [\n        {\n          id: \"section-3-1\",\n          title: \"Client Risk Factors\",\n          titleEs: \"Factores de Riesgo del Cliente\",\n          type: \"text\",\n          content: \"Identifying and evaluating risk factors in potential clients\",\n          contentEs: \"Identificar y evaluar factores de riesgo en clientes potenciales\",\n          isCompleted: false,\n          duration: 25\n        },\n        {\n          id: \"section-3-2\",\n          title: \"Collateral Evaluation\",\n          titleEs: \"Evaluación de Garantías\",\n          type: \"video\",\n          content: \"Properly assessing and documenting collateral\",\n          contentEs: \"Evaluar y documentar adecuadamente las garantías\",\n          isCompleted: false,\n          duration: 20\n        },\n        {\n          id: \"section-3-3\",\n          title: \"Risk Management Case Studies\",\n          titleEs: \"Estudios de Caso de Gestión de Riesgos\",\n          type: \"interactive\",\n          content: \"Real-world scenarios and decision-making exercises\",\n          contentEs: \"Escenarios del mundo real y ejercicios de toma de decisiones\",\n          isCompleted: false,\n          duration: 15\n        }\n      ]\n    }\n  ];\n\n  // Mock SOPs data\n  const mockSOPs: SOP[] = [\n    {\n      id: \"sop-1\",\n      title: \"Client Intake and Onboarding\",\n      titleEs: \"Recepción e Incorporación de Clientes\",\n      category: \"client-onboarding\",\n      description: \"Standard procedure for new client registration and verification\",\n      descriptionEs: \"Procedimiento estándar para registro y verificación de nuevos clientes\",\n      content: `STANDARD OPERATING PROCEDURE: CLIENT INTAKE AND ONBOARDING\n\nPURPOSE:\nTo ensure consistent, compliant, and thorough onboarding of all new clients.\n\nSCOPE:\nThis procedure applies to all new clients seeking bail bond services.\n\nRESPONSIBILITIES:\n- Front desk staff: Initial contact and basic information collection\n- Licensed agents: Risk assessment and contract execution\n- Management: Final approval for high-risk cases\n\nPROCEDURE:\nSee detailed steps below.\n\nDOCUMENTATION REQUIRED:\n- Government-issued photo ID\n- Proof of residence\n- Employment verification\n- Financial information\n- Emergency contact details`,\n      contentEs: `PROCEDIMIENTO OPERATIVO ESTÁNDAR: RECEPCIÓN E INCORPORACIÓN DE CLIENTES\n\nPROPÓSITO:\nAsegurar la incorporación consistente, conforme y completa de todos los nuevos clientes.\n\nALCANCE:\nEste procedimiento se aplica a todos los nuevos clientes que buscan servicios de fianza.\n\nRESPONSABILIDADES:\n- Personal de recepción: Contacto inicial y recolección de información básica\n- Agentes licenciados: Evaluación de riesgo y ejecución de contratos\n- Gerencia: Aprobación final para casos de alto riesgo\n\nPROCEDIMIENTO:\nVer pasos detallados a continuación.\n\nDOCUMENTACIÓN REQUERIDA:\n- Identificación con foto emitida por el gobierno\n- Comprobante de residencia\n- Verificación de empleo\n- Información financiera\n- Detalles de contacto de emergencia`,\n      version: \"2.1\",\n      lastUpdated: \"2024-01-15\",\n      isActive: true,\n      steps: [\n        {\n          id: \"step-1-1\",\n          step: 1,\n          title: \"Initial Contact\",\n          titleEs: \"Contacto Inicial\",\n          description: \"Receive call or walk-in client, gather basic case information\",\n          descriptionEs: \"Recibir llamada o cliente que llega, recopilar información básica del caso\",\n          isRequired: true,\n          estimatedTime: 10,\n          resources: [\"intake-form.pdf\", \"case-checklist.pdf\"]\n        },\n        {\n          id: \"step-1-2\",\n          step: 2,\n          title: \"Identity Verification\",\n          titleEs: \"Verificación de Identidad\",\n          description: \"Verify client identity with government-issued photo ID\",\n          descriptionEs: \"Verificar identidad del cliente con identificación con foto emitida por el gobierno\",\n          isRequired: true,\n          estimatedTime: 5,\n          resources: [\"id-verification-guide.pdf\"]\n        },\n        {\n          id: \"step-1-3\",\n          step: 3,\n          title: \"Risk Assessment\",\n          titleEs: \"Evaluación de Riesgo\",\n          description: \"Conduct comprehensive risk assessment using standardized criteria\",\n          descriptionEs: \"Realizar evaluación integral de riesgo usando criterios estandarizados\",\n          isRequired: true,\n          estimatedTime: 20,\n          resources: [\"risk-assessment-form.pdf\", \"scoring-matrix.pdf\"]\n        },\n        {\n          id: \"step-1-4\",\n          step: 4,\n          title: \"Financial Verification\",\n          titleEs: \"Verificación Financiera\",\n          description: \"Verify client's financial capacity and collect required documentation\",\n          descriptionEs: \"Verificar capacidad financiera del cliente y recopilar documentación requerida\",\n          isRequired: true,\n          estimatedTime: 15,\n          resources: [\"financial-checklist.pdf\"]\n        },\n        {\n          id: \"step-1-5\",\n          step: 5,\n          title: \"Contract Execution\",\n          titleEs: \"Ejecución del Contrato\",\n          description: \"Complete all necessary contracts and legal documents\",\n          descriptionEs: \"Completar todos los contratos necesarios y documentos legales\",\n          isRequired: true,\n          estimatedTime: 25,\n          resources: [\"bond-agreement.pdf\", \"indemnity-agreement.pdf\"]\n        }\n      ]\n    },\n    {\n      id: \"sop-2\",\n      title: \"Emergency Procedures - Client Non-Appearance\",\n      titleEs: \"Procedimientos de Emergencia - No Comparecencia del Cliente\",\n      category: \"emergency-procedures\",\n      description: \"Actions to take when a client fails to appear in court\",\n      descriptionEs: \"Acciones a tomar cuando un cliente no comparece en corte\",\n      content: `STANDARD OPERATING PROCEDURE: CLIENT NON-APPEARANCE\n\nPURPOSE:\nTo minimize financial loss and legal complications when a client fails to appear in court.\n\nIMMEDIATE ACTIONS REQUIRED:\nThis is a time-sensitive procedure that must be initiated immediately upon notification of non-appearance.\n\nLEGAL IMPLICATIONS:\nFailure to follow this procedure may result in bond forfeiture and significant financial loss.\n\nTIMELINE:\nAll initial steps must be completed within 24 hours of notification.`,\n      contentEs: `PROCEDIMIENTO OPERATIVO ESTÁNDAR: NO COMPARECENCIA DEL CLIENTE\n\nPROPÓSITO:\nMinimizar la pérdida financiera y complicaciones legales cuando un cliente no comparece en corte.\n\nACCIONES INMEDIATAS REQUERIDAS:\nEste es un procedimiento sensible al tiempo que debe iniciarse inmediatamente al ser notificado de la no comparecencia.\n\nIMPLICACIONES LEGALES:\nNo seguir este procedimiento puede resultar en pérdida de fianza y pérdida financiera significativa.\n\nCRONOGRAMA:\nTodos los pasos iniciales deben completarse dentro de 24 horas de la notificación.`,\n      version: \"1.5\",\n      lastUpdated: \"2024-01-10\",\n      isActive: true,\n      steps: [\n        {\n          id: \"step-2-1\",\n          step: 1,\n          title: \"Immediate Notification Response\",\n          titleEs: \"Respuesta Inmediata a Notificación\",\n          description: \"Acknowledge court notification and document time of receipt\",\n          descriptionEs: \"Confirmar notificación del tribunal y documentar hora de recepción\",\n          isRequired: true,\n          estimatedTime: 5,\n          resources: [\"notification-log.pdf\"]\n        },\n        {\n          id: \"step-2-2\",\n          step: 2,\n          title: \"Client Contact Attempt\",\n          titleEs: \"Intento de Contacto con Cliente\",\n          description: \"Attempt to contact client and indemnitor through all available means\",\n          descriptionEs: \"Intentar contactar al cliente e indemnizador por todos los medios disponibles\",\n          isRequired: true,\n          estimatedTime: 30,\n          resources: [\"contact-log-template.pdf\", \"emergency-contacts.pdf\"]\n        },\n        {\n          id: \"step-2-3\",\n          step: 3,\n          title: \"Recovery Agent Deployment\",\n          titleEs: \"Despliegue de Agente de Recuperación\",\n          description: \"If unable to locate client, engage licensed recovery agent\",\n          descriptionEs: \"Si no puede localizar al cliente, contratar agente de recuperación licenciado\",\n          isRequired: true,\n          estimatedTime: 60,\n          resources: [\"recovery-agent-list.pdf\", \"deployment-authorization.pdf\"]\n        }\n      ]\n    }\n  ];\n\n\n  const getCategoryLabel = (category: string) => {\n    const labels = {\n      'legal-compliance': language === 'es' ? 'Cumplimiento Legal' : 'Legal Compliance',\n      'system-usage': language === 'es' ? 'Uso del Sistema' : 'System Usage',\n      'client-service': language === 'es' ? 'Servicio al Cliente' : 'Client Service',\n      'risk-management': language === 'es' ? 'Gestión de Riesgos' : 'Risk Management',\n      'operations': language === 'es' ? 'Operaciones' : 'Operations',\n      'client-onboarding': language === 'es' ? 'Incorporación de Clientes' : 'Client Onboarding',\n      'bond-processing': language === 'es' ? 'Procesamiento de Fianzas' : 'Bond Processing',\n      'payment-handling': language === 'es' ? 'Manejo de Pagos' : 'Payment Handling',\n      'emergency-procedures': language === 'es' ? 'Procedimientos de Emergencia' : 'Emergency Procedures'\n    };\n    return labels[category as keyof typeof labels] || category;\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    const colors = {\n      'beginner': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      'intermediate': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      'advanced': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n    };\n    return colors[difficulty as keyof typeof colors] || colors.beginner;\n  };\n\n  const completedModulesCount = trainingModules.filter(m => m.isCompleted).length;\n  const totalRequiredModules = trainingModules.filter(m => m.isRequired).length;\n  const overallProgress = trainingModules.length > 0 ? \n    trainingModules.reduce((acc, module) => acc + module.progress, 0) / trainingModules.length : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">\n            {language === 'es' ? 'Sistema de Entrenamiento y SOPs' : 'Training System & SOPs'}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === 'es' \n              ? 'Módulos de entrenamiento y procedimientos operativos estándar'\n              : 'Training modules and standard operating procedures'\n            }\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"secondary\">\n            {completedModulesCount} / {trainingModules.length} {language === 'es' ? 'completados' : 'completed'}\n          </Badge>\n          <Badge variant=\"outline\">\n            {Math.round(overallProgress)}% {language === 'es' ? 'progreso' : 'progress'}\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"training\" data-testid=\"tab-training\">\n            <BookOpen className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Entrenamiento' : 'Training'}\n          </TabsTrigger>\n          <TabsTrigger value=\"sops\" data-testid=\"tab-sops\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'SOPs' : 'SOPs'}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"training\" className=\"space-y-6\">\n          {/* Training Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Award className=\"h-5 w-5\" />\n                <span>{language === 'es' ? 'Progreso de Entrenamiento' : 'Training Progress'}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span>{language === 'es' ? 'Progreso General' : 'Overall Progress'}</span>\n                    <span>{Math.round(overallProgress)}%</span>\n                  </div>\n                  <Progress value={overallProgress} className=\"h-2\" />\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-blue-600\">{trainingModules.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {language === 'es' ? 'Total Módulos' : 'Total Modules'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-green-600\">{completedModulesCount}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {language === 'es' ? 'Completados' : 'Completed'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-orange-600\">{totalRequiredModules}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {language === 'es' ? 'Requeridos' : 'Required'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {Math.round(trainingModules.reduce((acc, m) => acc + m.duration, 0) / 60)}h\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {language === 'es' ? 'Tiempo Total' : 'Total Time'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Training Modules */}\n          <div className=\"grid gap-6\">\n            {trainingModules.map((module) => (\n              <Card key={module.id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        {module.isCompleted ? (\n                          <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                        ) : (\n                          <PlayCircle className=\"h-5 w-5 text-blue-600\" />\n                        )}\n                        <span>{language === 'es' ? module.titleEs : module.title}</span>\n                      </CardTitle>\n                      <CardDescription className=\"mt-1\">\n                        {language === 'es' ? module.descriptionEs : module.description}\n                      </CardDescription>\n                      <div className=\"flex items-center space-x-4 mt-3\">\n                        <Badge className={getDifficultyColor(module.difficulty)}>\n                          {module.difficulty}\n                        </Badge>\n                        <Badge variant=\"outline\">\n                          {getCategoryLabel(module.category)}\n                        </Badge>\n                        {module.isRequired && (\n                          <Badge variant=\"destructive\">\n                            {language === 'es' ? 'Requerido' : 'Required'}\n                          </Badge>\n                        )}\n                        <span className=\"text-sm text-muted-foreground flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          {module.duration} {language === 'es' ? 'min' : 'min'}\n                        </span>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => setSelectedModule(module)}\n                      data-testid={`button-start-module-${module.id}`}\n                    >\n                      {module.progress > 0 \n                        ? (language === 'es' ? 'Continuar' : 'Continue')\n                        : (language === 'es' ? 'Iniciar' : 'Start')\n                      }\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>{language === 'es' ? 'Progreso' : 'Progress'}</span>\n                        <span>{module.progress}%</span>\n                      </div>\n                      <Progress value={module.progress} className=\"h-2\" />\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {module.sections.length} {language === 'es' ? 'secciones' : 'sections'} • \n                      {module.sections.filter(s => s.isCompleted).length} {language === 'es' ? 'completadas' : 'completed'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"sops\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {sops.map((sop) => (\n              <Card key={sop.id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <FileText className=\"h-5 w-5\" />\n                        <span>{language === 'es' ? sop.titleEs : sop.title}</span>\n                        <Badge variant={sop.isActive ? \"default\" : \"secondary\"}>\n                          v{sop.version}\n                        </Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        {language === 'es' ? sop.descriptionEs : sop.description}\n                      </CardDescription>\n                      <div className=\"flex items-center space-x-4 mt-2\">\n                        <Badge variant=\"outline\">\n                          {getCategoryLabel(sop.category)}\n                        </Badge>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {language === 'es' ? 'Actualizado:' : 'Updated:'} {new Date(sop.lastUpdated).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <Accordion type=\"single\" collapsible>\n                    <AccordionItem value={`overview-${sop.id}`}>\n                      <AccordionTrigger>\n                        {language === 'es' ? 'Resumen del Procedimiento' : 'Procedure Overview'}\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"prose dark:prose-invert max-w-none text-sm\">\n                          <pre className=\"whitespace-pre-wrap\">\n                            {language === 'es' ? sop.contentEs : sop.content}\n                          </pre>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                    <AccordionItem value={`steps-${sop.id}`}>\n                      <AccordionTrigger>\n                        {language === 'es' ? 'Pasos Detallados' : 'Detailed Steps'} ({sop.steps.length})\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"space-y-4\">\n                          {sop.steps.map((step) => (\n                            <Card key={step.id} className=\"border-l-4 border-l-blue-500\">\n                              <CardContent className=\"pt-4\">\n                                <div className=\"flex items-start space-x-3\">\n                                  <div className=\"flex-shrink-0 w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                                    <span className=\"text-sm font-medium text-blue-600 dark:text-blue-300\">\n                                      {step.step}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex-1 min-w-0\">\n                                    <h4 className=\"font-medium text-sm\">\n                                      {language === 'es' ? step.titleEs : step.title}\n                                      {step.isRequired && (\n                                        <Badge variant=\"destructive\" className=\"ml-2 text-xs\">\n                                          {language === 'es' ? 'Requerido' : 'Required'}\n                                        </Badge>\n                                      )}\n                                    </h4>\n                                    <p className=\"text-sm text-muted-foreground mt-1\">\n                                      {language === 'es' ? step.descriptionEs : step.description}\n                                    </p>\n                                    <div className=\"flex items-center space-x-4 mt-2\">\n                                      <span className=\"text-xs text-muted-foreground flex items-center\">\n                                        <Clock className=\"h-3 w-3 mr-1\" />\n                                        {step.estimatedTime} {language === 'es' ? 'min' : 'min'}\n                                      </span>\n                                      {step.resources && step.resources.length > 0 && (\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {step.resources.length} {language === 'es' ? 'recursos' : 'resources'}\n                                        </span>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  </Accordion>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":28780},"client/src/components/workflows/notification-system.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Bell, Clock, CheckCircle, AlertCircle, Calendar, User, FileText, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Notification {\n  id: string;\n  type: 'court-reminder' | 'payment-due' | 'check-in-required' | 'document-expired' | 'system-alert';\n  title: string;\n  titleEs: string;\n  message: string;\n  messageEs: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'sent' | 'read' | 'dismissed';\n  clientId?: string;\n  caseId?: string;\n  bondId?: string;\n  scheduledFor: string;\n  createdAt: string;\n  sentAt?: string;\n  readAt?: string;\n  actionUrl?: string;\n}\n\ninterface WorkflowRule {\n  id: string;\n  name: string;\n  nameEs: string;\n  description: string;\n  descriptionEs: string;\n  trigger: 'court-date' | 'payment-due' | 'check-in-overdue' | 'bond-created' | 'document-expires';\n  condition: string;\n  action: 'send-notification' | 'send-email' | 'send-sms' | 'create-task' | 'escalate';\n  timing: string; // e.g., '3 days before', '1 hour after', etc.\n  isActive: boolean;\n  template: string;\n  recipients: string[];\n}\n\nexport function NotificationSystem() {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"notifications\");\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [workflowRules, setWorkflowRules] = useState<WorkflowRule[]>([]);\n\n  // Mock data - In production, this would come from your API\n  const mockNotifications: Notification[] = [\n    {\n      id: \"1\",\n      type: \"court-reminder\",\n      title: \"Court Date Reminder\",\n      titleEs: \"Recordatorio de Fecha de Corte\",\n      message: \"Maria González has a court appearance tomorrow at 9:00 AM\",\n      messageEs: \"Maria González tiene una comparecencia mañana a las 9:00 AM\",\n      priority: \"high\",\n      status: \"pending\",\n      clientId: \"client-1\",\n      caseId: \"case-123\",\n      scheduledFor: \"2024-01-20T08:00:00Z\",\n      createdAt: \"2024-01-19T10:00:00Z\",\n      actionUrl: \"/clients/client-1\"\n    },\n    {\n      id: \"2\", \n      type: \"payment-due\",\n      title: \"Payment Overdue\",\n      titleEs: \"Pago Vencido\",\n      message: \"John Smith's payment of $500 is 5 days overdue\",\n      messageEs: \"El pago de John Smith de $500 tiene 5 días de atraso\",\n      priority: \"critical\",\n      status: \"sent\",\n      clientId: \"client-2\",\n      bondId: \"bond-456\",\n      scheduledFor: \"2024-01-19T00:00:00Z\",\n      createdAt: \"2024-01-15T00:00:00Z\",\n      sentAt: \"2024-01-19T09:00:00Z\",\n      actionUrl: \"/payments/bond-456\"\n    },\n    {\n      id: \"3\",\n      type: \"check-in-required\",\n      title: \"Check-in Required\",\n      titleEs: \"Registro Requerido\",\n      message: \"Carlos Rodriguez missed his scheduled check-in\",\n      messageEs: \"Carlos Rodriguez perdió su registro programado\",\n      priority: \"medium\",\n      status: \"read\",\n      clientId: \"client-3\",\n      scheduledFor: \"2024-01-18T12:00:00Z\",\n      createdAt: \"2024-01-18T14:00:00Z\",\n      sentAt: \"2024-01-18T14:05:00Z\",\n      readAt: \"2024-01-18T15:30:00Z\",\n      actionUrl: \"/check-ins/client-3\"\n    }\n  ];\n\n  const mockWorkflowRules: WorkflowRule[] = [\n    {\n      id: \"rule-1\",\n      name: \"Court Date Reminder\",\n      nameEs: \"Recordatorio de Fecha de Corte\",\n      description: \"Send notification 24 hours before court appearance\",\n      descriptionEs: \"Enviar notificación 24 horas antes de la comparecencia\",\n      trigger: \"court-date\",\n      condition: \"24 hours before\",\n      action: \"send-notification\",\n      timing: \"24 hours before\",\n      isActive: true,\n      template: \"Court reminder template\",\n      recipients: [\"client\", \"indemnitor\", \"agency\"]\n    },\n    {\n      id: \"rule-2\",\n      name: \"Payment Due Alert\",\n      nameEs: \"Alerta de Pago Vencido\",\n      description: \"Alert when payment is overdue\",\n      descriptionEs: \"Alertar cuando el pago esté vencido\",\n      trigger: \"payment-due\",\n      condition: \"1 day overdue\",\n      action: \"send-notification\",\n      timing: \"Daily until paid\",\n      isActive: true,\n      template: \"Payment overdue template\",\n      recipients: [\"client\", \"indemnitor\"]\n    },\n    {\n      id: \"rule-3\",\n      name: \"Check-in Reminder\",\n      nameEs: \"Recordatorio de Registro\",\n      description: \"Remind client to check in weekly\",\n      descriptionEs: \"Recordar al cliente que se registre semanalmente\",\n      trigger: \"check-in-overdue\",\n      condition: \"2 hours overdue\",\n      action: \"send-notification\",\n      timing: \"Every 2 hours\",\n      isActive: true,\n      template: \"Check-in reminder template\",\n      recipients: [\"client\"]\n    }\n  ];\n\n  useEffect(() => {\n    setNotifications(mockNotifications);\n    setWorkflowRules(mockWorkflowRules);\n  }, []);\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'court-reminder':\n        return <Calendar className=\"h-4 w-4\" />;\n      case 'payment-due':\n        return <DollarSign className=\"h-4 w-4\" />;\n      case 'check-in-required':\n        return <User className=\"h-4 w-4\" />;\n      case 'document-expired':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      default:\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'read':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n      default:\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n    }\n  };\n\n  const markAsRead = (notificationId: string) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, status: 'read' as const, readAt: new Date().toISOString() }\n          : notification\n      )\n    );\n    toast({\n      title: language === 'es' ? 'Notificación marcada como leída' : 'Notification marked as read',\n      description: language === 'es' ? 'La notificación ha sido marcada como leída' : 'The notification has been marked as read'\n    });\n  };\n\n  const dismissNotification = (notificationId: string) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, status: 'dismissed' as const }\n          : notification\n      )\n    );\n    toast({\n      title: language === 'es' ? 'Notificación descartada' : 'Notification dismissed',\n      description: language === 'es' ? 'La notificación ha sido descartada' : 'The notification has been dismissed'\n    });\n  };\n\n  const toggleWorkflowRule = (ruleId: string) => {\n    setWorkflowRules(prev => \n      prev.map(rule => \n        rule.id === ruleId \n          ? { ...rule, isActive: !rule.isActive }\n          : rule\n      )\n    );\n    toast({\n      title: language === 'es' ? 'Regla actualizada' : 'Rule updated',\n      description: language === 'es' ? 'La regla de flujo de trabajo ha sido actualizada' : 'Workflow rule has been updated'\n    });\n  };\n\n  const pendingCount = notifications.filter(n => n.status === 'pending').length;\n  const unreadCount = notifications.filter(n => n.status === 'sent').length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">\n            {language === 'es' ? 'Sistema de Notificaciones' : 'Notification System'}\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {language === 'es' \n              ? 'Gestione notificaciones automáticas y flujos de trabajo'\n              : 'Manage automated notifications and workflows'\n            }\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {pendingCount > 0 && (\n            <Badge variant=\"destructive\">\n              {pendingCount} {language === 'es' ? 'pendiente' + (pendingCount > 1 ? 's' : '') : 'pending'}\n            </Badge>\n          )}\n          {unreadCount > 0 && (\n            <Badge variant=\"secondary\">\n              {unreadCount} {language === 'es' ? 'no leída' + (unreadCount > 1 ? 's' : '') : 'unread'}\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Notificaciones' : 'Notifications'}\n          </TabsTrigger>\n          <TabsTrigger value=\"workflows\" data-testid=\"tab-workflows\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Flujos de Trabajo' : 'Workflows'}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {notifications.map((notification) => (\n              <Card key={notification.id} className={`${\n                notification.status === 'pending' ? 'border-l-4 border-l-yellow-500' : \n                notification.priority === 'critical' ? 'border-l-4 border-l-red-500' :\n                notification.priority === 'high' ? 'border-l-4 border-l-orange-500' : ''\n              }`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`p-2 rounded-lg ${getPriorityColor(notification.priority)}`}>\n                        {getNotificationIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-base\">\n                          {language === 'es' ? notification.titleEs : notification.title}\n                        </CardTitle>\n                        <CardDescription className=\"text-sm\">\n                          {language === 'es' ? notification.messageEs : notification.message}\n                        </CardDescription>\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <Badge className={getPriorityColor(notification.priority)}>\n                            {notification.priority}\n                          </Badge>\n                          <Badge className={getStatusColor(notification.status)}>\n                            {notification.status}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(notification.scheduledFor).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {notification.status === 'sent' && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => markAsRead(notification.id)}\n                          data-testid={`button-mark-read-${notification.id}`}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          {language === 'es' ? 'Marcar Leída' : 'Mark Read'}\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => dismissNotification(notification.id)}\n                        data-testid={`button-dismiss-${notification.id}`}\n                      >\n                        {language === 'es' ? 'Descartar' : 'Dismiss'}\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"workflows\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {language === 'es' ? 'Reglas de Flujo de Trabajo' : 'Workflow Rules'}\n              </CardTitle>\n              <CardDescription>\n                {language === 'es' \n                  ? 'Configure reglas automáticas para notificaciones y acciones'\n                  : 'Configure automatic rules for notifications and actions'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {workflowRules.map((rule) => (\n                  <div key={rule.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h4 className=\"font-medium\">\n                          {language === 'es' ? rule.nameEs : rule.name}\n                        </h4>\n                        <Badge variant={rule.isActive ? \"default\" : \"secondary\"}>\n                          {rule.isActive \n                            ? (language === 'es' ? 'Activo' : 'Active')\n                            : (language === 'es' ? 'Inactivo' : 'Inactive')\n                          }\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {language === 'es' ? rule.descriptionEs : rule.description}\n                      </p>\n                      <div className=\"flex items-center space-x-4 mt-2 text-xs text-muted-foreground\">\n                        <span>\n                          {language === 'es' ? 'Disparador:' : 'Trigger:'} {rule.trigger}\n                        </span>\n                        <span>\n                          {language === 'es' ? 'Tiempo:' : 'Timing:'} {rule.timing}\n                        </span>\n                        <span>\n                          {language === 'es' ? 'Acción:' : 'Action:'} {rule.action}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label htmlFor={`rule-toggle-${rule.id}`} className=\"sr-only\">\n                        {language === 'es' ? 'Alternar regla' : 'Toggle rule'}\n                      </Label>\n                      <Switch\n                        id={`rule-toggle-${rule.id}`}\n                        checked={rule.isActive}\n                        onCheckedChange={() => toggleWorkflowRule(rule.id)}\n                        data-testid={`switch-rule-${rule.id}`}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16078},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, FileText, Bell, Users, Zap } from \"lucide-react\";\nimport { OnboardingWizard } from \"@/components/onboarding/onboarding-wizard\";\nimport { ContractManager } from \"@/components/contracts/contract-manager\";\nimport { NotificationSystem } from \"@/components/workflows/notification-system\";\nimport { TrainingSystem } from \"@/components/training/training-system\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\nexport function OnboardingPage() {\n  const { t, language } = useLanguage();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"text-center space-y-2 mb-8\">\n        <h1 className=\"text-3xl font-bold\">\n          {language === 'es' ? 'Centro de Capacitación y Gestión' : 'Training & Management Center'}\n        </h1>\n        <p className=\"text-muted-foreground text-lg\">\n          {language === 'es' \n            ? 'Sistema completo de incorporación, capacitación y procedimientos operativos estándar'\n            : 'Complete onboarding, training, and standard operating procedures system'\n          }\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n            <Zap className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Resumen' : 'Overview'}\n          </TabsTrigger>\n          <TabsTrigger value=\"wizard\" data-testid=\"tab-wizard\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Configuración' : 'Setup Wizard'}\n          </TabsTrigger>\n          <TabsTrigger value=\"contracts\" data-testid=\"tab-contracts\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Contratos' : 'Contracts'}\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Notificaciones' : 'Workflows'}\n          </TabsTrigger>\n          <TabsTrigger value=\"training\" data-testid=\"tab-training\">\n            <BookOpen className=\"h-4 w-4 mr-2\" />\n            {language === 'es' ? 'Capacitación' : 'Training'}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200 dark:border-blue-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-blue-700 dark:text-blue-300\">\n                  <Users className=\"h-5 w-5\" />\n                  <span>{language === 'es' ? 'Configuración' : 'System Setup'}</span>\n                </CardTitle>\n                <CardDescription className=\"text-blue-600 dark:text-blue-400\">\n                  {language === 'es' \n                    ? 'Configuración guiada del sistema con asistente paso a paso'\n                    : 'Guided system configuration with step-by-step wizard'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">{language === 'es' ? 'Progreso' : 'Progress'}</span>\n                    <Badge variant=\"secondary\">0/5 {language === 'es' ? 'pasos' : 'steps'}</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {language === 'es' \n                      ? 'Complete la configuración inicial para comenzar'\n                      : 'Complete initial setup to get started'\n                    }\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200 dark:border-green-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-green-700 dark:text-green-300\">\n                  <FileText className=\"h-5 w-5\" />\n                  <span>{language === 'es' ? 'Contratos' : 'Contract System'}</span>\n                </CardTitle>\n                <CardDescription className=\"text-green-600 dark:text-green-400\">\n                  {language === 'es' \n                    ? 'Generación automática de contratos legales precisos'\n                    : 'Automated generation of accurate legal contracts'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">{language === 'es' ? 'Plantillas' : 'Templates'}</span>\n                    <Badge variant=\"secondary\">3 {language === 'es' ? 'tipos' : 'types'}</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {language === 'es' \n                      ? 'Fianza, indemnización, planes de pago'\n                      : 'Bail, indemnity, payment plans'\n                    }\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200 dark:border-purple-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-purple-700 dark:text-purple-300\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span>{language === 'es' ? 'Flujos de Trabajo' : 'Workflow System'}</span>\n                </CardTitle>\n                <CardDescription className=\"text-purple-600 dark:text-purple-400\">\n                  {language === 'es' \n                    ? 'Notificaciones automáticas y gestión de procesos'\n                    : 'Automated notifications and process management'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">{language === 'es' ? 'Reglas Activas' : 'Active Rules'}</span>\n                    <Badge variant=\"secondary\">3 {language === 'es' ? 'reglas' : 'rules'}</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {language === 'es' \n                      ? 'Recordatorios de corte, pagos, registros'\n                      : 'Court reminders, payments, check-ins'\n                    }\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200 dark:border-orange-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-orange-700 dark:text-orange-300\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  <span>{language === 'es' ? 'Capacitación' : 'Training System'}</span>\n                </CardTitle>\n                <CardDescription className=\"text-orange-600 dark:text-orange-400\">\n                  {language === 'es' \n                    ? 'Módulos de capacitación y procedimientos operativos'\n                    : 'Training modules and operating procedures'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">{language === 'es' ? 'Módulos' : 'Modules'}</span>\n                    <Badge variant=\"secondary\">3 {language === 'es' ? 'módulos' : 'modules'}</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {language === 'es' \n                      ? 'Legal, sistema, gestión de riesgos'\n                      : 'Legal, system, risk management'\n                    }\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>{language === 'es' ? 'Características del Sistema' : 'System Features'}</CardTitle>\n              <CardDescription>\n                {language === 'es' \n                  ? 'Su sistema de gestión de fianzas más robusto incluye'\n                  : 'Your most robust bail bonds management system includes'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold text-sm\">\n                    {language === 'es' ? 'Características Principales' : 'Core Features'}\n                  </h4>\n                  <ul className=\"text-sm space-y-2\">\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Soporte bilingüe completo (Inglés/Español)'\n                          : 'Complete bilingual support (English/Spanish)'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Búsqueda inteligente con IA y procesamiento de lenguaje natural'\n                          : 'AI-powered intelligent search with natural language processing'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Sistema de registro de clientes con verificación de fotos y GPS'\n                          : 'Client check-in system with photo verification and GPS tracking'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Generación automática de contratos legales'\n                          : 'Automated legal contract generation'\n                        }\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold text-sm\">\n                    {language === 'es' ? 'Características Avanzadas' : 'Advanced Features'}\n                  </h4>\n                  <ul className=\"text-sm space-y-2\">\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Flujos de trabajo automáticos con notificaciones inteligentes'\n                          : 'Automated workflows with intelligent notifications'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Sistema de capacitación interactivo con módulos'\n                          : 'Interactive training system with modules'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Procedimientos operativos estándar (SOPs) integrados'\n                          : 'Integrated standard operating procedures (SOPs)'\n                        }\n                      </span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <span>\n                        {language === 'es' \n                          ? 'Asistente de configuración guiada para incorporación completa'\n                          : 'Guided setup wizard for complete onboarding'\n                        }\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"wizard\">\n          <OnboardingWizard />\n        </TabsContent>\n\n        <TabsContent value=\"contracts\">\n          <ContractManager />\n        </TabsContent>\n\n        <TabsContent value=\"notifications\">\n          <NotificationSystem />\n        </TabsContent>\n\n        <TabsContent value=\"training\">\n          <TrainingSystem />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14221},"client/src/pages/client-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader2, Shield, Users, Phone } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useLanguage } from \"@/contexts/language-context\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function ClientLoginPage() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { language, t } = useLanguage();\n  const [showHelp, setShowHelp] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/client/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: t(\"clientPortal.loginSuccessful\"),\n        description: t(\"clientPortal.welcomeBackClient\"),\n      });\n      // Store client data and auth token in localStorage\n      localStorage.setItem(\"clientData\", JSON.stringify(data.client));\n      localStorage.setItem(\"clientToken\", data.token);\n      // Redirect to client dashboard\n      setLocation(`/client-portal/${data.client.id}`);\n    },\n    onError: (error: any) => {\n      console.error(\"Login error:\", error);\n      toast({\n        title: t(\"clientPortal.loginFailed\"),\n        description: error.message || t(\"clientPortal.invalidCredentials\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-600 dark:bg-blue-500 rounded-full flex items-center justify-center\">\n            <Shield className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            {t(\"clientPortal\")}\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            {t(\"secureClientAccess\")}\n          </p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"border-0 shadow-xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl text-center text-gray-900 dark:text-white\">\n              {t(\"signInToYourAccount\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        {t(\"username\")}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          data-testid=\"input-username\"\n                          placeholder={t(\"enterUsername\")}\n                          className=\"h-12 text-lg border-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400\"\n                          disabled={loginMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        {t(\"password\")}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          data-testid=\"input-password\"\n                          placeholder={t(\"enterPassword\")}\n                          className=\"h-12 text-lg border-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400\"\n                          disabled={loginMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  data-testid=\"button-login\"\n                  className=\"w-full h-12 text-lg bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                      {t(\"signingIn\")}\n                    </>\n                  ) : (\n                    t(\"signIn\")\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Help Section */}\n        <Card className=\"border-0 shadow-lg bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-3\">\n              <Button\n                variant=\"ghost\"\n                data-testid=\"button-help\"\n                onClick={() => setShowHelp(!showHelp)}\n                className=\"text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400\"\n              >\n                {t(\"needHelp\")}\n              </Button>\n              \n              {showHelp && (\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 space-y-2 bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>{t(\"contactYourBailAgent\")}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span>{t(\"emergencySupport\")}: (555) 123-4567</span>\n                  </div>\n                  <p className=\"text-xs\">\n                    {t(\"loginCredentialsProvidedByAgent\")}\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n          <p>{t(\"secureConnectionProtected\")}</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7630},"client/src/pages/client-portal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, Calendar, Camera, FileText, CreditCard, MapPin, \n  Clock, AlertTriangle, CheckCircle, LogOut, Shield,\n  Gavel, DollarSign, Phone, RefreshCw\n} from \"lucide-react\";\n\ninterface ClientPortalData {\n  client: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    phone: string;\n    email: string;\n    status: string;\n    lastCheckin: string | null;\n  };\n  bonds: any[];\n  cases: any[];\n  upcomingCourtDates: any[];\n  recentCheckins: any[];\n}\n\nexport default function ClientPortalPage() {\n  const { clientId } = useParams();\n  const [, setLocation] = useLocation();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedBond, setSelectedBond] = useState<string | null>(null);\n\n  // Load client data on mount with authentication\n  const { data: clientData, isLoading, error, refetch } = useQuery({\n    queryKey: [`/api/client/${clientId}/dashboard`],\n    queryFn: async (): Promise<ClientPortalData> => {\n      const token = localStorage.getItem(\"clientToken\");\n      if (!token) {\n        throw new Error(\"Authentication required\");\n      }\n      const response = await fetch(`/api/client/${clientId}/dashboard`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch dashboard data\");\n      }\n      return response.json();\n    },\n    enabled: !!clientId,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Logout functionality\n  const handleLogout = () => {\n    localStorage.removeItem(\"clientData\");\n    localStorage.removeItem(\"clientToken\");\n    setLocation(\"/client-login\");\n    toast({\n      title: t(\"clientPortal.logoutSuccessful\"),\n      description: t(\"clientPortal.comeBackSoon\"),\n    });\n  };\n\n  // Photo check-in mutation\n  const checkinMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const token = localStorage.getItem(\"clientToken\");\n      if (!token) {\n        throw new Error(\"Authentication required\");\n      }\n      const response = await fetch(`/api/client/${clientId}/checkin`, {\n        method: \"POST\",\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error(\"Check-in failed\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"clientPortal.checkinCompleted\"),\n        description: t(\"clientPortal.checkinSuccessful\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/client/${clientId}/dashboard`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"clientPortal.checkinFailed\"),\n        description: error.message || t(\"clientPortal.pleaseRetry\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle photo check-in\n  const handlePhotoCheckin = async (file: File) => {\n    if (!selectedBond) {\n      toast({\n        title: t(\"clientPortal.selectBond\"),\n        description: t(\"clientPortal.bondRequiredForCheckin\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"photo\", file);\n    formData.append(\"bondId\", selectedBond);\n\n    // Add GPS location if available\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          formData.append(\"latitude\", position.coords.latitude.toString());\n          formData.append(\"longitude\", position.coords.longitude.toString());\n          checkinMutation.mutate(formData);\n        },\n        () => {\n          // Still submit without GPS if denied\n          checkinMutation.mutate(formData);\n        }\n      );\n    } else {\n      checkinMutation.mutate(formData);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600 dark:text-blue-400\" />\n          <p className=\"text-gray-600 dark:text-gray-400\">{t(\"common.loading\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !clientData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n              {t(\"errors.loadingFailed\")}\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {t(\"errors.unableToLoadData\")}\n            </p>\n            <Button onClick={() => refetch()} className=\"w-full\">\n              {t(\"common.retry\")}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      active: { color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\", text: t(\"common.active\") },\n      completed: { color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\", text: t(\"common.completed\") },\n      forfeited: { color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\", text: t(\"bonds.forfeited\") },\n      at_risk: { color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\", text: t(\"bonds.atRisk\") },\n    };\n    const config = statusMap[status as keyof typeof statusMap] || statusMap.active;\n    return <Badge className={config.color}>{config.text}</Badge>;\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(Number(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-600 dark:bg-blue-500 rounded-full flex items-center justify-center\">\n                <Shield className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                  {t(\"clientPortal.title\")}\n                </h1>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {clientData.client.firstName} {clientData.client.lastName}\n                </p>\n              </div>\n            </div>\n            <Button variant=\"outline\" onClick={handleLogout} data-testid=\"button-logout\">\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              {t(\"navigation.logout\")}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Tabs defaultValue=\"dashboard\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 lg:w-auto lg:grid-cols-4 bg-white dark:bg-gray-800\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">\n              <User className=\"h-4 w-4 mr-2\" />\n              {t(\"clientPortal.dashboard\")}\n            </TabsTrigger>\n            <TabsTrigger value=\"bonds\" data-testid=\"tab-bonds\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              {t(\"clientPortal.myBonds\")}\n            </TabsTrigger>\n            <TabsTrigger value=\"court\" data-testid=\"tab-court\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              {t(\"clientPortal.courtDates\")}\n            </TabsTrigger>\n            <TabsTrigger value=\"checkin\" data-testid=\"tab-checkin\">\n              <Camera className=\"h-4 w-4 mr-2\" />\n              {t(\"clientPortal.checkIn\")}\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Dashboard Tab */}\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {/* Status Overview */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t(\"clientPortal.complianceStatus\")}\n                  </CardTitle>\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                    {t(\"checkin.compliant\")}\n                  </div>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {clientData.client.lastCheckin \n                      ? `${t(\"clientPortal.lastCheckin\")}: ${formatDate(clientData.client.lastCheckin)}`\n                      : t(\"clientPortal.noRecentCheckin\")\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Active Bonds */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t(\"clientPortal.myBonds\")}\n                  </CardTitle>\n                  <FileText className=\"h-4 w-4 text-blue-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {clientData.bonds.length}\n                  </div>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {t(\"bonds.activeBonds\")}\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Next Court Date */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {t(\"clientPortal.nextCourtDate\")}\n                  </CardTitle>\n                  <Gavel className=\"h-4 w-4 text-purple-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {clientData.upcomingCourtDates.length > 0 \n                      ? formatDate(clientData.upcomingCourtDates[0].courtDate)\n                      : t(\"cases.noDates\")\n                    }\n                  </div>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {clientData.upcomingCourtDates.length > 0\n                      ? clientData.upcomingCourtDates[0].courtLocation || t(\"cases.locationTBD\")\n                      : t(\"cases.noUpcomingDates\")\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Check-ins */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  <span>{t(\"clientPortal.checkinHistory\")}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {clientData.recentCheckins.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                      {t(\"checkin.noCheckins\")}\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {clientData.recentCheckins.map((checkin: any, index: number) => (\n                      <div key={checkin.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"text-sm font-medium\">\n                            {formatDate(checkin.createdAt)}\n                          </span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                          {t(\"common.completed\")}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Bonds Tab */}\n          <TabsContent value=\"bonds\" className=\"space-y-6\">\n            {clientData.bonds.length === 0 ? (\n              <Card>\n                <CardContent className=\"pt-6 text-center\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"bonds.noBonds\")}\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                {clientData.bonds.map((bond: any) => (\n                  <Card key={bond.id} className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                        onClick={() => setSelectedBond(bond.id)}\n                        data-testid={`card-bond-${bond.id}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg\">\n                          {t(\"bonds.bondNumber\")}: {bond.bondNumber}\n                        </CardTitle>\n                        {getStatusBadge(bond.status)}\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {t(\"clientPortal.bondAmount\")}\n                          </p>\n                          <p className=\"text-lg font-semibold\">\n                            {formatCurrency(bond.bondAmount)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {t(\"clientPortal.premiumPaid\")}\n                          </p>\n                          <p className=\"text-lg font-semibold\">\n                            {formatCurrency(bond.premiumAmount)}\n                          </p>\n                        </div>\n                      </div>\n                      <Separator />\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {t(\"bonds.issueDate\")}\n                        </p>\n                        <p className=\"font-medium\">{formatDate(bond.issueDate)}</p>\n                      </div>\n                      {selectedBond === bond.id && (\n                        <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                          <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                            {t(\"clientPortal.selectedForCheckin\")}\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Court Dates Tab */}\n          <TabsContent value=\"court\" className=\"space-y-6\">\n            {clientData.upcomingCourtDates.length === 0 ? (\n              <Card>\n                <CardContent className=\"pt-6 text-center\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {t(\"cases.noUpcomingDates\")}\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {clientData.upcomingCourtDates.map((courtDate: any) => (\n                  <Card key={courtDate.id} data-testid={`card-court-${courtDate.id}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg\">\n                          {t(\"cases.case\")} #{courtDate.caseNumber}\n                        </CardTitle>\n                        <Badge variant=\"outline\" className=\"text-orange-600 border-orange-600\">\n                          {t(\"cases.upcoming\")}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Calendar className=\"h-5 w-5 text-gray-500\" />\n                          <div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {t(\"cases.courtDate\")}\n                            </p>\n                            <p className=\"font-semibold\">{formatDate(courtDate.courtDate)}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <MapPin className=\"h-5 w-5 text-gray-500\" />\n                          <div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {t(\"cases.location\")}\n                            </p>\n                            <p className=\"font-semibold\">\n                              {courtDate.courtLocation || t(\"cases.locationTBD\")}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      <Separator />\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                          {t(\"cases.charges\")}\n                        </p>\n                        <p className=\"font-medium\">{courtDate.charges}</p>\n                      </div>\n                      {courtDate.judgeName && (\n                        <div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {t(\"cases.judge\")}\n                          </p>\n                          <p className=\"font-medium\">{courtDate.judgeName}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Check-in Tab */}\n          <TabsContent value=\"checkin\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Camera className=\"h-5 w-5\" />\n                  <span>{t(\"clientPortal.takePhotoCheckin\")}</span>\n                </CardTitle>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {t(\"clientPortal.photoRequired\")}\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {!selectedBond && (\n                  <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n                      <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                        {t(\"clientPortal.selectBondForCheckin\")}\n                      </p>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center\">\n                  <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-lg font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    {t(\"clientPortal.takePhoto\")}\n                  </p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\n                    {t(\"clientPortal.tapToTakePhoto\")}\n                  </p>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    capture=\"environment\"\n                    className=\"hidden\"\n                    id=\"photo-input\"\n                    data-testid=\"input-photo\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        handlePhotoCheckin(file);\n                      }\n                    }}\n                    disabled={!selectedBond || checkinMutation.isPending}\n                  />\n                  <label\n                    htmlFor=\"photo-input\"\n                    className={`inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white ${\n                      selectedBond && !checkinMutation.isPending\n                        ? \"bg-blue-600 hover:bg-blue-700 cursor-pointer\"\n                        : \"bg-gray-400 cursor-not-allowed\"\n                    }`}\n                  >\n                    {checkinMutation.isPending ? (\n                      <>\n                        <RefreshCw className=\"mr-2 h-5 w-5 animate-spin\" />\n                        {t(\"common.uploading\")}\n                      </>\n                    ) : (\n                      <>\n                        <Camera className=\"mr-2 h-5 w-5\" />\n                        {t(\"clientPortal.takePhoto\")}\n                      </>\n                    )}\n                  </label>\n                </div>\n\n                <div className=\"text-xs text-gray-500 dark:text-gray-400 space-y-1\">\n                  <p>• {t(\"clientPortal.locationRequired\")}</p>\n                  <p>• {t(\"clientPortal.photoVerificationRequired\")}</p>\n                  <p>• {t(\"clientPortal.ensureGoodLighting\")}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":23688},"client/src/pages/client.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { api } from \"@/lib/api\";\nimport { Client, Bond, Payment, Document } from \"@shared/schema\";\nimport { ArrowLeft, Phone, Mail, MapPin, Calendar, User, FileText, Clock, MessageSquare, DollarSign, Building, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\nexport default function ClientDetail() {\n  const params = useParams();\n  const clientId = params.id;\n\n  const { data: client, isLoading, error } = useQuery<Client>({\n    queryKey: [\"/api/clients\", clientId],\n    queryFn: () => api.getClient(clientId as string),\n    enabled: !!clientId,\n  });\n\n  // State for modals\n  const [showAddBondModal, setShowAddBondModal] = useState(false);\n  const [showRecordPaymentModal, setShowRecordPaymentModal] = useState(false);\n  const [showUploadDocumentModal, setShowUploadDocumentModal] = useState(false);\n\n  // Fetch related data for this client with explicit API calls\n  const { data: clientBonds = [], isLoading: bondsLoading } = useQuery<Bond[]>({\n    queryKey: [\"/api/bonds\", clientId],\n    queryFn: () => api.getBonds({ clientId: clientId as string }),\n    enabled: !!clientId,\n  });\n\n  const { data: clientPayments = [], isLoading: paymentsLoading } = useQuery<Payment[]>({\n    queryKey: [\"/api/payments\", clientId],\n    queryFn: () => api.getPayments({ clientId: clientId as string }),\n    enabled: !!clientId,\n  });\n\n  const { data: clientDocuments = [], isLoading: documentsLoading } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\", clientId],\n    queryFn: () => api.getDocuments({ relatedId: clientId as string, relatedType: \"client\" }),\n    enabled: !!clientId,\n  });\n\n  const { data: clientActivities = [], isLoading: activitiesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/activities\", clientId],\n    queryFn: () => api.getActivities({ resourceId: clientId as string, resourceType: \"client\", limit: 20 }),\n    enabled: !!clientId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 overflow-hidden\">\n        <Header\n          title=\"Client Details\"\n          subtitle=\"Loading client information...\"\n          showNewBondButton={false}\n        />\n        <div className=\"p-6 space-y-6\">\n          <Skeleton className=\"h-8 w-48\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Skeleton className=\"h-96 w-full\" />\n            </div>\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-64 w-full\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !client) {\n    return (\n      <div className=\"flex-1 overflow-hidden\">\n        <Header\n          title=\"Client Not Found\"\n          subtitle=\"The requested client could not be found\"\n          showNewBondButton={false}\n        />\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">Client Not Found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  The client you're looking for doesn't exist or may have been removed.\n                </p>\n                <Link href=\"/clients\">\n                  <Button variant=\"outline\">\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Back to Clients\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\">Inactive</Badge>;\n      case \"high_risk\":\n        return <Badge className=\"bg-amber-100 text-amber-800\">High Risk</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const formatDate = (date?: string | Date) => {\n    if (!date) return \"Not specified\";\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Client Details\"\n        subtitle={`${client.firstName} ${client.lastName}`}\n        showNewBondButton={false}\n      />\n\n      <div className=\"p-6 space-y-6\">\n        {/* Back Button */}\n        <div className=\"flex items-center\">\n          <Link href=\"/clients\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-clients\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Clients\n            </Button>\n          </Link>\n        </div>\n\n        {/* Client Header */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-medium text-xl\">\n                {getInitials(client.firstName, client.lastName)}\n              </span>\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"client-name\">\n                {client.firstName} {client.lastName}\n              </h1>\n              <div className=\"flex items-center space-x-4 mt-1\">\n                {getStatusBadge(client.status)}\n                <span className=\"text-sm text-muted-foreground\">\n                  Client since {formatDate(client.createdAt)}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-client\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Edit Client\n            </Button>\n            <Button size=\"sm\" data-testid=\"button-new-bond\">\n              Add Bond\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Tabs */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"details\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"details\" data-testid=\"tab-details\">Details</TabsTrigger>\n                <TabsTrigger value=\"bonds\" data-testid=\"tab-bonds\">Bonds</TabsTrigger>\n                <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">Payments</TabsTrigger>\n                <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">Documents</TabsTrigger>\n                <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">Timeline</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"details\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <User className=\"h-5 w-5 mr-2\" />\n                      Personal Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">First Name</label>\n                        <p className=\"text-sm\" data-testid=\"client-first-name\">{client.firstName}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Last Name</label>\n                        <p className=\"text-sm\" data-testid=\"client-last-name\">{client.lastName}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Date of Birth</label>\n                        <p className=\"text-sm\" data-testid=\"client-dob\">{formatDate(client.dateOfBirth)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                        <p className=\"text-sm\" data-testid=\"client-status\">{client.status}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border-t pt-4\">\n                      <h4 className=\"font-medium mb-3 flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        Address\n                      </h4>\n                      <div className=\"text-sm text-muted-foreground\" data-testid=\"client-address\">\n                        <p>{client.address}</p>\n                        <p>{client.city}, {client.state} {client.zipCode}</p>\n                      </div>\n                    </div>\n\n                    {client.notes && (\n                      <div className=\"border-t pt-4\">\n                        <h4 className=\"font-medium mb-2 flex items-center\">\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n                          Notes\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"client-notes\">\n                          {client.notes}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"bonds\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>Bonds ({clientBonds.length})</span>\n                      <Button size=\"sm\" data-testid=\"button-add-bond\" onClick={() => setShowAddBondModal(true)}>\n                        Add Bond\n                      </Button>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {bondsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-20 w-full\" />\n                        ))}\n                      </div>\n                    ) : clientBonds.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {clientBonds.map((bond: any) => (\n                          <div\n                            key={bond.id}\n                            className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                            data-testid={`bond-item-${bond.id}`}\n                          >\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <h3 className=\"font-medium\">{bond.bondNumber}</h3>\n                                  <Badge \n                                    className={\n                                      bond.status === 'active' ? 'bg-green-100 text-green-800' :\n                                      bond.status === 'completed' ? 'bg-blue-100 text-blue-800' :\n                                      bond.status === 'forfeited' ? 'bg-red-100 text-red-800' :\n                                      'bg-gray-100 text-gray-800'\n                                    }\n                                  >\n                                    {bond.status}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                  <span className=\"flex items-center\">\n                                    <DollarSign className=\"h-4 w-4 mr-1\" />\n                                    ${parseFloat(bond.bondAmount || '0').toLocaleString()}\n                                  </span>\n                                  <span className=\"flex items-center\">\n                                    Premium: ${parseFloat(bond.premiumAmount || '0').toLocaleString()}\n                                  </span>\n                                  {bond.issueDate && (\n                                    <span className=\"flex items-center\">\n                                      <Calendar className=\"h-4 w-4 mr-1\" />\n                                      {formatDate(bond.issueDate)}\n                                    </span>\n                                  )}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Payment Status: {bond.paymentStatus || 'pending'}\n                                </div>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-bond-${bond.id}`}>\n                                View Details\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No bonds found for this client.</p>\n                        <Button className=\"mt-4\" size=\"sm\" data-testid=\"button-add-first-bond\">\n                          Add First Bond\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"payments\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>Payment History ({clientPayments.length})</span>\n                      <Button size=\"sm\" data-testid=\"button-record-payment\" onClick={() => setShowRecordPaymentModal(true)}>\n                        Record Payment\n                      </Button>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {paymentsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : clientPayments.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {clientPayments.map((payment: any) => (\n                          <div\n                            key={payment.id}\n                            className=\"p-4 border rounded-lg\"\n                            data-testid={`payment-item-${payment.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <span className=\"font-medium\">{payment.transactionId}</span>\n                                  <Badge className=\"bg-green-100 text-green-800\">\n                                    {payment.status}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                  <span className=\"flex items-center\">\n                                    <DollarSign className=\"h-4 w-4 mr-1\" />\n                                    ${parseFloat(payment.amount || '0').toLocaleString()}\n                                  </span>\n                                  <span>{payment.paymentMethod}</span>\n                                  <span>{formatDate(payment.paymentDate)}</span>\n                                </div>\n                                {payment.notes && (\n                                  <p className=\"text-sm text-muted-foreground\">{payment.notes}</p>\n                                )}\n                              </div>\n                              <div className=\"text-lg font-medium\">\n                                ${parseFloat(payment.amount || '0').toLocaleString()}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <DollarSign className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No payments found for this client.</p>\n                        <Button className=\"mt-4\" size=\"sm\" data-testid=\"button-record-first-payment\">\n                          Record First Payment\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"documents\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span>Documents ({clientDocuments.length})</span>\n                      <Button size=\"sm\" data-testid=\"button-upload-document\" onClick={() => setShowUploadDocumentModal(true)}>\n                        Upload Document\n                      </Button>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {documentsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : clientDocuments.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {clientDocuments.map((document: any) => (\n                          <div\n                            key={document.id}\n                            className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                            data-testid={`document-item-${document.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <FileText className=\"h-8 w-8 text-muted-foreground\" />\n                                <div>\n                                  <h3 className=\"font-medium\">{document.fileName}</h3>\n                                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                    <span>{document.category}</span>\n                                    <span>{formatDate(document.uploadedAt)}</span>\n                                    <span>{document.fileSize ? `${(document.fileSize / 1024).toFixed(1)} KB` : ''}</span>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-document-${document.id}`}>\n                                  View\n                                </Button>\n                                <Button variant=\"outline\" size=\"sm\" data-testid={`button-download-document-${document.id}`}>\n                                  Download\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No documents found for this client.</p>\n                        <Button className=\"mt-4\" size=\"sm\" data-testid=\"button-upload-first-document\">\n                          Upload First Document\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"timeline\" className=\"mt-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Clock className=\"h-5 w-5 mr-2\" />\n                      Activity Timeline ({clientActivities.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {activitiesLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3, 4].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : clientActivities.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {clientActivities.map((activity: any, index: number) => (\n                          <div\n                            key={activity.id}\n                            className=\"flex items-start space-x-4 p-4 border-l-2 border-muted\"\n                            data-testid={`activity-item-${activity.id}`}\n                          >\n                            <div className=\"flex-shrink-0\">\n                              {activity.type === 'payment' ? (\n                                <DollarSign className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                              ) : activity.type === 'bond_created' ? (\n                                <FileText className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                              ) : activity.type === 'document_uploaded' ? (\n                                <FileText className=\"h-5 w-5 text-purple-600 mt-0.5\" />\n                              ) : activity.type === 'status_change' ? (\n                                <AlertCircle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                              ) : (\n                                <Clock className=\"h-5 w-5 text-gray-600 mt-0.5\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-sm font-medium text-gray-900\">\n                                  {activity.description}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {formatDate(activity.createdAt)}\n                                </p>\n                              </div>\n                              {activity.details && (\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  {activity.details}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No recent activity for this client.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Right Column - Statistics, Contact & Emergency */}\n          <div className=\"space-y-6\">\n            {/* Client Statistics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Client Overview</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-primary\">{clientBonds.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Bonds</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      ${clientPayments.reduce((sum: number, payment: Payment) => sum + parseFloat(payment.amount || '0'), 0).toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Payments</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{clientDocuments.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Documents</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">{clientActivities.length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Activities</div>\n                  </div>\n                </div>\n                \n                {/* Active Bonds Summary */}\n                {clientBonds.filter((bond: any) => bond.status === 'active').length > 0 && (\n                  <div className=\"border-t pt-4\">\n                    <h4 className=\"font-medium mb-2 flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                      Active Bonds\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {clientBonds\n                        .filter((bond: any) => bond.status === 'active')\n                        .slice(0, 3)\n                        .map((bond: Bond) => (\n                          <div key={bond.id} className=\"flex justify-between text-sm\">\n                            <span>{bond.bondNumber}</span>\n                            <span className=\"font-medium\">${parseFloat(bond.bondAmount || '0').toLocaleString()}</span>\n                          </div>\n                        ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            {/* Contact Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg\">\n                  <Phone className=\"h-5 w-5 mr-2\" />\n                  Contact Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Phone</p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"client-phone\">\n                      {client.phone}\n                    </p>\n                  </div>\n                </div>\n                {client.email && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm font-medium\">Email</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"client-email\">\n                        {client.email}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Emergency Contact */}\n            {(client.emergencyContact || client.emergencyPhone) && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Emergency Contact</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {client.emergencyContact && (\n                    <div>\n                      <p className=\"text-sm font-medium\">Name</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"emergency-contact\">\n                        {client.emergencyContact}\n                      </p>\n                    </div>\n                  )}\n                  {client.emergencyPhone && (\n                    <div>\n                      <p className=\"text-sm font-medium\">Phone</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"emergency-phone\">\n                        {client.emergencyPhone}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-call-client\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  Call Client\n                </Button>\n                {client.email && (\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-email-client\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Send Email\n                  </Button>\n                )}\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-schedule-checkin\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Schedule Check-in\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":31177},"client/src/pages/agents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Users, Edit3, Trash2, UserCheck, UserX } from \"lucide-react\";\nimport { insertUserSchema, users } from \"@shared/schema\";\n\ntype User = typeof users.$inferSelect;\n\n// Form schema for adding agents\nconst createAgentFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Form schema for editing agents (password is optional)\nconst editAgentFormSchema = insertUserSchema.partial({ password: true }).extend({\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  // Only validate password match if password is provided\n  if (data.password) {\n    return data.password === data.confirmPassword;\n  }\n  return true;\n}, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype CreateAgentFormData = z.infer<typeof createAgentFormSchema>;\ntype EditAgentFormData = z.infer<typeof editAgentFormSchema>;\n\nexport default function Agents() {\n  const [, setLocation] = useLocation();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingAgent, setEditingAgent] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState<string>(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\", { role: roleFilter, isActive: statusFilter }],\n    queryFn: () => api.getUsers({ \n      role: roleFilter || undefined, \n      isActive: statusFilter === \"true\" ? true : statusFilter === \"false\" ? false : undefined \n    }),\n  });\n\n  // Filter users based on search term\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch = !searchTerm || \n      user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesSearch;\n  });\n\n  const form = useForm<CreateAgentFormData | EditAgentFormData>({\n    resolver: zodResolver(editingAgent ? editAgentFormSchema : createAgentFormSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"agent\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: Omit<CreateAgentFormData, \"confirmPassword\">) =>\n      api.createUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setShowAddModal(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Agent created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & Partial<User>) =>\n      api.updateUser(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingAgent(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Agent updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateAgentFormData | EditAgentFormData) => {\n    const { confirmPassword, ...submitData } = data;\n    \n    if (editingAgent) {\n      // Remove password field if it's empty to avoid overwriting existing password\n      const updateData = { ...submitData };\n      if (!updateData.password || updateData.password.trim() === '') {\n        delete updateData.password;\n      }\n      updateMutation.mutate({ id: editingAgent.id, ...updateData });\n    } else {\n      createMutation.mutate(submitData as Omit<CreateAgentFormData, \"confirmPassword\">);\n    }\n  };\n\n  const handleEdit = (agent: User) => {\n    setEditingAgent(agent);\n    form.reset({\n      username: agent.username,\n      email: agent.email,\n      firstName: agent.firstName,\n      lastName: agent.lastName,\n      role: agent.role,\n      password: \"\",\n      confirmPassword: \"\",\n    });\n  };\n\n  const handleStatusToggle = (agent: User) => {\n    updateMutation.mutate({\n      id: agent.id,\n      isActive: !agent.isActive,\n    });\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => api.deleteUser(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Agent deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (agent: User) => {\n    if (confirm(`Are you sure you want to delete ${agent.firstName} ${agent.lastName}? This action cannot be undone.`)) {\n      deleteMutation.mutate(agent.id);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"agent\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"staff\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const closeModal = () => {\n    setShowAddModal(false);\n    setEditingAgent(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <Header title=\"Agents & Staff Management\" subtitle=\"Manage bail agents, staff members, and user accounts\" />\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card data-testid=\"stat-total-users\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Users</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{users.length}</div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-active-agents\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Active Agents</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {users.filter(u => u.role === \"agent\" && u.isActive).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-staff-members\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Staff Members</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {users.filter(u => u.role === \"staff\" && u.isActive).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-admins\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Administrators</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {users.filter(u => u.role === \"admin\" && u.isActive).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Agents & Staff\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name, username, or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-agents\"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-role-filter\">\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Roles</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"agent\">Agent</SelectItem>\n                <SelectItem value=\"staff\">Staff</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"true\">Active</SelectItem>\n                <SelectItem value=\"false\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              onClick={() => setShowAddModal(true)}\n              className=\"w-full sm:w-auto\"\n              data-testid=\"button-add-agent\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Agent\n            </Button>\n          </div>\n\n          {/* Users Table */}\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Username</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  Array.from({ length: 5 }).map((_, index) => (\n                    <TableRow key={index}>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-6 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-6 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-8 w-20\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredUsers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                      No agents found matching your criteria.\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredUsers.map((user) => (\n                    <TableRow key={user.id} data-testid={`row-agent-${user.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`text-name-${user.id}`}>\n                        {user.firstName} {user.lastName}\n                      </TableCell>\n                      <TableCell data-testid={`text-username-${user.id}`}>{user.username}</TableCell>\n                      <TableCell data-testid={`text-email-${user.id}`}>{user.email}</TableCell>\n                      <TableCell>\n                        <Badge className={getRoleColor(user.role)} data-testid={`badge-role-${user.id}`}>\n                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`badge-status-${user.id}`}\n                        >\n                          {user.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell data-testid={`text-created-${user.id}`}>\n                        {formatDate(user.createdAt)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(user)}\n                            data-testid={`button-edit-${user.id}`}\n                          >\n                            <Edit3 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleStatusToggle(user)}\n                            className={user.isActive ? \"text-orange-600\" : \"text-green-600\"}\n                            data-testid={`button-toggle-status-${user.id}`}\n                          >\n                            {user.isActive ? <UserX className=\"h-4 w-4\" /> : <UserCheck className=\"h-4 w-4\" />}\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(user)}\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid={`button-delete-${user.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Add/Edit Agent Modal */}\n      <Dialog open={showAddModal || editingAgent !== null} onOpenChange={closeModal}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-agent-form\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingAgent ? \"Edit Agent\" : \"Add New Agent\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingAgent ? \"Update agent information and permissions.\" : \"Create a new bail agent or staff member account.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"John\" \n                          {...field}\n                          data-testid=\"input-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Doe\" \n                          {...field}\n                          data-testid=\"input-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"johndoe\" \n                        {...field}\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"john@example.com\" \n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"agent\">Agent</SelectItem>\n                        <SelectItem value=\"staff\">Staff</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{editingAgent ? \"New Password (optional)\" : \"Password\"}</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\"\n                          placeholder={editingAgent ? \"Leave blank to keep current\" : \"Password\"}\n                          {...field}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\"\n                          placeholder=\"Confirm password\"\n                          {...field}\n                          data-testid=\"input-confirm-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={closeModal} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save\"\n                >\n                  {createMutation.isPending || updateMutation.isPending ? \"Saving...\" : \"Save Agent\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22462}},"version":1}